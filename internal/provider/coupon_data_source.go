// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CouponDataSource{}
var _ datasource.DataSourceWithConfigure = &CouponDataSource{}

func NewCouponDataSource() datasource.DataSource {
	return &CouponDataSource{}
}

// CouponDataSource is the data source implementation.
type CouponDataSource struct {
	client *sdk.SDK
}

// CouponDataSourceModel describes the data model.
type CouponDataSourceModel struct {
	ACL                *tfTypes.BaseEntityACL    `tfsdk:"acl"`
	Active             types.Bool                `tfsdk:"active"`
	Additional         map[string]types.String   `tfsdk:"additional"`
	CashbackPeriod     types.String              `tfsdk:"cashback_period"`
	Category           types.String              `tfsdk:"category"`
	CreatedAt          types.String              `tfsdk:"created_at"`
	Description        types.String              `tfsdk:"description"`
	Files              *tfTypes.BaseRelation     `tfsdk:"files"`
	FixedValue         types.Number              `tfsdk:"fixed_value"`
	FixedValueCurrency types.String              `tfsdk:"fixed_value_currency"`
	FixedValueDecimal  types.String              `tfsdk:"fixed_value_decimal"`
	Hydrate            types.Bool                `queryParam:"style=form,explode=true,name=hydrate" tfsdk:"hydrate"`
	ID                 types.String              `tfsdk:"id"`
	Manifest           []types.String            `tfsdk:"manifest"`
	Name               types.String              `tfsdk:"name"`
	Org                types.String              `tfsdk:"org"`
	Owners             []tfTypes.BaseEntityOwner `tfsdk:"owners"`
	PercentageValue    types.String              `tfsdk:"percentage_value"`
	Prices             *tfTypes.BaseRelation     `tfsdk:"prices"`
	PromoCodeUsage     types.String              `tfsdk:"promo_code_usage"`
	PromoCodes         []tfTypes.PromoCode       `tfsdk:"promo_codes"`
	RequiresPromoCode  types.Bool                `tfsdk:"requires_promo_code"`
	Schema             types.String              `tfsdk:"schema"`
	Strict             types.Bool                `queryParam:"style=form,explode=true,name=strict" tfsdk:"strict"`
	Tags               []types.String            `tfsdk:"tags"`
	Title              types.String              `tfsdk:"title"`
	Type               types.String              `tfsdk:"type"`
	UpdatedAt          types.String              `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *CouponDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_coupon"
}

// Schema defines the schema for the data source.
func (r *CouponDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Coupon DataSource",

		Attributes: map[string]schema.Attribute{
			"acl": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"delete": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"edit": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"view": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
				Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users.`,
			},
			"active": schema.BoolAttribute{
				Computed: true,
			},
			"additional": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Additional fields that are not part of the schema`,
			},
			"cashback_period": schema.StringAttribute{
				Computed:    true,
				Description: `The cashback period, for now it's limited to either 0 months or 12 months`,
			},
			"category": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"files": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
					},
				},
			},
			"fixed_value": schema.NumberAttribute{
				Computed:    true,
				Description: `Use if type is set to fixed. The fixed amount in cents to be discounted, represented as a whole integer.`,
			},
			"fixed_value_currency": schema.StringAttribute{
				Computed:    true,
				Description: `Use if type is set to fixed. Three-letter ISO currency code, in lowercase.`,
			},
			"fixed_value_decimal": schema.StringAttribute{
				Computed:    true,
				Description: `Use if type is set to fixed. The unit amount in cents to be discounted, represented as a decimal string with at most 12 decimal places.`,
			},
			"hydrate": schema.BoolAttribute{
				Optional:    true,
				Description: `Hydrates entities in relations when passed true`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the entity`,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"org": schema.StringAttribute{
				Computed:    true,
				Description: `Organization Id the entity belongs to`,
			},
			"owners": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"user_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"percentage_value": schema.StringAttribute{
				Computed:    true,
				Description: `Use if type is set to percentage. The percentage to be discounted, represented as a whole integer.`,
			},
			"prices": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
					},
				},
			},
			"promo_code_usage": schema.StringAttribute{
				Computed:    true,
				Description: `Map of ids of promo codes with their usage count. Parsed as JSON.`,
			},
			"promo_codes": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"code": schema.StringAttribute{
							Computed:    true,
							Description: `The code of the promo code`,
						},
						"has_usage_limit": schema.BoolAttribute{
							Computed:    true,
							Description: `Whether the promo code has a usage limit`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The id of the promo code`,
						},
						"usage_limit": schema.NumberAttribute{
							Computed:    true,
							Description: `The usage limit of the promo code`,
						},
					},
				},
			},
			"requires_promo_code": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the coupon requires a promo code to be applied`,
			},
			"schema": schema.StringAttribute{
				Computed: true,
			},
			"strict": schema.BoolAttribute{
				Optional:    true,
				Description: `When passed true, the response will contain only fields that match the schema, with non-matching fields included in ` + "`" + `__additional` + "`" + ``,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"title": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *CouponDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CouponDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CouponDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var couponID string
	couponID = data.ID.ValueString()

	hydrate := new(bool)
	if !data.Hydrate.IsUnknown() && !data.Hydrate.IsNull() {
		*hydrate = data.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	strict := new(bool)
	if !data.Strict.IsUnknown() && !data.Strict.IsNull() {
		*strict = data.Strict.ValueBool()
	} else {
		strict = nil
	}
	request := operations.GetCouponRequest{
		CouponID: couponID,
		Hydrate:  hydrate,
		Strict:   strict,
	}
	res, err := r.client.Coupon.GetCoupon(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Coupon != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedCoupon(res.Coupon)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
