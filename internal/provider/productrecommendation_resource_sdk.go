// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ProductRecommendationResourceModel) RefreshFromSharedProductRecommendation(ctx context.Context, resp *shared.ProductRecommendation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		if resp.ACL == nil {
			r.ACL = nil
		} else {
			r.ACL = &tfTypes.BaseEntityACL{}
			r.ACL.Delete = make([]types.String, 0, len(resp.ACL.Delete))
			for _, v := range resp.ACL.Delete {
				r.ACL.Delete = append(r.ACL.Delete, types.StringValue(v))
			}
			r.ACL.Edit = make([]types.String, 0, len(resp.ACL.Edit))
			for _, v := range resp.ACL.Edit {
				r.ACL.Edit = append(r.ACL.Edit, types.StringValue(v))
			}
			r.ACL.View = make([]types.String, 0, len(resp.ACL.View))
			for _, v := range resp.ACL.View {
				r.ACL.View = append(r.ACL.View, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		r.Owners = []tfTypes.BaseEntityOwner{}

		for _, ownersItem := range resp.Owners {
			var owners tfTypes.BaseEntityOwner

			owners.OrgID = types.StringValue(ownersItem.OrgID)
			owners.UserID = types.StringPointerValue(ownersItem.UserID)

			r.Owners = append(r.Owners, owners)
		}
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		if resp.Offers == nil {
			r.Offers = jsontypes.NewNormalizedNull()
		} else {
			offersResult, _ := json.Marshal(resp.Offers)
			r.Offers = jsontypes.NewNormalizedValue(string(offersResult))
		}
		if resp.SourcePrice == nil {
			r.SourcePrice = jsontypes.NewNormalizedNull()
		} else {
			sourcePriceResult, _ := json.Marshal(resp.SourcePrice)
			r.SourcePrice = jsontypes.NewNormalizedValue(string(sourcePriceResult))
		}
		if resp.SourceProduct == nil {
			r.SourceProduct = jsontypes.NewNormalizedNull()
		} else {
			sourceProductResult, _ := json.Marshal(resp.SourceProduct)
			r.SourceProduct = jsontypes.NewNormalizedValue(string(sourceProductResult))
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *ProductRecommendationResourceModel) ToOperationsDeleteProductRecommendationRequest(ctx context.Context) (*operations.DeleteProductRecommendationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var productRecommendationID string
	productRecommendationID = r.ID.ValueString()

	out := operations.DeleteProductRecommendationRequest{
		ProductRecommendationID: productRecommendationID,
	}

	return &out, diags
}

func (r *ProductRecommendationResourceModel) ToOperationsGetProductRecommendationRequest(ctx context.Context) (*operations.GetProductRecommendationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var productRecommendationID string
	productRecommendationID = r.ID.ValueString()

	out := operations.GetProductRecommendationRequest{
		ProductRecommendationID: productRecommendationID,
	}

	return &out, diags
}

func (r *ProductRecommendationResourceModel) ToOperationsPatchProductRecommendationRequest(ctx context.Context) (*operations.PatchProductRecommendationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	productRecommendationPatch, productRecommendationPatchDiags := r.ToSharedProductRecommendationPatch(ctx)
	diags.Append(productRecommendationPatchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var productRecommendationID string
	productRecommendationID = r.ID.ValueString()

	out := operations.PatchProductRecommendationRequest{
		ProductRecommendationPatch: *productRecommendationPatch,
		ProductRecommendationID:    productRecommendationID,
	}

	return &out, diags
}

func (r *ProductRecommendationResourceModel) ToSharedProductRecommendationCreate(ctx context.Context) (*shared.ProductRecommendationCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.ProductRecommendationCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.ProductRecommendationCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	var offers interface{}
	if !r.Offers.IsUnknown() && !r.Offers.IsNull() {
		_ = json.Unmarshal([]byte(r.Offers.ValueString()), &offers)
	}
	var sourcePrice interface{}
	if !r.SourcePrice.IsUnknown() && !r.SourcePrice.IsNull() {
		_ = json.Unmarshal([]byte(r.SourcePrice.ValueString()), &sourcePrice)
	}
	var sourceProduct interface{}
	if !r.SourceProduct.IsUnknown() && !r.SourceProduct.IsNull() {
		_ = json.Unmarshal([]byte(r.SourceProduct.ValueString()), &sourceProduct)
	}
	typeVar := shared.ProductRecommendationCreateType(r.Type.ValueString())
	out := shared.ProductRecommendationCreate{
		Additional:    additional,
		Files:         files,
		Manifest:      manifest,
		Purpose:       purpose,
		Schema:        schema,
		Tags:          tags1,
		Offers:        offers,
		SourcePrice:   sourcePrice,
		SourceProduct: sourceProduct,
		Type:          typeVar,
	}

	return &out, diags
}

func (r *ProductRecommendationResourceModel) ToSharedProductRecommendationPatch(ctx context.Context) (*shared.ProductRecommendationPatch, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.ProductRecommendationPatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.ProductRecommendationPatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	var offers interface{}
	if !r.Offers.IsUnknown() && !r.Offers.IsNull() {
		_ = json.Unmarshal([]byte(r.Offers.ValueString()), &offers)
	}
	var sourcePrice interface{}
	if !r.SourcePrice.IsUnknown() && !r.SourcePrice.IsNull() {
		_ = json.Unmarshal([]byte(r.SourcePrice.ValueString()), &sourcePrice)
	}
	var sourceProduct interface{}
	if !r.SourceProduct.IsUnknown() && !r.SourceProduct.IsNull() {
		_ = json.Unmarshal([]byte(r.SourceProduct.ValueString()), &sourceProduct)
	}
	typeVar := new(shared.ProductRecommendationPatchType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ProductRecommendationPatchType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.ProductRecommendationPatch{
		Additional:    additional,
		Files:         files,
		Manifest:      manifest,
		Purpose:       purpose,
		Schema:        schema,
		Tags:          tags1,
		Offers:        offers,
		SourcePrice:   sourcePrice,
		SourceProduct: sourceProduct,
		Type:          typeVar,
	}

	return &out, diags
}
