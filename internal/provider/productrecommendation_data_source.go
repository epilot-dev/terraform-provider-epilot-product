// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ProductRecommendationDataSource{}
var _ datasource.DataSourceWithConfigure = &ProductRecommendationDataSource{}

func NewProductRecommendationDataSource() datasource.DataSource {
	return &ProductRecommendationDataSource{}
}

// ProductRecommendationDataSource is the data source implementation.
type ProductRecommendationDataSource struct {
	// Provider configured SDK client.
	client *sdk.SDK
}

// ProductRecommendationDataSourceModel describes the data model.
type ProductRecommendationDataSourceModel struct {
	ACL           *tfTypes.BaseEntityACL                          `tfsdk:"acl"`
	Additional    map[string]jsontypes.Normalized                 `tfsdk:"additional"`
	CreatedAt     types.String                                    `tfsdk:"created_at"`
	Files         *tfTypes.BaseRelation                           `tfsdk:"files"`
	Hydrate       types.Bool                                      `queryParam:"style=form,explode=true,name=hydrate" tfsdk:"hydrate"`
	ID            types.String                                    `tfsdk:"id"`
	Manifest      []types.String                                  `tfsdk:"manifest"`
	Offers        []tfTypes.Offer                                 `tfsdk:"offers"`
	Org           types.String                                    `tfsdk:"org"`
	Owners        []tfTypes.BaseEntityOwner                       `tfsdk:"owners"`
	Purpose       []types.String                                  `tfsdk:"purpose"`
	Schema        types.String                                    `tfsdk:"schema"`
	SourcePrice   *tfTypes.ProductRecommendationCreateSourcePrice `tfsdk:"source_price"`
	SourceProduct *tfTypes.ProductRecommendationCreateSourcePrice `tfsdk:"source_product"`
	Strict        types.Bool                                      `queryParam:"style=form,explode=true,name=strict" tfsdk:"strict"`
	Tags          []types.String                                  `tfsdk:"tags"`
	Title         types.String                                    `tfsdk:"title"`
	Type          types.String                                    `tfsdk:"type"`
	UpdatedAt     types.String                                    `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *ProductRecommendationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_product_recommendation"
}

// Schema defines the schema for the data source.
func (r *ProductRecommendationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ProductRecommendation DataSource",

		Attributes: map[string]schema.Attribute{
			"acl": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"delete": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"edit": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"view": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
				Description: `Access control list (ACL) for an entity. Defines sharing access to external orgs or users.`,
			},
			"additional": schema.MapAttribute{
				Computed:    true,
				ElementType: jsontypes.NormalizedType{},
				Description: `Additional fields that are not part of the schema`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"files": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"entity_id": schema.StringAttribute{
									Computed: true,
								},
								"tags": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
					},
				},
			},
			"hydrate": schema.BoolAttribute{
				Optional:    true,
				Description: `Hydrates entities in relations when passed true`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"manifest": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Manifest ID used to create/update the entity`,
			},
			"offers": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"price_id": schema.StringAttribute{
							Computed: true,
						},
						"product_id": schema.StringAttribute{
							Computed: true,
						},
						"target_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"org": schema.StringAttribute{
				Computed:    true,
				Description: `Organization Id the entity belongs to`,
			},
			"owners": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"user_id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"purpose": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"schema": schema.StringAttribute{
				Computed: true,
			},
			"source_price": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"dollar_relation": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"entity_id": schema.StringAttribute{
												Computed: true,
											},
											"tags": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
								},
							},
						},
					},
				},
				Description: `Price being used as source`,
			},
			"source_product": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dollar_relation": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"dollar_relation": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"entity_id": schema.StringAttribute{
												Computed: true,
											},
											"tags": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
										},
									},
								},
							},
						},
					},
				},
				Description: `Product being used as source`,
			},
			"strict": schema.BoolAttribute{
				Optional:    true,
				Description: `When passed true, the response will contain only fields that match the schema, with non-matching fields included in ` + "`" + `__additional` + "`" + ``,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"title": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `Type of product recommendation`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *ProductRecommendationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ProductRecommendationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ProductRecommendationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetProductRecommendationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ProductRecommendation.GetProductRecommendation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ProductRecommendation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedProductRecommendation(ctx, res.ProductRecommendation)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
