// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ProductRecommendationDataSourceModel) RefreshFromSharedProductRecommendation(ctx context.Context, resp *shared.ProductRecommendation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		if resp.Offers == nil {
			r.Offers = jsontypes.NewNormalizedNull()
		} else {
			offersResult, _ := json.Marshal(resp.Offers)
			r.Offers = jsontypes.NewNormalizedValue(string(offersResult))
		}
		if resp.SourcePrice == nil {
			r.SourcePrice = jsontypes.NewNormalizedNull()
		} else {
			sourcePriceResult, _ := json.Marshal(resp.SourcePrice)
			r.SourcePrice = jsontypes.NewNormalizedValue(string(sourcePriceResult))
		}
		if resp.SourceProduct == nil {
			r.SourceProduct = jsontypes.NewNormalizedNull()
		} else {
			sourceProductResult, _ := json.Marshal(resp.SourceProduct)
			r.SourceProduct = jsontypes.NewNormalizedValue(string(sourceProductResult))
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *ProductRecommendationDataSourceModel) ToOperationsGetProductRecommendationRequest(ctx context.Context) (*operations.GetProductRecommendationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	hydrate := new(bool)
	if !r.Hydrate.IsUnknown() && !r.Hydrate.IsNull() {
		*hydrate = r.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	var productRecommendationID string
	productRecommendationID = r.ID.ValueString()

	strict := new(bool)
	if !r.Strict.IsUnknown() && !r.Strict.IsNull() {
		*strict = r.Strict.ValueBool()
	} else {
		strict = nil
	}
	out := operations.GetProductRecommendationRequest{
		Hydrate:                 hydrate,
		ProductRecommendationID: productRecommendationID,
		Strict:                  strict,
	}

	return &out, diags
}
