// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PriceDataSourceModel) RefreshFromSharedPrice(ctx context.Context, resp *shared.Price) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Active = types.BoolValue(resp.Active)
		r.BillingDurationAmount = types.Float64PointerValue(resp.BillingDurationAmount)
		if resp.BillingDurationUnit != nil {
			r.BillingDurationUnit = types.StringValue(string(*resp.BillingDurationUnit))
		} else {
			r.BillingDurationUnit = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.IsCompositePrice = types.BoolPointerValue(resp.IsCompositePrice)
		r.IsTaxInclusive = types.BoolPointerValue(resp.IsTaxInclusive)
		r.LongDescription = types.StringPointerValue(resp.LongDescription)
		r.NoticeTimeAmount = types.Float64PointerValue(resp.NoticeTimeAmount)
		if resp.NoticeTimeUnit != nil {
			r.NoticeTimeUnit = types.StringValue(string(*resp.NoticeTimeUnit))
		} else {
			r.NoticeTimeUnit = types.StringNull()
		}
		if resp.PriceComponents == nil {
			r.PriceComponents = nil
		} else {
			r.PriceComponents = &tfTypes.PriceCreatePriceComponents{}
			r.PriceComponents.DollarRelation = []tfTypes.PriceComponentRelation{}

			for _, dollarRelationItem1 := range resp.PriceComponents.DollarRelation {
				var dollarRelation1 tfTypes.PriceComponentRelation

				dollarRelation1.Tags = make([]types.String, 0, len(dollarRelationItem1.Tags))
				for _, v := range dollarRelationItem1.Tags {
					dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
				}
				dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem1.EntityID)

				r.PriceComponents.DollarRelation = append(r.PriceComponents.DollarRelation, dollarRelation1)
			}
		}
		if resp.PriceDisplayInJourneys != nil {
			r.PriceDisplayInJourneys = types.StringValue(string(*resp.PriceDisplayInJourneys))
		} else {
			r.PriceDisplayInJourneys = types.StringNull()
		}
		if resp.PricingModel != nil {
			r.PricingModel = types.StringValue(string(*resp.PricingModel))
		} else {
			r.PricingModel = types.StringNull()
		}
		r.RenewalDurationAmount = types.Float64PointerValue(resp.RenewalDurationAmount)
		if resp.RenewalDurationUnit != nil {
			r.RenewalDurationUnit = types.StringValue(string(*resp.RenewalDurationUnit))
		} else {
			r.RenewalDurationUnit = types.StringNull()
		}
		if resp.Tax == nil {
			r.Tax = jsontypes.NewNormalizedNull()
		} else {
			taxResult, _ := json.Marshal(resp.Tax)
			r.Tax = jsontypes.NewNormalizedValue(string(taxResult))
		}
		r.TerminationTimeAmount = types.Float64PointerValue(resp.TerminationTimeAmount)
		if resp.TerminationTimeUnit != nil {
			r.TerminationTimeUnit = types.StringValue(string(*resp.TerminationTimeUnit))
		} else {
			r.TerminationTimeUnit = types.StringNull()
		}
		r.Tiers = []tfTypes.PriceTier{}

		for _, tiersItem := range resp.Tiers {
			var tiers tfTypes.PriceTier

			if tiersItem.DisplayMode != nil {
				tiers.DisplayMode = types.StringValue(string(*tiersItem.DisplayMode))
			} else {
				tiers.DisplayMode = types.StringNull()
			}
			tiers.FlatFeeAmount = types.Float64PointerValue(tiersItem.FlatFeeAmount)
			tiers.FlatFeeAmountDecimal = types.StringPointerValue(tiersItem.FlatFeeAmountDecimal)
			tiers.UnitAmount = types.Float64PointerValue(tiersItem.UnitAmount)
			tiers.UnitAmountDecimal = types.StringPointerValue(tiersItem.UnitAmountDecimal)
			tiers.UpTo = types.Float64PointerValue(tiersItem.UpTo)

			r.Tiers = append(r.Tiers, tiers)
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
		r.Unit = types.StringPointerValue(resp.Unit)
		r.UnitAmount = types.Float64PointerValue(resp.UnitAmount)
		r.UnitAmountCurrency = types.StringPointerValue(resp.UnitAmountCurrency)
		r.UnitAmountDecimal = types.StringPointerValue(resp.UnitAmountDecimal)
		r.VariablePrice = types.BoolPointerValue(resp.VariablePrice)
	}

	return diags
}

func (r *PriceDataSourceModel) ToOperationsGetPriceRequest(ctx context.Context) (*operations.GetPriceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	hydrate := new(bool)
	if !r.Hydrate.IsUnknown() && !r.Hydrate.IsNull() {
		*hydrate = r.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	var priceID string
	priceID = r.ID.ValueString()

	strict := new(bool)
	if !r.Strict.IsUnknown() && !r.Strict.IsNull() {
		*strict = r.Strict.ValueBool()
	} else {
		strict = nil
	}
	out := operations.GetPriceRequest{
		Hydrate: hydrate,
		PriceID: priceID,
		Strict:  strict,
	}

	return &out, diags
}
