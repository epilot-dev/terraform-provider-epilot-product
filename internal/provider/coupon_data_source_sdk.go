// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CouponDataSourceModel) RefreshFromSharedCoupon(ctx context.Context, resp *shared.Coupon) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional != nil {
			r.Additional = make(map[string]jsontypes.Normalized, len(resp.Additional))
			for key, value := range resp.Additional {
				result, _ := json.Marshal(value)
				r.Additional[key] = jsontypes.NewNormalizedValue(string(result))
			}
		}
		if resp.ACL == nil {
			r.ACL = nil
		} else {
			r.ACL = &tfTypes.BaseEntityACL{}
			r.ACL.Delete = make([]types.String, 0, len(resp.ACL.Delete))
			for _, v := range resp.ACL.Delete {
				r.ACL.Delete = append(r.ACL.Delete, types.StringValue(v))
			}
			r.ACL.Edit = make([]types.String, 0, len(resp.ACL.Edit))
			for _, v := range resp.ACL.Edit {
				r.ACL.Edit = append(r.ACL.Edit, types.StringValue(v))
			}
			r.ACL.View = make([]types.String, 0, len(resp.ACL.View))
			for _, v := range resp.ACL.View {
				r.ACL.View = append(r.ACL.View, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		r.Owners = []tfTypes.BaseEntityOwner{}

		for _, ownersItem := range resp.Owners {
			var owners tfTypes.BaseEntityOwner

			owners.OrgID = types.StringValue(ownersItem.OrgID)
			owners.UserID = types.StringPointerValue(ownersItem.UserID)

			r.Owners = append(r.Owners, owners)
		}
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Active = types.BoolValue(resp.Active)
		if resp.CashbackPeriod != nil {
			r.CashbackPeriod = types.StringValue(string(*resp.CashbackPeriod))
		} else {
			r.CashbackPeriod = types.StringNull()
		}
		r.Category = types.StringValue(string(resp.Category))
		r.Description = types.StringPointerValue(resp.Description)
		r.FixedValue = types.Float64PointerValue(resp.FixedValue)
		r.FixedValueCurrency = types.StringPointerValue(resp.FixedValueCurrency)
		r.FixedValueDecimal = types.StringPointerValue(resp.FixedValueDecimal)
		r.Name = types.StringValue(resp.Name)
		r.PercentageValue = types.StringPointerValue(resp.PercentageValue)
		if resp.Prices == nil {
			r.Prices = nil
		} else {
			r.Prices = &tfTypes.BaseRelation{}
			r.Prices.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem1 := range resp.Prices.DollarRelation {
				var dollarRelation1 tfTypes.DollarRelation

				if dollarRelationItem1.Tags != nil {
					dollarRelation1.Tags = make([]types.String, 0, len(dollarRelationItem1.Tags))
					for _, v := range dollarRelationItem1.Tags {
						dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
					}
				}
				dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem1.EntityID)

				r.Prices.DollarRelation = append(r.Prices.DollarRelation, dollarRelation1)
			}
		}
		if resp.PromoCodeUsage == nil {
			r.PromoCodeUsage = jsontypes.NewNormalizedNull()
		} else {
			promoCodeUsageResult, _ := json.Marshal(resp.PromoCodeUsage)
			r.PromoCodeUsage = jsontypes.NewNormalizedValue(string(promoCodeUsageResult))
		}
		r.PromoCodes = []tfTypes.PromoCode{}

		for _, promoCodesItem := range resp.PromoCodes {
			var promoCodes tfTypes.PromoCode

			promoCodes.Code = types.StringValue(promoCodesItem.Code)
			promoCodes.HasUsageLimit = types.BoolPointerValue(promoCodesItem.HasUsageLimit)
			promoCodes.ID = types.StringValue(promoCodesItem.ID)
			promoCodes.UsageLimit = types.Float64PointerValue(promoCodesItem.UsageLimit)

			r.PromoCodes = append(r.PromoCodes, promoCodes)
		}
		r.RequiresPromoCode = types.BoolPointerValue(resp.RequiresPromoCode)
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *CouponDataSourceModel) ToOperationsGetCouponRequest(ctx context.Context) (*operations.GetCouponRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var couponID string
	couponID = r.ID.ValueString()

	hydrate := new(bool)
	if !r.Hydrate.IsUnknown() && !r.Hydrate.IsNull() {
		*hydrate = r.Hydrate.ValueBool()
	} else {
		hydrate = nil
	}
	strict := new(bool)
	if !r.Strict.IsUnknown() && !r.Strict.IsNull() {
		*strict = r.Strict.ValueBool()
	} else {
		strict = nil
	}
	out := operations.GetCouponRequest{
		CouponID: couponID,
		Hydrate:  hydrate,
		Strict:   strict,
	}

	return &out, diags
}
