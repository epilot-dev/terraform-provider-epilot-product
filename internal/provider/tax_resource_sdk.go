// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *TaxResourceModel) RefreshFromSharedTax(ctx context.Context, resp *shared.Tax) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Active = types.BoolValue(resp.Active)
		r.Description = types.StringPointerValue(resp.Description)
		rateResult, _ := json.Marshal(resp.Rate)
		r.Rate = jsontypes.NewNormalizedValue(string(rateResult))
		r.Region = types.StringValue(resp.Region)
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *TaxResourceModel) ToOperationsDeleteTaxRequest(ctx context.Context) (*operations.DeleteTaxRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var taxID string
	taxID = r.ID.ValueString()

	out := operations.DeleteTaxRequest{
		TaxID: taxID,
	}

	return &out, diags
}

func (r *TaxResourceModel) ToOperationsGetTaxRequest(ctx context.Context) (*operations.GetTaxRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var taxID string
	taxID = r.ID.ValueString()

	out := operations.GetTaxRequest{
		TaxID: taxID,
	}

	return &out, diags
}

func (r *TaxResourceModel) ToOperationsPatchTaxRequest(ctx context.Context) (*operations.PatchTaxRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	taxPatch, taxPatchDiags := r.ToSharedTaxPatch(ctx)
	diags.Append(taxPatchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var taxID string
	taxID = r.ID.ValueString()

	out := operations.PatchTaxRequest{
		TaxPatch: *taxPatch,
		TaxID:    taxID,
	}

	return &out, diags
}

func (r *TaxResourceModel) ToSharedTaxCreate(ctx context.Context) (*shared.TaxCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.TaxCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.TaxCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	var active bool
	active = r.Active.ValueBool()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var rate interface{}
	_ = json.Unmarshal([]byte(r.Rate.ValueString()), &rate)
	var region string
	region = r.Region.ValueString()

	typeVar := shared.TaxCreateType(r.Type.ValueString())
	out := shared.TaxCreate{
		Additional:  additional,
		Files:       files,
		Manifest:    manifest,
		Purpose:     purpose,
		Schema:      schema,
		Tags:        tags1,
		Active:      active,
		Description: description,
		Rate:        rate,
		Region:      region,
		Type:        typeVar,
	}

	return &out, diags
}

func (r *TaxResourceModel) ToSharedTaxPatch(ctx context.Context) (*shared.TaxPatch, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.TaxPatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.TaxPatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var rate interface{}
	if !r.Rate.IsUnknown() && !r.Rate.IsNull() {
		_ = json.Unmarshal([]byte(r.Rate.ValueString()), &rate)
	}
	region := new(string)
	if !r.Region.IsUnknown() && !r.Region.IsNull() {
		*region = r.Region.ValueString()
	} else {
		region = nil
	}
	typeVar := new(shared.TaxPatchType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.TaxPatchType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.TaxPatch{
		Additional:  additional,
		Files:       files,
		Manifest:    manifest,
		Purpose:     purpose,
		Schema:      schema,
		Tags:        tags1,
		Active:      active,
		Description: description,
		Rate:        rate,
		Region:      region,
		Type:        typeVar,
	}

	return &out, diags
}
