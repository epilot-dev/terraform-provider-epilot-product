// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ProductResourceModel) RefreshFromSharedProduct(ctx context.Context, resp *shared.Product) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		if resp.AvailabilityFiles == nil {
			r.AvailabilityFiles = nil
		} else {
			r.AvailabilityFiles = &tfTypes.BaseRelation{}
			r.AvailabilityFiles.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.AvailabilityFiles.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.AvailabilityFiles.DollarRelation = append(r.AvailabilityFiles.DollarRelation, dollarRelation)
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem1 := range resp.Files.DollarRelation {
				var dollarRelation1 tfTypes.DollarRelation

				if dollarRelationItem1.Tags != nil {
					dollarRelation1.Tags = make([]types.String, 0, len(dollarRelationItem1.Tags))
					for _, v := range dollarRelationItem1.Tags {
						dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
					}
				}
				dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem1.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation1)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Active = types.BoolValue(resp.Active)
		r.Categories = make([]types.String, 0, len(resp.Categories))
		for _, v := range resp.Categories {
			r.Categories = append(r.Categories, types.StringValue(v))
		}
		r.Code = types.StringPointerValue(resp.Code)
		r.Description = types.StringPointerValue(resp.Description)
		r.Feature = make([]jsontypes.Normalized, 0, len(resp.Feature))
		for _, featureItem := range resp.Feature {
			var feature jsontypes.Normalized

			featureResult, _ := json.Marshal(featureItem)
			feature = jsontypes.NewNormalizedValue(string(featureResult))

			r.Feature = append(r.Feature, feature)
		}
		r.InternalName = types.StringPointerValue(resp.InternalName)
		r.Name = types.StringValue(resp.Name)
		if resp.PriceOptions == nil {
			r.PriceOptions = nil
		} else {
			r.PriceOptions = &tfTypes.BaseRelation{}
			r.PriceOptions.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem2 := range resp.PriceOptions.DollarRelation {
				var dollarRelation2 tfTypes.DollarRelation

				if dollarRelationItem2.Tags != nil {
					dollarRelation2.Tags = make([]types.String, 0, len(dollarRelationItem2.Tags))
					for _, v := range dollarRelationItem2.Tags {
						dollarRelation2.Tags = append(dollarRelation2.Tags, types.StringValue(v))
					}
				}
				dollarRelation2.EntityID = types.StringPointerValue(dollarRelationItem2.EntityID)

				r.PriceOptions.DollarRelation = append(r.PriceOptions.DollarRelation, dollarRelation2)
			}
		}
		if resp.ProductDownloads == nil {
			r.ProductDownloads = nil
		} else {
			r.ProductDownloads = &tfTypes.BaseRelation{}
			r.ProductDownloads.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem3 := range resp.ProductDownloads.DollarRelation {
				var dollarRelation3 tfTypes.DollarRelation

				if dollarRelationItem3.Tags != nil {
					dollarRelation3.Tags = make([]types.String, 0, len(dollarRelationItem3.Tags))
					for _, v := range dollarRelationItem3.Tags {
						dollarRelation3.Tags = append(dollarRelation3.Tags, types.StringValue(v))
					}
				}
				dollarRelation3.EntityID = types.StringPointerValue(dollarRelationItem3.EntityID)

				r.ProductDownloads.DollarRelation = append(r.ProductDownloads.DollarRelation, dollarRelation3)
			}
		}
		if resp.ProductImages == nil {
			r.ProductImages = nil
		} else {
			r.ProductImages = &tfTypes.BaseRelation{}
			r.ProductImages.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem4 := range resp.ProductImages.DollarRelation {
				var dollarRelation4 tfTypes.DollarRelation

				if dollarRelationItem4.Tags != nil {
					dollarRelation4.Tags = make([]types.String, 0, len(dollarRelationItem4.Tags))
					for _, v := range dollarRelationItem4.Tags {
						dollarRelation4.Tags = append(dollarRelation4.Tags, types.StringValue(v))
					}
				}
				dollarRelation4.EntityID = types.StringPointerValue(dollarRelationItem4.EntityID)

				r.ProductImages.DollarRelation = append(r.ProductImages.DollarRelation, dollarRelation4)
			}
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
	}

	return diags
}

func (r *ProductResourceModel) ToOperationsDeleteProductRequest(ctx context.Context) (*operations.DeleteProductRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var productID string
	productID = r.ID.ValueString()

	out := operations.DeleteProductRequest{
		ProductID: productID,
	}

	return &out, diags
}

func (r *ProductResourceModel) ToOperationsGetProductRequest(ctx context.Context) (*operations.GetProductRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var productID string
	productID = r.ID.ValueString()

	out := operations.GetProductRequest{
		ProductID: productID,
	}

	return &out, diags
}

func (r *ProductResourceModel) ToOperationsPatchProductRequest(ctx context.Context) (*operations.PatchProductRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	productPatch, productPatchDiags := r.ToSharedProductPatch(ctx)
	diags.Append(productPatchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var productID string
	productID = r.ID.ValueString()

	out := operations.PatchProductRequest{
		ProductPatch: *productPatch,
		ProductID:    productID,
	}

	return &out, diags
}

func (r *ProductResourceModel) ToSharedProductCreate(ctx context.Context) (*shared.ProductCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var availabilityFiles *shared.BaseRelation
	if r.AvailabilityFiles != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.AvailabilityFiles.DollarRelation))
		for _, dollarRelationItem := range r.AvailabilityFiles.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		availabilityFiles = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation1 := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem1 := range r.Files.DollarRelation {
			var tags1 []string
			if dollarRelationItem1.Tags != nil {
				tags1 = make([]string, 0, len(dollarRelationItem1.Tags))
				for _, tagsItem1 := range dollarRelationItem1.Tags {
					tags1 = append(tags1, tagsItem1.ValueString())
				}
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.DollarRelation{
				Tags:     tags1,
				EntityID: entityId1,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation1,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.ProductCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.ProductCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags2 []string
	if r.Tags != nil {
		tags2 = make([]string, 0, len(r.Tags))
		for _, tagsItem2 := range r.Tags {
			tags2 = append(tags2, tagsItem2.ValueString())
		}
	}
	var active bool
	active = r.Active.ValueBool()

	categories := make([]string, 0, len(r.Categories))
	for _, categoriesItem := range r.Categories {
		categories = append(categories, categoriesItem.ValueString())
	}
	code := new(string)
	if !r.Code.IsUnknown() && !r.Code.IsNull() {
		*code = r.Code.ValueString()
	} else {
		code = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	feature := make([]interface{}, 0, len(r.Feature))
	for _, featureItem := range r.Feature {
		var featureTmp interface{}
		_ = json.Unmarshal([]byte(featureItem.ValueString()), &featureTmp)
		feature = append(feature, featureTmp)
	}
	internalName := new(string)
	if !r.InternalName.IsUnknown() && !r.InternalName.IsNull() {
		*internalName = r.InternalName.ValueString()
	} else {
		internalName = nil
	}
	var name string
	name = r.Name.ValueString()

	var priceOptions *shared.BaseRelation
	if r.PriceOptions != nil {
		dollarRelation2 := make([]shared.DollarRelation, 0, len(r.PriceOptions.DollarRelation))
		for _, dollarRelationItem2 := range r.PriceOptions.DollarRelation {
			var tags3 []string
			if dollarRelationItem2.Tags != nil {
				tags3 = make([]string, 0, len(dollarRelationItem2.Tags))
				for _, tagsItem3 := range dollarRelationItem2.Tags {
					tags3 = append(tags3, tagsItem3.ValueString())
				}
			}
			entityId2 := new(string)
			if !dollarRelationItem2.EntityID.IsUnknown() && !dollarRelationItem2.EntityID.IsNull() {
				*entityId2 = dollarRelationItem2.EntityID.ValueString()
			} else {
				entityId2 = nil
			}
			dollarRelation2 = append(dollarRelation2, shared.DollarRelation{
				Tags:     tags3,
				EntityID: entityId2,
			})
		}
		priceOptions = &shared.BaseRelation{
			DollarRelation: dollarRelation2,
		}
	}
	var productDownloads *shared.BaseRelation
	if r.ProductDownloads != nil {
		dollarRelation3 := make([]shared.DollarRelation, 0, len(r.ProductDownloads.DollarRelation))
		for _, dollarRelationItem3 := range r.ProductDownloads.DollarRelation {
			var tags4 []string
			if dollarRelationItem3.Tags != nil {
				tags4 = make([]string, 0, len(dollarRelationItem3.Tags))
				for _, tagsItem4 := range dollarRelationItem3.Tags {
					tags4 = append(tags4, tagsItem4.ValueString())
				}
			}
			entityId3 := new(string)
			if !dollarRelationItem3.EntityID.IsUnknown() && !dollarRelationItem3.EntityID.IsNull() {
				*entityId3 = dollarRelationItem3.EntityID.ValueString()
			} else {
				entityId3 = nil
			}
			dollarRelation3 = append(dollarRelation3, shared.DollarRelation{
				Tags:     tags4,
				EntityID: entityId3,
			})
		}
		productDownloads = &shared.BaseRelation{
			DollarRelation: dollarRelation3,
		}
	}
	var productImages *shared.BaseRelation
	if r.ProductImages != nil {
		dollarRelation4 := make([]shared.DollarRelation, 0, len(r.ProductImages.DollarRelation))
		for _, dollarRelationItem4 := range r.ProductImages.DollarRelation {
			var tags5 []string
			if dollarRelationItem4.Tags != nil {
				tags5 = make([]string, 0, len(dollarRelationItem4.Tags))
				for _, tagsItem5 := range dollarRelationItem4.Tags {
					tags5 = append(tags5, tagsItem5.ValueString())
				}
			}
			entityId4 := new(string)
			if !dollarRelationItem4.EntityID.IsUnknown() && !dollarRelationItem4.EntityID.IsNull() {
				*entityId4 = dollarRelationItem4.EntityID.ValueString()
			} else {
				entityId4 = nil
			}
			dollarRelation4 = append(dollarRelation4, shared.DollarRelation{
				Tags:     tags5,
				EntityID: entityId4,
			})
		}
		productImages = &shared.BaseRelation{
			DollarRelation: dollarRelation4,
		}
	}
	typeVar := new(shared.ProductCreateType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ProductCreateType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.ProductCreate{
		Additional:        additional,
		AvailabilityFiles: availabilityFiles,
		Files:             files,
		Manifest:          manifest,
		Purpose:           purpose,
		Schema:            schema,
		Tags:              tags2,
		Active:            active,
		Categories:        categories,
		Code:              code,
		Description:       description,
		Feature:           feature,
		InternalName:      internalName,
		Name:              name,
		PriceOptions:      priceOptions,
		ProductDownloads:  productDownloads,
		ProductImages:     productImages,
		Type:              typeVar,
	}

	return &out, diags
}

func (r *ProductResourceModel) ToSharedProductPatch(ctx context.Context) (*shared.ProductPatch, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var availabilityFiles *shared.BaseRelation
	if r.AvailabilityFiles != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.AvailabilityFiles.DollarRelation))
		for _, dollarRelationItem := range r.AvailabilityFiles.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		availabilityFiles = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation1 := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem1 := range r.Files.DollarRelation {
			var tags1 []string
			if dollarRelationItem1.Tags != nil {
				tags1 = make([]string, 0, len(dollarRelationItem1.Tags))
				for _, tagsItem1 := range dollarRelationItem1.Tags {
					tags1 = append(tags1, tagsItem1.ValueString())
				}
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.DollarRelation{
				Tags:     tags1,
				EntityID: entityId1,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation1,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.ProductPatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.ProductPatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags2 []string
	if r.Tags != nil {
		tags2 = make([]string, 0, len(r.Tags))
		for _, tagsItem2 := range r.Tags {
			tags2 = append(tags2, tagsItem2.ValueString())
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	categories := make([]string, 0, len(r.Categories))
	for _, categoriesItem := range r.Categories {
		categories = append(categories, categoriesItem.ValueString())
	}
	code := new(string)
	if !r.Code.IsUnknown() && !r.Code.IsNull() {
		*code = r.Code.ValueString()
	} else {
		code = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	feature := make([]interface{}, 0, len(r.Feature))
	for _, featureItem := range r.Feature {
		var featureTmp interface{}
		_ = json.Unmarshal([]byte(featureItem.ValueString()), &featureTmp)
		feature = append(feature, featureTmp)
	}
	internalName := new(string)
	if !r.InternalName.IsUnknown() && !r.InternalName.IsNull() {
		*internalName = r.InternalName.ValueString()
	} else {
		internalName = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var priceOptions *shared.BaseRelation
	if r.PriceOptions != nil {
		dollarRelation2 := make([]shared.DollarRelation, 0, len(r.PriceOptions.DollarRelation))
		for _, dollarRelationItem2 := range r.PriceOptions.DollarRelation {
			var tags3 []string
			if dollarRelationItem2.Tags != nil {
				tags3 = make([]string, 0, len(dollarRelationItem2.Tags))
				for _, tagsItem3 := range dollarRelationItem2.Tags {
					tags3 = append(tags3, tagsItem3.ValueString())
				}
			}
			entityId2 := new(string)
			if !dollarRelationItem2.EntityID.IsUnknown() && !dollarRelationItem2.EntityID.IsNull() {
				*entityId2 = dollarRelationItem2.EntityID.ValueString()
			} else {
				entityId2 = nil
			}
			dollarRelation2 = append(dollarRelation2, shared.DollarRelation{
				Tags:     tags3,
				EntityID: entityId2,
			})
		}
		priceOptions = &shared.BaseRelation{
			DollarRelation: dollarRelation2,
		}
	}
	var productDownloads *shared.BaseRelation
	if r.ProductDownloads != nil {
		dollarRelation3 := make([]shared.DollarRelation, 0, len(r.ProductDownloads.DollarRelation))
		for _, dollarRelationItem3 := range r.ProductDownloads.DollarRelation {
			var tags4 []string
			if dollarRelationItem3.Tags != nil {
				tags4 = make([]string, 0, len(dollarRelationItem3.Tags))
				for _, tagsItem4 := range dollarRelationItem3.Tags {
					tags4 = append(tags4, tagsItem4.ValueString())
				}
			}
			entityId3 := new(string)
			if !dollarRelationItem3.EntityID.IsUnknown() && !dollarRelationItem3.EntityID.IsNull() {
				*entityId3 = dollarRelationItem3.EntityID.ValueString()
			} else {
				entityId3 = nil
			}
			dollarRelation3 = append(dollarRelation3, shared.DollarRelation{
				Tags:     tags4,
				EntityID: entityId3,
			})
		}
		productDownloads = &shared.BaseRelation{
			DollarRelation: dollarRelation3,
		}
	}
	var productImages *shared.BaseRelation
	if r.ProductImages != nil {
		dollarRelation4 := make([]shared.DollarRelation, 0, len(r.ProductImages.DollarRelation))
		for _, dollarRelationItem4 := range r.ProductImages.DollarRelation {
			var tags5 []string
			if dollarRelationItem4.Tags != nil {
				tags5 = make([]string, 0, len(dollarRelationItem4.Tags))
				for _, tagsItem5 := range dollarRelationItem4.Tags {
					tags5 = append(tags5, tagsItem5.ValueString())
				}
			}
			entityId4 := new(string)
			if !dollarRelationItem4.EntityID.IsUnknown() && !dollarRelationItem4.EntityID.IsNull() {
				*entityId4 = dollarRelationItem4.EntityID.ValueString()
			} else {
				entityId4 = nil
			}
			dollarRelation4 = append(dollarRelation4, shared.DollarRelation{
				Tags:     tags5,
				EntityID: entityId4,
			})
		}
		productImages = &shared.BaseRelation{
			DollarRelation: dollarRelation4,
		}
	}
	typeVar := new(shared.ProductPatchType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ProductPatchType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.ProductPatch{
		Additional:        additional,
		AvailabilityFiles: availabilityFiles,
		Files:             files,
		Manifest:          manifest,
		Purpose:           purpose,
		Schema:            schema,
		Tags:              tags2,
		Active:            active,
		Categories:        categories,
		Code:              code,
		Description:       description,
		Feature:           feature,
		InternalName:      internalName,
		Name:              name,
		PriceOptions:      priceOptions,
		ProductDownloads:  productDownloads,
		ProductImages:     productImages,
		Type:              typeVar,
	}

	return &out, diags
}
