// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CouponResourceModel) RefreshFromSharedCoupon(ctx context.Context, resp *shared.Coupon) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Active = types.BoolValue(resp.Active)
		if resp.CashbackPeriod != nil {
			r.CashbackPeriod = types.StringValue(string(*resp.CashbackPeriod))
		} else {
			r.CashbackPeriod = types.StringNull()
		}
		r.Category = types.StringValue(string(resp.Category))
		r.Description = types.StringPointerValue(resp.Description)
		r.FixedValue = types.Float64PointerValue(resp.FixedValue)
		r.FixedValueCurrency = types.StringPointerValue(resp.FixedValueCurrency)
		r.FixedValueDecimal = types.StringPointerValue(resp.FixedValueDecimal)
		r.Name = types.StringValue(resp.Name)
		r.PercentageValue = types.StringPointerValue(resp.PercentageValue)
		if resp.Prices == nil {
			r.Prices = nil
		} else {
			r.Prices = &tfTypes.BaseRelation{}
			r.Prices.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem1 := range resp.Prices.DollarRelation {
				var dollarRelation1 tfTypes.DollarRelation

				if dollarRelationItem1.Tags != nil {
					dollarRelation1.Tags = make([]types.String, 0, len(dollarRelationItem1.Tags))
					for _, v := range dollarRelationItem1.Tags {
						dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
					}
				}
				dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem1.EntityID)

				r.Prices.DollarRelation = append(r.Prices.DollarRelation, dollarRelation1)
			}
		}
		if resp.PromoCodeUsage == nil {
			r.PromoCodeUsage = jsontypes.NewNormalizedNull()
		} else {
			promoCodeUsageResult, _ := json.Marshal(resp.PromoCodeUsage)
			r.PromoCodeUsage = jsontypes.NewNormalizedValue(string(promoCodeUsageResult))
		}
		r.PromoCodes = []tfTypes.PromoCode{}

		for _, promoCodesItem := range resp.PromoCodes {
			var promoCodes tfTypes.PromoCode

			promoCodes.Code = types.StringValue(promoCodesItem.Code)
			promoCodes.HasUsageLimit = types.BoolPointerValue(promoCodesItem.HasUsageLimit)
			promoCodes.ID = types.StringValue(promoCodesItem.ID)
			promoCodes.UsageLimit = types.Float64PointerValue(promoCodesItem.UsageLimit)

			r.PromoCodes = append(r.PromoCodes, promoCodes)
		}
		r.RequiresPromoCode = types.BoolPointerValue(resp.RequiresPromoCode)
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *CouponResourceModel) ToOperationsDeleteCouponRequest(ctx context.Context) (*operations.DeleteCouponRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var couponID string
	couponID = r.ID.ValueString()

	out := operations.DeleteCouponRequest{
		CouponID: couponID,
	}

	return &out, diags
}

func (r *CouponResourceModel) ToOperationsGetCouponRequest(ctx context.Context) (*operations.GetCouponRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var couponID string
	couponID = r.ID.ValueString()

	out := operations.GetCouponRequest{
		CouponID: couponID,
	}

	return &out, diags
}

func (r *CouponResourceModel) ToOperationsPatchCouponRequest(ctx context.Context) (*operations.PatchCouponRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	couponPatch, couponPatchDiags := r.ToSharedCouponPatch(ctx)
	diags.Append(couponPatchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var couponID string
	couponID = r.ID.ValueString()

	out := operations.PatchCouponRequest{
		CouponPatch: *couponPatch,
		CouponID:    couponID,
	}

	return &out, diags
}

func (r *CouponResourceModel) ToSharedCouponCreate(ctx context.Context) (*shared.CouponCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.CouponCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.CouponCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	var active bool
	active = r.Active.ValueBool()

	cashbackPeriod := new(shared.CouponCreateCashbackPeriod)
	if !r.CashbackPeriod.IsUnknown() && !r.CashbackPeriod.IsNull() {
		*cashbackPeriod = shared.CouponCreateCashbackPeriod(r.CashbackPeriod.ValueString())
	} else {
		cashbackPeriod = nil
	}
	category := shared.CouponCreateCategory(r.Category.ValueString())
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	fixedValue := new(float64)
	if !r.FixedValue.IsUnknown() && !r.FixedValue.IsNull() {
		*fixedValue = r.FixedValue.ValueFloat64()
	} else {
		fixedValue = nil
	}
	fixedValueCurrency := new(string)
	if !r.FixedValueCurrency.IsUnknown() && !r.FixedValueCurrency.IsNull() {
		*fixedValueCurrency = r.FixedValueCurrency.ValueString()
	} else {
		fixedValueCurrency = nil
	}
	fixedValueDecimal := new(string)
	if !r.FixedValueDecimal.IsUnknown() && !r.FixedValueDecimal.IsNull() {
		*fixedValueDecimal = r.FixedValueDecimal.ValueString()
	} else {
		fixedValueDecimal = nil
	}
	var name string
	name = r.Name.ValueString()

	percentageValue := new(string)
	if !r.PercentageValue.IsUnknown() && !r.PercentageValue.IsNull() {
		*percentageValue = r.PercentageValue.ValueString()
	} else {
		percentageValue = nil
	}
	var prices *shared.BaseRelation
	if r.Prices != nil {
		dollarRelation1 := make([]shared.DollarRelation, 0, len(r.Prices.DollarRelation))
		for _, dollarRelationItem1 := range r.Prices.DollarRelation {
			var tags2 []string
			if dollarRelationItem1.Tags != nil {
				tags2 = make([]string, 0, len(dollarRelationItem1.Tags))
				for _, tagsItem2 := range dollarRelationItem1.Tags {
					tags2 = append(tags2, tagsItem2.ValueString())
				}
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.DollarRelation{
				Tags:     tags2,
				EntityID: entityId1,
			})
		}
		prices = &shared.BaseRelation{
			DollarRelation: dollarRelation1,
		}
	}
	var promoCodeUsage interface{}
	if !r.PromoCodeUsage.IsUnknown() && !r.PromoCodeUsage.IsNull() {
		_ = json.Unmarshal([]byte(r.PromoCodeUsage.ValueString()), &promoCodeUsage)
	}
	promoCodes := make([]shared.PromoCode, 0, len(r.PromoCodes))
	for _, promoCodesItem := range r.PromoCodes {
		var code string
		code = promoCodesItem.Code.ValueString()

		hasUsageLimit := new(bool)
		if !promoCodesItem.HasUsageLimit.IsUnknown() && !promoCodesItem.HasUsageLimit.IsNull() {
			*hasUsageLimit = promoCodesItem.HasUsageLimit.ValueBool()
		} else {
			hasUsageLimit = nil
		}
		var id string
		id = promoCodesItem.ID.ValueString()

		usageLimit := new(float64)
		if !promoCodesItem.UsageLimit.IsUnknown() && !promoCodesItem.UsageLimit.IsNull() {
			*usageLimit = promoCodesItem.UsageLimit.ValueFloat64()
		} else {
			usageLimit = nil
		}
		promoCodes = append(promoCodes, shared.PromoCode{
			Code:          code,
			HasUsageLimit: hasUsageLimit,
			ID:            id,
			UsageLimit:    usageLimit,
		})
	}
	requiresPromoCode := new(bool)
	if !r.RequiresPromoCode.IsUnknown() && !r.RequiresPromoCode.IsNull() {
		*requiresPromoCode = r.RequiresPromoCode.ValueBool()
	} else {
		requiresPromoCode = nil
	}
	typeVar := shared.CouponCreateType(r.Type.ValueString())
	out := shared.CouponCreate{
		Additional:         additional,
		Files:              files,
		Manifest:           manifest,
		Purpose:            purpose,
		Schema:             schema,
		Tags:               tags1,
		Active:             active,
		CashbackPeriod:     cashbackPeriod,
		Category:           category,
		Description:        description,
		FixedValue:         fixedValue,
		FixedValueCurrency: fixedValueCurrency,
		FixedValueDecimal:  fixedValueDecimal,
		Name:               name,
		PercentageValue:    percentageValue,
		Prices:             prices,
		PromoCodeUsage:     promoCodeUsage,
		PromoCodes:         promoCodes,
		RequiresPromoCode:  requiresPromoCode,
		Type:               typeVar,
	}

	return &out, diags
}

func (r *CouponResourceModel) ToSharedCouponPatch(ctx context.Context) (*shared.CouponPatch, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.CouponPatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.CouponPatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	cashbackPeriod := new(shared.CouponPatchCashbackPeriod)
	if !r.CashbackPeriod.IsUnknown() && !r.CashbackPeriod.IsNull() {
		*cashbackPeriod = shared.CouponPatchCashbackPeriod(r.CashbackPeriod.ValueString())
	} else {
		cashbackPeriod = nil
	}
	category := new(shared.CouponPatchCategory)
	if !r.Category.IsUnknown() && !r.Category.IsNull() {
		*category = shared.CouponPatchCategory(r.Category.ValueString())
	} else {
		category = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	fixedValue := new(float64)
	if !r.FixedValue.IsUnknown() && !r.FixedValue.IsNull() {
		*fixedValue = r.FixedValue.ValueFloat64()
	} else {
		fixedValue = nil
	}
	fixedValueCurrency := new(string)
	if !r.FixedValueCurrency.IsUnknown() && !r.FixedValueCurrency.IsNull() {
		*fixedValueCurrency = r.FixedValueCurrency.ValueString()
	} else {
		fixedValueCurrency = nil
	}
	fixedValueDecimal := new(string)
	if !r.FixedValueDecimal.IsUnknown() && !r.FixedValueDecimal.IsNull() {
		*fixedValueDecimal = r.FixedValueDecimal.ValueString()
	} else {
		fixedValueDecimal = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	percentageValue := new(string)
	if !r.PercentageValue.IsUnknown() && !r.PercentageValue.IsNull() {
		*percentageValue = r.PercentageValue.ValueString()
	} else {
		percentageValue = nil
	}
	var prices *shared.BaseRelation
	if r.Prices != nil {
		dollarRelation1 := make([]shared.DollarRelation, 0, len(r.Prices.DollarRelation))
		for _, dollarRelationItem1 := range r.Prices.DollarRelation {
			var tags2 []string
			if dollarRelationItem1.Tags != nil {
				tags2 = make([]string, 0, len(dollarRelationItem1.Tags))
				for _, tagsItem2 := range dollarRelationItem1.Tags {
					tags2 = append(tags2, tagsItem2.ValueString())
				}
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.DollarRelation{
				Tags:     tags2,
				EntityID: entityId1,
			})
		}
		prices = &shared.BaseRelation{
			DollarRelation: dollarRelation1,
		}
	}
	var promoCodeUsage interface{}
	if !r.PromoCodeUsage.IsUnknown() && !r.PromoCodeUsage.IsNull() {
		_ = json.Unmarshal([]byte(r.PromoCodeUsage.ValueString()), &promoCodeUsage)
	}
	promoCodes := make([]shared.PromoCode, 0, len(r.PromoCodes))
	for _, promoCodesItem := range r.PromoCodes {
		var code string
		code = promoCodesItem.Code.ValueString()

		hasUsageLimit := new(bool)
		if !promoCodesItem.HasUsageLimit.IsUnknown() && !promoCodesItem.HasUsageLimit.IsNull() {
			*hasUsageLimit = promoCodesItem.HasUsageLimit.ValueBool()
		} else {
			hasUsageLimit = nil
		}
		var id string
		id = promoCodesItem.ID.ValueString()

		usageLimit := new(float64)
		if !promoCodesItem.UsageLimit.IsUnknown() && !promoCodesItem.UsageLimit.IsNull() {
			*usageLimit = promoCodesItem.UsageLimit.ValueFloat64()
		} else {
			usageLimit = nil
		}
		promoCodes = append(promoCodes, shared.PromoCode{
			Code:          code,
			HasUsageLimit: hasUsageLimit,
			ID:            id,
			UsageLimit:    usageLimit,
		})
	}
	requiresPromoCode := new(bool)
	if !r.RequiresPromoCode.IsUnknown() && !r.RequiresPromoCode.IsNull() {
		*requiresPromoCode = r.RequiresPromoCode.ValueBool()
	} else {
		requiresPromoCode = nil
	}
	typeVar := new(shared.CouponPatchType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.CouponPatchType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.CouponPatch{
		Additional:         additional,
		Files:              files,
		Manifest:           manifest,
		Purpose:            purpose,
		Schema:             schema,
		Tags:               tags1,
		Active:             active,
		CashbackPeriod:     cashbackPeriod,
		Category:           category,
		Description:        description,
		FixedValue:         fixedValue,
		FixedValueCurrency: fixedValueCurrency,
		FixedValueDecimal:  fixedValueDecimal,
		Name:               name,
		PercentageValue:    percentageValue,
		Prices:             prices,
		PromoCodeUsage:     promoCodeUsage,
		PromoCodes:         promoCodes,
		RequiresPromoCode:  requiresPromoCode,
		Type:               typeVar,
	}

	return &out, diags
}
