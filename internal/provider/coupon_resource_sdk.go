// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *CouponResourceModel) ToSharedCouponCreate() *shared.CouponCreate {
	additional := make(map[string]interface{})
	for additionalKey, additionalValue := range r.Additional {
		var additionalInst interface{}
		_ = json.Unmarshal([]byte(additionalValue.ValueString()), &additionalInst)
		additional[additionalKey] = additionalInst
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		var dollarRelation []shared.DollarRelation = []shared.DollarRelation{}
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string = []string{}
			for _, tagsItem := range dollarRelationItem.Tags {
				tags = append(tags, tagsItem.ValueString())
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	var manifest []string = []string{}
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string = []string{}
	for _, purposeItem := range r.Purpose {
		purpose = append(purpose, purposeItem.ValueString())
	}
	schema := new(shared.CouponCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.CouponCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string = []string{}
	for _, tagsItem1 := range r.Tags {
		tags1 = append(tags1, tagsItem1.ValueString())
	}
	var active bool
	active = r.Active.ValueBool()

	cashbackPeriod := new(shared.CouponCreateCashbackPeriod)
	if !r.CashbackPeriod.IsUnknown() && !r.CashbackPeriod.IsNull() {
		*cashbackPeriod = shared.CouponCreateCashbackPeriod(r.CashbackPeriod.ValueString())
	} else {
		cashbackPeriod = nil
	}
	category := shared.CouponCreateCategory(r.Category.ValueString())
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	fixedValue := new(float64)
	if !r.FixedValue.IsUnknown() && !r.FixedValue.IsNull() {
		*fixedValue, _ = r.FixedValue.ValueBigFloat().Float64()
	} else {
		fixedValue = nil
	}
	fixedValueCurrency := new(string)
	if !r.FixedValueCurrency.IsUnknown() && !r.FixedValueCurrency.IsNull() {
		*fixedValueCurrency = r.FixedValueCurrency.ValueString()
	} else {
		fixedValueCurrency = nil
	}
	fixedValueDecimal := new(string)
	if !r.FixedValueDecimal.IsUnknown() && !r.FixedValueDecimal.IsNull() {
		*fixedValueDecimal = r.FixedValueDecimal.ValueString()
	} else {
		fixedValueDecimal = nil
	}
	var name string
	name = r.Name.ValueString()

	percentageValue := new(string)
	if !r.PercentageValue.IsUnknown() && !r.PercentageValue.IsNull() {
		*percentageValue = r.PercentageValue.ValueString()
	} else {
		percentageValue = nil
	}
	var prices *shared.BaseRelation
	if r.Prices != nil {
		var dollarRelation1 []shared.DollarRelation = []shared.DollarRelation{}
		for _, dollarRelationItem1 := range r.Prices.DollarRelation {
			var tags2 []string = []string{}
			for _, tagsItem2 := range dollarRelationItem1.Tags {
				tags2 = append(tags2, tagsItem2.ValueString())
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.DollarRelation{
				Tags:     tags2,
				EntityID: entityId1,
			})
		}
		prices = &shared.BaseRelation{
			DollarRelation: dollarRelation1,
		}
	}
	var promoCodeUsage interface{}
	if !r.PromoCodeUsage.IsUnknown() && !r.PromoCodeUsage.IsNull() {
		_ = json.Unmarshal([]byte(r.PromoCodeUsage.ValueString()), &promoCodeUsage)
	}
	var promoCodes []shared.PromoCode = []shared.PromoCode{}
	for _, promoCodesItem := range r.PromoCodes {
		var code string
		code = promoCodesItem.Code.ValueString()

		hasUsageLimit := new(bool)
		if !promoCodesItem.HasUsageLimit.IsUnknown() && !promoCodesItem.HasUsageLimit.IsNull() {
			*hasUsageLimit = promoCodesItem.HasUsageLimit.ValueBool()
		} else {
			hasUsageLimit = nil
		}
		var id string
		id = promoCodesItem.ID.ValueString()

		usageLimit := new(float64)
		if !promoCodesItem.UsageLimit.IsUnknown() && !promoCodesItem.UsageLimit.IsNull() {
			*usageLimit, _ = promoCodesItem.UsageLimit.ValueBigFloat().Float64()
		} else {
			usageLimit = nil
		}
		promoCodes = append(promoCodes, shared.PromoCode{
			Code:          code,
			HasUsageLimit: hasUsageLimit,
			ID:            id,
			UsageLimit:    usageLimit,
		})
	}
	requiresPromoCode := new(bool)
	if !r.RequiresPromoCode.IsUnknown() && !r.RequiresPromoCode.IsNull() {
		*requiresPromoCode = r.RequiresPromoCode.ValueBool()
	} else {
		requiresPromoCode = nil
	}
	typeVar := shared.CouponCreateType(r.Type.ValueString())
	out := shared.CouponCreate{
		Additional:         additional,
		Files:              files,
		Manifest:           manifest,
		Purpose:            purpose,
		Schema:             schema,
		Tags:               tags1,
		Active:             active,
		CashbackPeriod:     cashbackPeriod,
		Category:           category,
		Description:        description,
		FixedValue:         fixedValue,
		FixedValueCurrency: fixedValueCurrency,
		FixedValueDecimal:  fixedValueDecimal,
		Name:               name,
		PercentageValue:    percentageValue,
		Prices:             prices,
		PromoCodeUsage:     promoCodeUsage,
		PromoCodes:         promoCodes,
		RequiresPromoCode:  requiresPromoCode,
		Type:               typeVar,
	}
	return &out
}

func (r *CouponResourceModel) RefreshFromSharedCoupon(resp *shared.Coupon) {
	if resp != nil {
		if resp.Additional != nil {
			r.Additional = make(map[string]types.String, len(resp.Additional))
			for key, value := range resp.Additional {
				result, _ := json.Marshal(value)
				r.Additional[key] = types.StringValue(string(result))
			}
		}
		if resp.ACL == nil {
			r.ACL = nil
		} else {
			r.ACL = &tfTypes.BaseEntityACL{}
			r.ACL.Delete = make([]types.String, 0, len(resp.ACL.Delete))
			for _, v := range resp.ACL.Delete {
				r.ACL.Delete = append(r.ACL.Delete, types.StringValue(v))
			}
			r.ACL.Edit = make([]types.String, 0, len(resp.ACL.Edit))
			for _, v := range resp.ACL.Edit {
				r.ACL.Edit = append(r.ACL.Edit, types.StringValue(v))
			}
			r.ACL.View = make([]types.String, 0, len(resp.ACL.View))
			for _, v := range resp.ACL.View {
				r.ACL.View = append(r.ACL.View, types.StringValue(v))
			}
		}
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}
			if len(r.Files.DollarRelation) > len(resp.Files.DollarRelation) {
				r.Files.DollarRelation = r.Files.DollarRelation[:len(resp.Files.DollarRelation)]
			}
			for dollarRelationCount, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation1 tfTypes.DollarRelation
				if dollarRelationItem.Tags != nil {
					dollarRelation1.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
					}
				}
				dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)
				if dollarRelationCount+1 > len(r.Files.DollarRelation) {
					r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation1)
				} else {
					r.Files.DollarRelation[dollarRelationCount].Tags = dollarRelation1.Tags
					r.Files.DollarRelation[dollarRelationCount].EntityID = dollarRelation1.EntityID
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		r.Owners = []tfTypes.BaseEntityOwner{}
		if len(r.Owners) > len(resp.Owners) {
			r.Owners = r.Owners[:len(resp.Owners)]
		}
		for ownersCount, ownersItem := range resp.Owners {
			var owners1 tfTypes.BaseEntityOwner
			owners1.OrgID = types.StringValue(ownersItem.OrgID)
			owners1.UserID = types.StringPointerValue(ownersItem.UserID)
			if ownersCount+1 > len(r.Owners) {
				r.Owners = append(r.Owners, owners1)
			} else {
				r.Owners[ownersCount].OrgID = owners1.OrgID
				r.Owners[ownersCount].UserID = owners1.UserID
			}
		}
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		r.Active = types.BoolValue(resp.Active)
		if resp.CashbackPeriod != nil {
			r.CashbackPeriod = types.StringValue(string(*resp.CashbackPeriod))
		} else {
			r.CashbackPeriod = types.StringNull()
		}
		r.Category = types.StringValue(string(resp.Category))
		r.Description = types.StringPointerValue(resp.Description)
		if resp.FixedValue != nil {
			r.FixedValue = types.NumberValue(big.NewFloat(float64(*resp.FixedValue)))
		} else {
			r.FixedValue = types.NumberNull()
		}
		r.FixedValueCurrency = types.StringPointerValue(resp.FixedValueCurrency)
		r.FixedValueDecimal = types.StringPointerValue(resp.FixedValueDecimal)
		r.Name = types.StringValue(resp.Name)
		r.PercentageValue = types.StringPointerValue(resp.PercentageValue)
		if resp.Prices == nil {
			r.Prices = nil
		} else {
			r.Prices = &tfTypes.BaseRelation{}
			r.Prices.DollarRelation = []tfTypes.DollarRelation{}
			if len(r.Prices.DollarRelation) > len(resp.Prices.DollarRelation) {
				r.Prices.DollarRelation = r.Prices.DollarRelation[:len(resp.Prices.DollarRelation)]
			}
			for dollarRelationCount1, dollarRelationItem1 := range resp.Prices.DollarRelation {
				var dollarRelation3 tfTypes.DollarRelation
				if dollarRelationItem1.Tags != nil {
					dollarRelation3.Tags = make([]types.String, 0, len(dollarRelationItem1.Tags))
					for _, v := range dollarRelationItem1.Tags {
						dollarRelation3.Tags = append(dollarRelation3.Tags, types.StringValue(v))
					}
				}
				dollarRelation3.EntityID = types.StringPointerValue(dollarRelationItem1.EntityID)
				if dollarRelationCount1+1 > len(r.Prices.DollarRelation) {
					r.Prices.DollarRelation = append(r.Prices.DollarRelation, dollarRelation3)
				} else {
					r.Prices.DollarRelation[dollarRelationCount1].Tags = dollarRelation3.Tags
					r.Prices.DollarRelation[dollarRelationCount1].EntityID = dollarRelation3.EntityID
				}
			}
		}
		if resp.PromoCodeUsage == nil {
			r.PromoCodeUsage = types.StringNull()
		} else {
			promoCodeUsageResult, _ := json.Marshal(resp.PromoCodeUsage)
			r.PromoCodeUsage = types.StringValue(string(promoCodeUsageResult))
		}
		r.PromoCodes = []tfTypes.PromoCode{}
		if len(r.PromoCodes) > len(resp.PromoCodes) {
			r.PromoCodes = r.PromoCodes[:len(resp.PromoCodes)]
		}
		for promoCodesCount, promoCodesItem := range resp.PromoCodes {
			var promoCodes1 tfTypes.PromoCode
			promoCodes1.Code = types.StringValue(promoCodesItem.Code)
			promoCodes1.HasUsageLimit = types.BoolPointerValue(promoCodesItem.HasUsageLimit)
			promoCodes1.ID = types.StringValue(promoCodesItem.ID)
			if promoCodesItem.UsageLimit != nil {
				promoCodes1.UsageLimit = types.NumberValue(big.NewFloat(float64(*promoCodesItem.UsageLimit)))
			} else {
				promoCodes1.UsageLimit = types.NumberNull()
			}
			if promoCodesCount+1 > len(r.PromoCodes) {
				r.PromoCodes = append(r.PromoCodes, promoCodes1)
			} else {
				r.PromoCodes[promoCodesCount].Code = promoCodes1.Code
				r.PromoCodes[promoCodesCount].HasUsageLimit = promoCodes1.HasUsageLimit
				r.PromoCodes[promoCodesCount].ID = promoCodes1.ID
				r.PromoCodes[promoCodesCount].UsageLimit = promoCodes1.UsageLimit
			}
		}
		r.RequiresPromoCode = types.BoolPointerValue(resp.RequiresPromoCode)
		r.Type = types.StringValue(string(resp.Type))
	}
}

func (r *CouponResourceModel) ToSharedCouponPatch() *shared.CouponPatch {
	additional := make(map[string]interface{})
	for additionalKey, additionalValue := range r.Additional {
		var additionalInst interface{}
		_ = json.Unmarshal([]byte(additionalValue.ValueString()), &additionalInst)
		additional[additionalKey] = additionalInst
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		var dollarRelation []shared.DollarRelation = []shared.DollarRelation{}
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string = []string{}
			for _, tagsItem := range dollarRelationItem.Tags {
				tags = append(tags, tagsItem.ValueString())
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	var manifest []string = []string{}
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string = []string{}
	for _, purposeItem := range r.Purpose {
		purpose = append(purpose, purposeItem.ValueString())
	}
	schema := new(shared.CouponPatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.CouponPatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string = []string{}
	for _, tagsItem1 := range r.Tags {
		tags1 = append(tags1, tagsItem1.ValueString())
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	cashbackPeriod := new(shared.CouponPatchCashbackPeriod)
	if !r.CashbackPeriod.IsUnknown() && !r.CashbackPeriod.IsNull() {
		*cashbackPeriod = shared.CouponPatchCashbackPeriod(r.CashbackPeriod.ValueString())
	} else {
		cashbackPeriod = nil
	}
	category := new(shared.CouponPatchCategory)
	if !r.Category.IsUnknown() && !r.Category.IsNull() {
		*category = shared.CouponPatchCategory(r.Category.ValueString())
	} else {
		category = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	fixedValue := new(float64)
	if !r.FixedValue.IsUnknown() && !r.FixedValue.IsNull() {
		*fixedValue, _ = r.FixedValue.ValueBigFloat().Float64()
	} else {
		fixedValue = nil
	}
	fixedValueCurrency := new(string)
	if !r.FixedValueCurrency.IsUnknown() && !r.FixedValueCurrency.IsNull() {
		*fixedValueCurrency = r.FixedValueCurrency.ValueString()
	} else {
		fixedValueCurrency = nil
	}
	fixedValueDecimal := new(string)
	if !r.FixedValueDecimal.IsUnknown() && !r.FixedValueDecimal.IsNull() {
		*fixedValueDecimal = r.FixedValueDecimal.ValueString()
	} else {
		fixedValueDecimal = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	percentageValue := new(string)
	if !r.PercentageValue.IsUnknown() && !r.PercentageValue.IsNull() {
		*percentageValue = r.PercentageValue.ValueString()
	} else {
		percentageValue = nil
	}
	var prices *shared.BaseRelation
	if r.Prices != nil {
		var dollarRelation1 []shared.DollarRelation = []shared.DollarRelation{}
		for _, dollarRelationItem1 := range r.Prices.DollarRelation {
			var tags2 []string = []string{}
			for _, tagsItem2 := range dollarRelationItem1.Tags {
				tags2 = append(tags2, tagsItem2.ValueString())
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.DollarRelation{
				Tags:     tags2,
				EntityID: entityId1,
			})
		}
		prices = &shared.BaseRelation{
			DollarRelation: dollarRelation1,
		}
	}
	var promoCodeUsage interface{}
	if !r.PromoCodeUsage.IsUnknown() && !r.PromoCodeUsage.IsNull() {
		_ = json.Unmarshal([]byte(r.PromoCodeUsage.ValueString()), &promoCodeUsage)
	}
	var promoCodes []shared.PromoCode = []shared.PromoCode{}
	for _, promoCodesItem := range r.PromoCodes {
		var code string
		code = promoCodesItem.Code.ValueString()

		hasUsageLimit := new(bool)
		if !promoCodesItem.HasUsageLimit.IsUnknown() && !promoCodesItem.HasUsageLimit.IsNull() {
			*hasUsageLimit = promoCodesItem.HasUsageLimit.ValueBool()
		} else {
			hasUsageLimit = nil
		}
		var id string
		id = promoCodesItem.ID.ValueString()

		usageLimit := new(float64)
		if !promoCodesItem.UsageLimit.IsUnknown() && !promoCodesItem.UsageLimit.IsNull() {
			*usageLimit, _ = promoCodesItem.UsageLimit.ValueBigFloat().Float64()
		} else {
			usageLimit = nil
		}
		promoCodes = append(promoCodes, shared.PromoCode{
			Code:          code,
			HasUsageLimit: hasUsageLimit,
			ID:            id,
			UsageLimit:    usageLimit,
		})
	}
	requiresPromoCode := new(bool)
	if !r.RequiresPromoCode.IsUnknown() && !r.RequiresPromoCode.IsNull() {
		*requiresPromoCode = r.RequiresPromoCode.ValueBool()
	} else {
		requiresPromoCode = nil
	}
	typeVar := new(shared.CouponPatchType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.CouponPatchType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.CouponPatch{
		Additional:         additional,
		Files:              files,
		Manifest:           manifest,
		Purpose:            purpose,
		Schema:             schema,
		Tags:               tags1,
		Active:             active,
		CashbackPeriod:     cashbackPeriod,
		Category:           category,
		Description:        description,
		FixedValue:         fixedValue,
		FixedValueCurrency: fixedValueCurrency,
		FixedValueDecimal:  fixedValueDecimal,
		Name:               name,
		PercentageValue:    percentageValue,
		Prices:             prices,
		PromoCodeUsage:     promoCodeUsage,
		PromoCodes:         promoCodes,
		RequiresPromoCode:  requiresPromoCode,
		Type:               typeVar,
	}
	return &out
}
