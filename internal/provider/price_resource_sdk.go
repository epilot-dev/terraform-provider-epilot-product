// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-product/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PriceResourceModel) RefreshFromSharedPrice(ctx context.Context, resp *shared.Price) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional == nil {
			r.Additional = jsontypes.NewNormalizedNull()
		} else {
			additionalResult, _ := json.Marshal(resp.Additional)
			r.Additional = jsontypes.NewNormalizedValue(string(additionalResult))
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Active = types.BoolValue(resp.Active)
		r.BillingDurationAmount = types.Float64PointerValue(resp.BillingDurationAmount)
		if resp.BillingDurationUnit != nil {
			r.BillingDurationUnit = types.StringValue(string(*resp.BillingDurationUnit))
		} else {
			r.BillingDurationUnit = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.IsCompositePrice = types.BoolPointerValue(resp.IsCompositePrice)
		r.IsTaxInclusive = types.BoolPointerValue(resp.IsTaxInclusive)
		r.LongDescription = types.StringPointerValue(resp.LongDescription)
		r.NoticeTimeAmount = types.Float64PointerValue(resp.NoticeTimeAmount)
		if resp.NoticeTimeUnit != nil {
			r.NoticeTimeUnit = types.StringValue(string(*resp.NoticeTimeUnit))
		} else {
			r.NoticeTimeUnit = types.StringNull()
		}
		if resp.PriceComponents == nil {
			r.PriceComponents = nil
		} else {
			r.PriceComponents = &tfTypes.PriceCreatePriceComponents{}
			r.PriceComponents.DollarRelation = []tfTypes.PriceComponentRelation{}

			for _, dollarRelationItem1 := range resp.PriceComponents.DollarRelation {
				var dollarRelation1 tfTypes.PriceComponentRelation

				dollarRelation1.Tags = make([]types.String, 0, len(dollarRelationItem1.Tags))
				for _, v := range dollarRelationItem1.Tags {
					dollarRelation1.Tags = append(dollarRelation1.Tags, types.StringValue(v))
				}
				dollarRelation1.EntityID = types.StringPointerValue(dollarRelationItem1.EntityID)

				r.PriceComponents.DollarRelation = append(r.PriceComponents.DollarRelation, dollarRelation1)
			}
		}
		if resp.PriceDisplayInJourneys != nil {
			r.PriceDisplayInJourneys = types.StringValue(string(*resp.PriceDisplayInJourneys))
		} else {
			r.PriceDisplayInJourneys = types.StringNull()
		}
		if resp.PricingModel != nil {
			r.PricingModel = types.StringValue(string(*resp.PricingModel))
		} else {
			r.PricingModel = types.StringNull()
		}
		r.RenewalDurationAmount = types.Float64PointerValue(resp.RenewalDurationAmount)
		if resp.RenewalDurationUnit != nil {
			r.RenewalDurationUnit = types.StringValue(string(*resp.RenewalDurationUnit))
		} else {
			r.RenewalDurationUnit = types.StringNull()
		}
		if resp.Tax == nil {
			r.Tax = jsontypes.NewNormalizedNull()
		} else {
			taxResult, _ := json.Marshal(resp.Tax)
			r.Tax = jsontypes.NewNormalizedValue(string(taxResult))
		}
		r.TerminationTimeAmount = types.Float64PointerValue(resp.TerminationTimeAmount)
		if resp.TerminationTimeUnit != nil {
			r.TerminationTimeUnit = types.StringValue(string(*resp.TerminationTimeUnit))
		} else {
			r.TerminationTimeUnit = types.StringNull()
		}
		r.Tiers = []tfTypes.PriceTier{}

		for _, tiersItem := range resp.Tiers {
			var tiers tfTypes.PriceTier

			if tiersItem.DisplayMode != nil {
				tiers.DisplayMode = types.StringValue(string(*tiersItem.DisplayMode))
			} else {
				tiers.DisplayMode = types.StringNull()
			}
			tiers.FlatFeeAmount = types.Float64PointerValue(tiersItem.FlatFeeAmount)
			tiers.FlatFeeAmountDecimal = types.StringPointerValue(tiersItem.FlatFeeAmountDecimal)
			tiers.UnitAmount = types.Float64PointerValue(tiersItem.UnitAmount)
			tiers.UnitAmountDecimal = types.StringPointerValue(tiersItem.UnitAmountDecimal)
			tiers.UpTo = types.Float64PointerValue(tiersItem.UpTo)

			r.Tiers = append(r.Tiers, tiers)
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
		r.Unit = types.StringPointerValue(resp.Unit)
		r.UnitAmount = types.Float64PointerValue(resp.UnitAmount)
		r.UnitAmountCurrency = types.StringPointerValue(resp.UnitAmountCurrency)
		r.UnitAmountDecimal = types.StringPointerValue(resp.UnitAmountDecimal)
		r.VariablePrice = types.BoolPointerValue(resp.VariablePrice)
	}

	return diags
}

func (r *PriceResourceModel) ToOperationsDeletePriceRequest(ctx context.Context) (*operations.DeletePriceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var priceID string
	priceID = r.ID.ValueString()

	out := operations.DeletePriceRequest{
		PriceID: priceID,
	}

	return &out, diags
}

func (r *PriceResourceModel) ToOperationsGetPriceRequest(ctx context.Context) (*operations.GetPriceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var priceID string
	priceID = r.ID.ValueString()

	out := operations.GetPriceRequest{
		PriceID: priceID,
	}

	return &out, diags
}

func (r *PriceResourceModel) ToOperationsPatchPriceRequest(ctx context.Context) (*operations.PatchPriceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	pricePatch, pricePatchDiags := r.ToSharedPricePatch(ctx)
	diags.Append(pricePatchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var priceID string
	priceID = r.ID.ValueString()

	out := operations.PatchPriceRequest{
		PricePatch: *pricePatch,
		PriceID:    priceID,
	}

	return &out, diags
}

func (r *PriceResourceModel) ToSharedPriceCreate(ctx context.Context) (*shared.PriceCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.PriceCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.PriceCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	var active bool
	active = r.Active.ValueBool()

	billingDurationAmount := new(float64)
	if !r.BillingDurationAmount.IsUnknown() && !r.BillingDurationAmount.IsNull() {
		*billingDurationAmount = r.BillingDurationAmount.ValueFloat64()
	} else {
		billingDurationAmount = nil
	}
	billingDurationUnit := new(shared.PriceCreateBillingDurationUnit)
	if !r.BillingDurationUnit.IsUnknown() && !r.BillingDurationUnit.IsNull() {
		*billingDurationUnit = shared.PriceCreateBillingDurationUnit(r.BillingDurationUnit.ValueString())
	} else {
		billingDurationUnit = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	isCompositePrice := new(bool)
	if !r.IsCompositePrice.IsUnknown() && !r.IsCompositePrice.IsNull() {
		*isCompositePrice = r.IsCompositePrice.ValueBool()
	} else {
		isCompositePrice = nil
	}
	isTaxInclusive := new(bool)
	if !r.IsTaxInclusive.IsUnknown() && !r.IsTaxInclusive.IsNull() {
		*isTaxInclusive = r.IsTaxInclusive.ValueBool()
	} else {
		isTaxInclusive = nil
	}
	longDescription := new(string)
	if !r.LongDescription.IsUnknown() && !r.LongDescription.IsNull() {
		*longDescription = r.LongDescription.ValueString()
	} else {
		longDescription = nil
	}
	noticeTimeAmount := new(float64)
	if !r.NoticeTimeAmount.IsUnknown() && !r.NoticeTimeAmount.IsNull() {
		*noticeTimeAmount = r.NoticeTimeAmount.ValueFloat64()
	} else {
		noticeTimeAmount = nil
	}
	noticeTimeUnit := new(shared.PriceCreateNoticeTimeUnit)
	if !r.NoticeTimeUnit.IsUnknown() && !r.NoticeTimeUnit.IsNull() {
		*noticeTimeUnit = shared.PriceCreateNoticeTimeUnit(r.NoticeTimeUnit.ValueString())
	} else {
		noticeTimeUnit = nil
	}
	var priceComponents *shared.PriceCreatePriceComponents
	if r.PriceComponents != nil {
		dollarRelation1 := make([]shared.PriceComponentRelation, 0, len(r.PriceComponents.DollarRelation))
		for _, dollarRelationItem1 := range r.PriceComponents.DollarRelation {
			tags2 := make([]string, 0, len(dollarRelationItem1.Tags))
			for _, tagsItem2 := range dollarRelationItem1.Tags {
				tags2 = append(tags2, tagsItem2.ValueString())
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.PriceComponentRelation{
				Tags:     tags2,
				EntityID: entityId1,
			})
		}
		priceComponents = &shared.PriceCreatePriceComponents{
			DollarRelation: dollarRelation1,
		}
	}
	priceDisplayInJourneys := new(shared.PriceCreatePriceDisplayInJourneys)
	if !r.PriceDisplayInJourneys.IsUnknown() && !r.PriceDisplayInJourneys.IsNull() {
		*priceDisplayInJourneys = shared.PriceCreatePriceDisplayInJourneys(r.PriceDisplayInJourneys.ValueString())
	} else {
		priceDisplayInJourneys = nil
	}
	pricingModel := new(shared.PriceCreatePricingModel)
	if !r.PricingModel.IsUnknown() && !r.PricingModel.IsNull() {
		*pricingModel = shared.PriceCreatePricingModel(r.PricingModel.ValueString())
	} else {
		pricingModel = nil
	}
	renewalDurationAmount := new(float64)
	if !r.RenewalDurationAmount.IsUnknown() && !r.RenewalDurationAmount.IsNull() {
		*renewalDurationAmount = r.RenewalDurationAmount.ValueFloat64()
	} else {
		renewalDurationAmount = nil
	}
	renewalDurationUnit := new(shared.PriceCreateRenewalDurationUnit)
	if !r.RenewalDurationUnit.IsUnknown() && !r.RenewalDurationUnit.IsNull() {
		*renewalDurationUnit = shared.PriceCreateRenewalDurationUnit(r.RenewalDurationUnit.ValueString())
	} else {
		renewalDurationUnit = nil
	}
	var tax interface{}
	if !r.Tax.IsUnknown() && !r.Tax.IsNull() {
		_ = json.Unmarshal([]byte(r.Tax.ValueString()), &tax)
	}
	terminationTimeAmount := new(float64)
	if !r.TerminationTimeAmount.IsUnknown() && !r.TerminationTimeAmount.IsNull() {
		*terminationTimeAmount = r.TerminationTimeAmount.ValueFloat64()
	} else {
		terminationTimeAmount = nil
	}
	terminationTimeUnit := new(shared.PriceCreateTerminationTimeUnit)
	if !r.TerminationTimeUnit.IsUnknown() && !r.TerminationTimeUnit.IsNull() {
		*terminationTimeUnit = shared.PriceCreateTerminationTimeUnit(r.TerminationTimeUnit.ValueString())
	} else {
		terminationTimeUnit = nil
	}
	tiers := make([]shared.PriceTier, 0, len(r.Tiers))
	for _, tiersItem := range r.Tiers {
		displayMode := new(shared.PriceTierDisplayMode)
		if !tiersItem.DisplayMode.IsUnknown() && !tiersItem.DisplayMode.IsNull() {
			*displayMode = shared.PriceTierDisplayMode(tiersItem.DisplayMode.ValueString())
		} else {
			displayMode = nil
		}
		flatFeeAmount := new(float64)
		if !tiersItem.FlatFeeAmount.IsUnknown() && !tiersItem.FlatFeeAmount.IsNull() {
			*flatFeeAmount = tiersItem.FlatFeeAmount.ValueFloat64()
		} else {
			flatFeeAmount = nil
		}
		flatFeeAmountDecimal := new(string)
		if !tiersItem.FlatFeeAmountDecimal.IsUnknown() && !tiersItem.FlatFeeAmountDecimal.IsNull() {
			*flatFeeAmountDecimal = tiersItem.FlatFeeAmountDecimal.ValueString()
		} else {
			flatFeeAmountDecimal = nil
		}
		unitAmount := new(float64)
		if !tiersItem.UnitAmount.IsUnknown() && !tiersItem.UnitAmount.IsNull() {
			*unitAmount = tiersItem.UnitAmount.ValueFloat64()
		} else {
			unitAmount = nil
		}
		unitAmountDecimal := new(string)
		if !tiersItem.UnitAmountDecimal.IsUnknown() && !tiersItem.UnitAmountDecimal.IsNull() {
			*unitAmountDecimal = tiersItem.UnitAmountDecimal.ValueString()
		} else {
			unitAmountDecimal = nil
		}
		upTo := new(float64)
		if !tiersItem.UpTo.IsUnknown() && !tiersItem.UpTo.IsNull() {
			*upTo = tiersItem.UpTo.ValueFloat64()
		} else {
			upTo = nil
		}
		tiers = append(tiers, shared.PriceTier{
			DisplayMode:          displayMode,
			FlatFeeAmount:        flatFeeAmount,
			FlatFeeAmountDecimal: flatFeeAmountDecimal,
			UnitAmount:           unitAmount,
			UnitAmountDecimal:    unitAmountDecimal,
			UpTo:                 upTo,
		})
	}
	typeVar := new(shared.PriceCreateType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.PriceCreateType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	unit := new(string)
	if !r.Unit.IsUnknown() && !r.Unit.IsNull() {
		*unit = r.Unit.ValueString()
	} else {
		unit = nil
	}
	unitAmount1 := new(float64)
	if !r.UnitAmount.IsUnknown() && !r.UnitAmount.IsNull() {
		*unitAmount1 = r.UnitAmount.ValueFloat64()
	} else {
		unitAmount1 = nil
	}
	unitAmountCurrency := new(string)
	if !r.UnitAmountCurrency.IsUnknown() && !r.UnitAmountCurrency.IsNull() {
		*unitAmountCurrency = r.UnitAmountCurrency.ValueString()
	} else {
		unitAmountCurrency = nil
	}
	unitAmountDecimal1 := new(string)
	if !r.UnitAmountDecimal.IsUnknown() && !r.UnitAmountDecimal.IsNull() {
		*unitAmountDecimal1 = r.UnitAmountDecimal.ValueString()
	} else {
		unitAmountDecimal1 = nil
	}
	variablePrice := new(bool)
	if !r.VariablePrice.IsUnknown() && !r.VariablePrice.IsNull() {
		*variablePrice = r.VariablePrice.ValueBool()
	} else {
		variablePrice = nil
	}
	out := shared.PriceCreate{
		Additional:             additional,
		Files:                  files,
		Manifest:               manifest,
		Purpose:                purpose,
		Schema:                 schema,
		Tags:                   tags1,
		Active:                 active,
		BillingDurationAmount:  billingDurationAmount,
		BillingDurationUnit:    billingDurationUnit,
		Description:            description,
		IsCompositePrice:       isCompositePrice,
		IsTaxInclusive:         isTaxInclusive,
		LongDescription:        longDescription,
		NoticeTimeAmount:       noticeTimeAmount,
		NoticeTimeUnit:         noticeTimeUnit,
		PriceComponents:        priceComponents,
		PriceDisplayInJourneys: priceDisplayInJourneys,
		PricingModel:           pricingModel,
		RenewalDurationAmount:  renewalDurationAmount,
		RenewalDurationUnit:    renewalDurationUnit,
		Tax:                    tax,
		TerminationTimeAmount:  terminationTimeAmount,
		TerminationTimeUnit:    terminationTimeUnit,
		Tiers:                  tiers,
		Type:                   typeVar,
		Unit:                   unit,
		UnitAmount:             unitAmount1,
		UnitAmountCurrency:     unitAmountCurrency,
		UnitAmountDecimal:      unitAmountDecimal1,
		VariablePrice:          variablePrice,
	}

	return &out, diags
}

func (r *PriceResourceModel) ToSharedPricePatch(ctx context.Context) (*shared.PricePatch, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additional interface{}
	if !r.Additional.IsUnknown() && !r.Additional.IsNull() {
		_ = json.Unmarshal([]byte(r.Additional.ValueString()), &additional)
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.PricePatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.PricePatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	active := new(bool)
	if !r.Active.IsUnknown() && !r.Active.IsNull() {
		*active = r.Active.ValueBool()
	} else {
		active = nil
	}
	billingDurationAmount := new(float64)
	if !r.BillingDurationAmount.IsUnknown() && !r.BillingDurationAmount.IsNull() {
		*billingDurationAmount = r.BillingDurationAmount.ValueFloat64()
	} else {
		billingDurationAmount = nil
	}
	billingDurationUnit := new(shared.PricePatchBillingDurationUnit)
	if !r.BillingDurationUnit.IsUnknown() && !r.BillingDurationUnit.IsNull() {
		*billingDurationUnit = shared.PricePatchBillingDurationUnit(r.BillingDurationUnit.ValueString())
	} else {
		billingDurationUnit = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	isCompositePrice := new(bool)
	if !r.IsCompositePrice.IsUnknown() && !r.IsCompositePrice.IsNull() {
		*isCompositePrice = r.IsCompositePrice.ValueBool()
	} else {
		isCompositePrice = nil
	}
	isTaxInclusive := new(bool)
	if !r.IsTaxInclusive.IsUnknown() && !r.IsTaxInclusive.IsNull() {
		*isTaxInclusive = r.IsTaxInclusive.ValueBool()
	} else {
		isTaxInclusive = nil
	}
	longDescription := new(string)
	if !r.LongDescription.IsUnknown() && !r.LongDescription.IsNull() {
		*longDescription = r.LongDescription.ValueString()
	} else {
		longDescription = nil
	}
	noticeTimeAmount := new(float64)
	if !r.NoticeTimeAmount.IsUnknown() && !r.NoticeTimeAmount.IsNull() {
		*noticeTimeAmount = r.NoticeTimeAmount.ValueFloat64()
	} else {
		noticeTimeAmount = nil
	}
	noticeTimeUnit := new(shared.PricePatchNoticeTimeUnit)
	if !r.NoticeTimeUnit.IsUnknown() && !r.NoticeTimeUnit.IsNull() {
		*noticeTimeUnit = shared.PricePatchNoticeTimeUnit(r.NoticeTimeUnit.ValueString())
	} else {
		noticeTimeUnit = nil
	}
	var priceComponents *shared.PricePatchPriceComponents
	if r.PriceComponents != nil {
		dollarRelation1 := make([]shared.PriceComponentRelation, 0, len(r.PriceComponents.DollarRelation))
		for _, dollarRelationItem1 := range r.PriceComponents.DollarRelation {
			tags2 := make([]string, 0, len(dollarRelationItem1.Tags))
			for _, tagsItem2 := range dollarRelationItem1.Tags {
				tags2 = append(tags2, tagsItem2.ValueString())
			}
			entityId1 := new(string)
			if !dollarRelationItem1.EntityID.IsUnknown() && !dollarRelationItem1.EntityID.IsNull() {
				*entityId1 = dollarRelationItem1.EntityID.ValueString()
			} else {
				entityId1 = nil
			}
			dollarRelation1 = append(dollarRelation1, shared.PriceComponentRelation{
				Tags:     tags2,
				EntityID: entityId1,
			})
		}
		priceComponents = &shared.PricePatchPriceComponents{
			DollarRelation: dollarRelation1,
		}
	}
	priceDisplayInJourneys := new(shared.PricePatchPriceDisplayInJourneys)
	if !r.PriceDisplayInJourneys.IsUnknown() && !r.PriceDisplayInJourneys.IsNull() {
		*priceDisplayInJourneys = shared.PricePatchPriceDisplayInJourneys(r.PriceDisplayInJourneys.ValueString())
	} else {
		priceDisplayInJourneys = nil
	}
	pricingModel := new(shared.PricePatchPricingModel)
	if !r.PricingModel.IsUnknown() && !r.PricingModel.IsNull() {
		*pricingModel = shared.PricePatchPricingModel(r.PricingModel.ValueString())
	} else {
		pricingModel = nil
	}
	renewalDurationAmount := new(float64)
	if !r.RenewalDurationAmount.IsUnknown() && !r.RenewalDurationAmount.IsNull() {
		*renewalDurationAmount = r.RenewalDurationAmount.ValueFloat64()
	} else {
		renewalDurationAmount = nil
	}
	renewalDurationUnit := new(shared.PricePatchRenewalDurationUnit)
	if !r.RenewalDurationUnit.IsUnknown() && !r.RenewalDurationUnit.IsNull() {
		*renewalDurationUnit = shared.PricePatchRenewalDurationUnit(r.RenewalDurationUnit.ValueString())
	} else {
		renewalDurationUnit = nil
	}
	var tax interface{}
	if !r.Tax.IsUnknown() && !r.Tax.IsNull() {
		_ = json.Unmarshal([]byte(r.Tax.ValueString()), &tax)
	}
	terminationTimeAmount := new(float64)
	if !r.TerminationTimeAmount.IsUnknown() && !r.TerminationTimeAmount.IsNull() {
		*terminationTimeAmount = r.TerminationTimeAmount.ValueFloat64()
	} else {
		terminationTimeAmount = nil
	}
	terminationTimeUnit := new(shared.PricePatchTerminationTimeUnit)
	if !r.TerminationTimeUnit.IsUnknown() && !r.TerminationTimeUnit.IsNull() {
		*terminationTimeUnit = shared.PricePatchTerminationTimeUnit(r.TerminationTimeUnit.ValueString())
	} else {
		terminationTimeUnit = nil
	}
	tiers := make([]shared.PriceTier, 0, len(r.Tiers))
	for _, tiersItem := range r.Tiers {
		displayMode := new(shared.PriceTierDisplayMode)
		if !tiersItem.DisplayMode.IsUnknown() && !tiersItem.DisplayMode.IsNull() {
			*displayMode = shared.PriceTierDisplayMode(tiersItem.DisplayMode.ValueString())
		} else {
			displayMode = nil
		}
		flatFeeAmount := new(float64)
		if !tiersItem.FlatFeeAmount.IsUnknown() && !tiersItem.FlatFeeAmount.IsNull() {
			*flatFeeAmount = tiersItem.FlatFeeAmount.ValueFloat64()
		} else {
			flatFeeAmount = nil
		}
		flatFeeAmountDecimal := new(string)
		if !tiersItem.FlatFeeAmountDecimal.IsUnknown() && !tiersItem.FlatFeeAmountDecimal.IsNull() {
			*flatFeeAmountDecimal = tiersItem.FlatFeeAmountDecimal.ValueString()
		} else {
			flatFeeAmountDecimal = nil
		}
		unitAmount := new(float64)
		if !tiersItem.UnitAmount.IsUnknown() && !tiersItem.UnitAmount.IsNull() {
			*unitAmount = tiersItem.UnitAmount.ValueFloat64()
		} else {
			unitAmount = nil
		}
		unitAmountDecimal := new(string)
		if !tiersItem.UnitAmountDecimal.IsUnknown() && !tiersItem.UnitAmountDecimal.IsNull() {
			*unitAmountDecimal = tiersItem.UnitAmountDecimal.ValueString()
		} else {
			unitAmountDecimal = nil
		}
		upTo := new(float64)
		if !tiersItem.UpTo.IsUnknown() && !tiersItem.UpTo.IsNull() {
			*upTo = tiersItem.UpTo.ValueFloat64()
		} else {
			upTo = nil
		}
		tiers = append(tiers, shared.PriceTier{
			DisplayMode:          displayMode,
			FlatFeeAmount:        flatFeeAmount,
			FlatFeeAmountDecimal: flatFeeAmountDecimal,
			UnitAmount:           unitAmount,
			UnitAmountDecimal:    unitAmountDecimal,
			UpTo:                 upTo,
		})
	}
	typeVar := new(shared.PricePatchType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.PricePatchType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	unit := new(string)
	if !r.Unit.IsUnknown() && !r.Unit.IsNull() {
		*unit = r.Unit.ValueString()
	} else {
		unit = nil
	}
	unitAmount1 := new(float64)
	if !r.UnitAmount.IsUnknown() && !r.UnitAmount.IsNull() {
		*unitAmount1 = r.UnitAmount.ValueFloat64()
	} else {
		unitAmount1 = nil
	}
	unitAmountCurrency := new(string)
	if !r.UnitAmountCurrency.IsUnknown() && !r.UnitAmountCurrency.IsNull() {
		*unitAmountCurrency = r.UnitAmountCurrency.ValueString()
	} else {
		unitAmountCurrency = nil
	}
	unitAmountDecimal1 := new(string)
	if !r.UnitAmountDecimal.IsUnknown() && !r.UnitAmountDecimal.IsNull() {
		*unitAmountDecimal1 = r.UnitAmountDecimal.ValueString()
	} else {
		unitAmountDecimal1 = nil
	}
	variablePrice := new(bool)
	if !r.VariablePrice.IsUnknown() && !r.VariablePrice.IsNull() {
		*variablePrice = r.VariablePrice.ValueBool()
	} else {
		variablePrice = nil
	}
	out := shared.PricePatch{
		Additional:             additional,
		Files:                  files,
		Manifest:               manifest,
		Purpose:                purpose,
		Schema:                 schema,
		Tags:                   tags1,
		Active:                 active,
		BillingDurationAmount:  billingDurationAmount,
		BillingDurationUnit:    billingDurationUnit,
		Description:            description,
		IsCompositePrice:       isCompositePrice,
		IsTaxInclusive:         isTaxInclusive,
		LongDescription:        longDescription,
		NoticeTimeAmount:       noticeTimeAmount,
		NoticeTimeUnit:         noticeTimeUnit,
		PriceComponents:        priceComponents,
		PriceDisplayInJourneys: priceDisplayInJourneys,
		PricingModel:           pricingModel,
		RenewalDurationAmount:  renewalDurationAmount,
		RenewalDurationUnit:    renewalDurationUnit,
		Tax:                    tax,
		TerminationTimeAmount:  terminationTimeAmount,
		TerminationTimeUnit:    terminationTimeUnit,
		Tiers:                  tiers,
		Type:                   typeVar,
		Unit:                   unit,
		UnitAmount:             unitAmount1,
		UnitAmountCurrency:     unitAmountCurrency,
		UnitAmountDecimal:      unitAmountDecimal1,
		VariablePrice:          variablePrice,
	}

	return &out, diags
}
