// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"net/http"
)

var _ provider.Provider = (*EpilotProductProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*EpilotProductProvider)(nil)

type EpilotProductProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// EpilotProductProviderModel describes the provider data model.
type EpilotProductProviderModel struct {
	EitherAuth types.String `tfsdk:"either_auth"`
	EpilotAuth types.String `tfsdk:"epilot_auth"`
	PortalAuth types.String `tfsdk:"portal_auth"`
	ServerURL  types.String `tfsdk:"server_url"`
}

func (p *EpilotProductProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "epilot-product"
	resp.Version = p.version
}

func (p *EpilotProductProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"either_auth": schema.StringAttribute{
				MarkdownDescription: `Portal or Epilot Bearer Token.`,
				Optional:            true,
				Sensitive:           true,
			},
			"epilot_auth": schema.StringAttribute{
				MarkdownDescription: `Epilot Bearer Token.`,
				Optional:            true,
				Sensitive:           true,
			},
			"portal_auth": schema.StringAttribute{
				MarkdownDescription: `Portal Cognito Token.`,
				Optional:            true,
				Sensitive:           true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://product.sls.epilot.io)`,
				Optional:    true,
			},
		},
		MarkdownDescription: `Portal API: Backend for epilot portals - End Customer Portal & Installer Portal`,
	}
}

func (p *EpilotProductProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data EpilotProductProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serverUrl := data.ServerURL.ValueString()

	if serverUrl == "" {
		serverUrl = "https://product.sls.epilot.io"
	}

	security := shared.Security{}

	if !data.EitherAuth.IsUnknown() {
		security.EitherAuth = data.EitherAuth.ValueStringPointer()
	}

	if !data.EpilotAuth.IsUnknown() {
		security.EpilotAuth = data.EpilotAuth.ValueStringPointer()
	}

	if !data.PortalAuth.IsUnknown() {
		security.PortalAuth = data.PortalAuth.ValueStringPointer()
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(serverUrl),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}

	client := sdk.New(opts...)
	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *EpilotProductProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{}
}

func (p *EpilotProductProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}

func (p *EpilotProductProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &EpilotProductProvider{
			version: version,
		}
	}
}
