// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

type UpdateContactECPResponseBodyType string

const (
	UpdateContactECPResponseBodyTypeErrorResp           UpdateContactECPResponseBodyType = "ErrorResp"
	UpdateContactECPResponseBodyTypeFailedRuleErrorResp UpdateContactECPResponseBodyType = "FailedRuleErrorResp"
)

// UpdateContactECPResponseBody - The user is not allowed to access this resource
type UpdateContactECPResponseBody struct {
	ErrorResp           *shared.ErrorResp           `queryParam:"inline" name:"responseBody"`
	FailedRuleErrorResp *shared.FailedRuleErrorResp `queryParam:"inline" name:"responseBody"`

	Type UpdateContactECPResponseBodyType
}

func CreateUpdateContactECPResponseBodyErrorResp(errorResp shared.ErrorResp) UpdateContactECPResponseBody {
	typ := UpdateContactECPResponseBodyTypeErrorResp

	return UpdateContactECPResponseBody{
		ErrorResp: &errorResp,
		Type:      typ,
	}
}

func CreateUpdateContactECPResponseBodyFailedRuleErrorResp(failedRuleErrorResp shared.FailedRuleErrorResp) UpdateContactECPResponseBody {
	typ := UpdateContactECPResponseBodyTypeFailedRuleErrorResp

	return UpdateContactECPResponseBody{
		FailedRuleErrorResp: &failedRuleErrorResp,
		Type:                typ,
	}
}

func (u *UpdateContactECPResponseBody) UnmarshalJSON(data []byte) error {

	var errorResp shared.ErrorResp = shared.ErrorResp{}
	if err := utils.UnmarshalJSON(data, &errorResp, "", true, nil); err == nil {
		u.ErrorResp = &errorResp
		u.Type = UpdateContactECPResponseBodyTypeErrorResp
		return nil
	}

	var failedRuleErrorResp shared.FailedRuleErrorResp = shared.FailedRuleErrorResp{}
	if err := utils.UnmarshalJSON(data, &failedRuleErrorResp, "", true, nil); err == nil {
		u.FailedRuleErrorResp = &failedRuleErrorResp
		u.Type = UpdateContactECPResponseBodyTypeFailedRuleErrorResp
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateContactECPResponseBody", string(data))
}

func (u UpdateContactECPResponseBody) MarshalJSON() ([]byte, error) {
	if u.ErrorResp != nil {
		return utils.MarshalJSON(u.ErrorResp, "", true)
	}

	if u.FailedRuleErrorResp != nil {
		return utils.MarshalJSON(u.FailedRuleErrorResp, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateContactECPResponseBody: all fields are null")
}

// UpdateContactResponseBody - Updated the contact details successfully.
type UpdateContactResponseBody struct {
	// The mapped contact of the portal user
	Data *shared.Contact `json:"data,omitempty"`
}

func (o *UpdateContactResponseBody) GetData() *shared.Contact {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdateContactResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Updated the contact details successfully.
	Object *UpdateContactResponseBody
	// The user is not allowed to access this resource
	OneOf *UpdateContactECPResponseBody
}

func (o *UpdateContactResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateContactResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *UpdateContactResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateContactResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateContactResponse) GetObject() *UpdateContactResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *UpdateContactResponse) GetOneOf() *UpdateContactECPResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
