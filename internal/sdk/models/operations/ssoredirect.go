// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

type SsoRedirectRequestBody struct {
	// The code received from the external SSO provider
	Code *string `multipartForm:"name=code"`
	// The state received from the external SSO provider
	State *string `multipartForm:"name=state"`
}

func (o *SsoRedirectRequestBody) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *SsoRedirectRequestBody) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

type SsoRedirectRequest struct {
	RequestBody SsoRedirectRequestBody `request:"mediaType=multipart/form-data"`
	// The URI to redirect to after the SSO login
	WebURI string `queryParam:"style=form,explode=true,name=web_uri"`
}

func (o *SsoRedirectRequest) GetRequestBody() SsoRedirectRequestBody {
	if o == nil {
		return SsoRedirectRequestBody{}
	}
	return o.RequestBody
}

func (o *SsoRedirectRequest) GetWebURI() string {
	if o == nil {
		return ""
	}
	return o.WebURI
}

type SsoRedirectResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// The request could not be validated
	ErrorResp *shared.ErrorResp
	Headers   map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *SsoRedirectResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SsoRedirectResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *SsoRedirectResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}

func (o *SsoRedirectResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SsoRedirectResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
