// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

type ContextEntities struct {
	// Entity id
	EntityID string `queryParam:"name=entity_id"`
	// Entity schema
	EntitySchema string `queryParam:"name=entity_schema"`
}

func (o *ContextEntities) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *ContextEntities) GetEntitySchema() string {
	if o == nil {
		return ""
	}
	return o.EntitySchema
}

type GetResolvedSeamlessLinkRequest struct {
	// ID of the App if the Portal Extension was installed from an App
	AppID *string `queryParam:"style=form,explode=true,name=app_id"`
	// If the request is in a context of certain entities (i.e. the user in in a context of a specific contract), links can be customized for that. Portal User and Contact entities are automatically part of the context.
	ContextEntities []ContextEntities `queryParam:"style=form,explode=true,name=context_entities"`
	// ID of the Portal Extension
	ExtensionID string `queryParam:"style=form,explode=true,name=extension_id"`
	// ID of the Seamless Link
	LinkID string `queryParam:"style=form,explode=true,name=link_id"`
}

func (o *GetResolvedSeamlessLinkRequest) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *GetResolvedSeamlessLinkRequest) GetContextEntities() []ContextEntities {
	if o == nil {
		return nil
	}
	return o.ContextEntities
}

func (o *GetResolvedSeamlessLinkRequest) GetExtensionID() string {
	if o == nil {
		return ""
	}
	return o.ExtensionID
}

func (o *GetResolvedSeamlessLinkRequest) GetLinkID() string {
	if o == nil {
		return ""
	}
	return o.LinkID
}

// GetResolvedSeamlessLinkResponseBody - Resolved portal seamless link retrieved successfully.
type GetResolvedSeamlessLinkResponseBody struct {
	// Resolved link
	Link *string `json:"link,omitempty"`
}

func (o *GetResolvedSeamlessLinkResponseBody) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

type GetResolvedSeamlessLinkResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Resolved portal seamless link retrieved successfully.
	Object *GetResolvedSeamlessLinkResponseBody
}

func (o *GetResolvedSeamlessLinkResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetResolvedSeamlessLinkResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *GetResolvedSeamlessLinkResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetResolvedSeamlessLinkResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetResolvedSeamlessLinkResponse) GetObject() *GetResolvedSeamlessLinkResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
