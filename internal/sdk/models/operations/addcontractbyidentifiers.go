// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

// Reason why the contract is not assignable. If the reason is "MULTIPLE", the contract is not assignable because multiple contracts were found and the business logic does not allow it.
type Reason string

const (
	ReasonDraft    Reason = "DRAFT"
	ReasonMultiple Reason = "MULTIPLE"
)

func (e Reason) ToPointer() *Reason {
	return &e
}
func (e *Reason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "MULTIPLE":
		*e = Reason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Reason: %v", v)
	}
}

// AddContractByIdentifiersECPResponseBody - Contract was found but is not assignable in its current state.
type AddContractByIdentifiersECPResponseBody struct {
	// Error message
	Message *string `json:"message,omitempty"`
	// Reason why the contract is not assignable. If the reason is "MULTIPLE", the contract is not assignable because multiple contracts were found and the business logic does not allow it.
	Reason Reason `json:"reason"`
}

func (o *AddContractByIdentifiersECPResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *AddContractByIdentifiersECPResponseBody) GetReason() Reason {
	if o == nil {
		return Reason("")
	}
	return o.Reason
}

// AddContractByIdentifiersResponseBody - Contract(s) assigned successfully.
type AddContractByIdentifiersResponseBody struct {
	Data []shared.EntityItem `json:"data,omitempty"`
	Hits float64             `json:"hits"`
}

func (o *AddContractByIdentifiersResponseBody) GetData() []shared.EntityItem {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *AddContractByIdentifiersResponseBody) GetHits() float64 {
	if o == nil {
		return 0.0
	}
	return o.Hits
}

type AddContractByIdentifiersResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// The request could not be validated
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Contract(s) assigned successfully.
	Object *AddContractByIdentifiersResponseBody
	// Contract was found but is not assignable in its current state.
	Object1 *AddContractByIdentifiersECPResponseBody
}

func (o *AddContractByIdentifiersResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *AddContractByIdentifiersResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *AddContractByIdentifiersResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *AddContractByIdentifiersResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *AddContractByIdentifiersResponse) GetObject() *AddContractByIdentifiersResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *AddContractByIdentifiersResponse) GetObject1() *AddContractByIdentifiersECPResponseBody {
	if o == nil {
		return nil
	}
	return o.Object1
}
