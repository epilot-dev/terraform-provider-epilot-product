// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

type UpdateContractRequest struct {
	// Requested contract body to update
	RequestBody map[string]any `request:"mediaType=application/json"`
	// The ID of the contract
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *UpdateContractRequest) GetRequestBody() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.RequestBody
}

func (o *UpdateContractRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateContractECPResponseBodyType string

const (
	UpdateContractECPResponseBodyTypeErrorResp           UpdateContractECPResponseBodyType = "ErrorResp"
	UpdateContractECPResponseBodyTypeFailedRuleErrorResp UpdateContractECPResponseBodyType = "FailedRuleErrorResp"
)

// UpdateContractECPResponseBody - The user is not allowed to access this resource
type UpdateContractECPResponseBody struct {
	ErrorResp           *shared.ErrorResp           `queryParam:"inline" name:"responseBody"`
	FailedRuleErrorResp *shared.FailedRuleErrorResp `queryParam:"inline" name:"responseBody"`

	Type UpdateContractECPResponseBodyType
}

func CreateUpdateContractECPResponseBodyErrorResp(errorResp shared.ErrorResp) UpdateContractECPResponseBody {
	typ := UpdateContractECPResponseBodyTypeErrorResp

	return UpdateContractECPResponseBody{
		ErrorResp: &errorResp,
		Type:      typ,
	}
}

func CreateUpdateContractECPResponseBodyFailedRuleErrorResp(failedRuleErrorResp shared.FailedRuleErrorResp) UpdateContractECPResponseBody {
	typ := UpdateContractECPResponseBodyTypeFailedRuleErrorResp

	return UpdateContractECPResponseBody{
		FailedRuleErrorResp: &failedRuleErrorResp,
		Type:                typ,
	}
}

func (u *UpdateContractECPResponseBody) UnmarshalJSON(data []byte) error {

	var errorResp shared.ErrorResp = shared.ErrorResp{}
	if err := utils.UnmarshalJSON(data, &errorResp, "", true, nil); err == nil {
		u.ErrorResp = &errorResp
		u.Type = UpdateContractECPResponseBodyTypeErrorResp
		return nil
	}

	var failedRuleErrorResp shared.FailedRuleErrorResp = shared.FailedRuleErrorResp{}
	if err := utils.UnmarshalJSON(data, &failedRuleErrorResp, "", true, nil); err == nil {
		u.FailedRuleErrorResp = &failedRuleErrorResp
		u.Type = UpdateContractECPResponseBodyTypeFailedRuleErrorResp
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateContractECPResponseBody", string(data))
}

func (u UpdateContractECPResponseBody) MarshalJSON() ([]byte, error) {
	if u.ErrorResp != nil {
		return utils.MarshalJSON(u.ErrorResp, "", true)
	}

	if u.FailedRuleErrorResp != nil {
		return utils.MarshalJSON(u.FailedRuleErrorResp, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateContractECPResponseBody: all fields are null")
}

// UpdateContractResponseBody - Updated the contract successfully.
type UpdateContractResponseBody struct {
	// The contract entity
	Data *shared.Contract `json:"data,omitempty"`
}

func (o *UpdateContractResponseBody) GetData() *shared.Contract {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdateContractResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Updated the contract successfully.
	Object *UpdateContractResponseBody
	// The user is not allowed to access this resource
	OneOf *UpdateContractECPResponseBody
}

func (o *UpdateContractResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateContractResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *UpdateContractResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateContractResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateContractResponse) GetObject() *UpdateContractResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *UpdateContractResponse) GetOneOf() *UpdateContractECPResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
