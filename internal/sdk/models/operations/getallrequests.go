// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
	"time"
)

type GetAllRequestsRequest struct {
	From *float64 `default:"0" queryParam:"style=form,explode=true,name=from"`
	Size *float64 `default:"200" queryParam:"style=form,explode=true,name=size"`
}

func (g GetAllRequestsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAllRequestsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetAllRequestsRequest) GetFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetAllRequestsRequest) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

type OrderSchema string

const (
	OrderSchemaOrder OrderSchema = "order"
)

func (e OrderSchema) ToPointer() *OrderSchema {
	return &e
}
func (e *OrderSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "order":
		*e = OrderSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderSchema: %v", v)
	}
}

// OrderSchemas - The order entity
type OrderSchemas struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Creation timestamp of the entity
	CreatedAt time.Time `json:"_created_at"`
	// Entity ID
	ID string `json:"_id"`
	// Organization ID the entity belongs to
	Org    string      `json:"_org"`
	Schema OrderSchema `json:"_schema"`
	// Array of entity tags
	Tags []string `json:"_tags,omitempty"`
	// Title of the entity
	Title string `json:"_title"`
	// Last update timestamp of the entity
	UpdatedAt      time.Time              `json:"_updated_at"`
	JourneyActions *shared.JourneyActions `json:"journey_actions,omitempty"`
}

func (o OrderSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"_created_at", "_id", "_org", "_schema", "_title", "_updated_at"}); err != nil {
		return err
	}
	return nil
}

func (o *OrderSchemas) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *OrderSchemas) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *OrderSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OrderSchemas) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *OrderSchemas) GetSchema() OrderSchema {
	if o == nil {
		return OrderSchema("")
	}
	return o.Schema
}

func (o *OrderSchemas) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *OrderSchemas) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *OrderSchemas) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *OrderSchemas) GetJourneyActions() *shared.JourneyActions {
	if o == nil {
		return nil
	}
	return o.JourneyActions
}

type Schema string

const (
	SchemaOpportunity Schema = "opportunity"
)

func (e Schema) ToPointer() *Schema {
	return &e
}
func (e *Schema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "opportunity":
		*e = Schema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schema: %v", v)
	}
}

// Schemas - The opportunity entity
type Schemas struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Creation timestamp of the entity
	CreatedAt time.Time `json:"_created_at"`
	// Entity ID
	ID string `json:"_id"`
	// Organization ID the entity belongs to
	Org    string `json:"_org"`
	Schema Schema `json:"_schema"`
	// Array of entity tags
	Tags []string `json:"_tags,omitempty"`
	// Title of the entity
	Title string `json:"_title"`
	// Last update timestamp of the entity
	UpdatedAt      time.Time              `json:"_updated_at"`
	JourneyActions *shared.JourneyActions `json:"journey_actions,omitempty"`
}

func (s Schemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Schemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"_created_at", "_id", "_org", "_schema", "_title", "_updated_at"}); err != nil {
		return err
	}
	return nil
}

func (o *Schemas) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *Schemas) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Schemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Schemas) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Schemas) GetSchema() Schema {
	if o == nil {
		return Schema("")
	}
	return o.Schema
}

func (o *Schemas) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Schemas) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Schemas) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Schemas) GetJourneyActions() *shared.JourneyActions {
	if o == nil {
		return nil
	}
	return o.JourneyActions
}

type ResultsType string

const (
	ResultsTypeSchemas      ResultsType = "Schemas"
	ResultsTypeOrderSchemas ResultsType = "Order_Schemas"
)

type Results struct {
	Schemas      *Schemas      `queryParam:"inline" name:"results"`
	OrderSchemas *OrderSchemas `queryParam:"inline" name:"results"`

	Type ResultsType
}

func CreateResultsSchemas(schemas Schemas) Results {
	typ := ResultsTypeSchemas

	return Results{
		Schemas: &schemas,
		Type:    typ,
	}
}

func CreateResultsOrderSchemas(orderSchemas OrderSchemas) Results {
	typ := ResultsTypeOrderSchemas

	return Results{
		OrderSchemas: &orderSchemas,
		Type:         typ,
	}
}

func (u *Results) UnmarshalJSON(data []byte) error {

	var schemas Schemas = Schemas{}
	if err := utils.UnmarshalJSON(data, &schemas, "", true, nil); err == nil {
		u.Schemas = &schemas
		u.Type = ResultsTypeSchemas
		return nil
	}

	var orderSchemas OrderSchemas = OrderSchemas{}
	if err := utils.UnmarshalJSON(data, &orderSchemas, "", true, nil); err == nil {
		u.OrderSchemas = &orderSchemas
		u.Type = ResultsTypeOrderSchemas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Results", string(data))
}

func (u Results) MarshalJSON() ([]byte, error) {
	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.OrderSchemas != nil {
		return utils.MarshalJSON(u.OrderSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type Results: all fields are null")
}

// GetAllRequestsResponseBody - The opportunities is retrieved successfully for the portal user.
type GetAllRequestsResponseBody struct {
	// Total number of hits
	Hits    *float64  `json:"hits,omitempty"`
	Results []Results `json:"results,omitempty"`
}

func (o *GetAllRequestsResponseBody) GetHits() *float64 {
	if o == nil {
		return nil
	}
	return o.Hits
}

func (o *GetAllRequestsResponseBody) GetResults() []Results {
	if o == nil {
		return nil
	}
	return o.Results
}

type GetAllRequestsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The opportunities is retrieved successfully for the portal user.
	Object *GetAllRequestsResponseBody
}

func (o *GetAllRequestsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAllRequestsResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *GetAllRequestsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAllRequestsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetAllRequestsResponse) GetObject() *GetAllRequestsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
