// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
	"time"
)

// Interval between consumption data points (e.g., PT15M for 15 minutes, PT1H for hourly). Not all intervals have to be supported.
type Interval string

const (
	IntervalPt15M Interval = "PT15M"
	IntervalPt1H  Interval = "PT1H"
	IntervalP1D   Interval = "P1D"
	IntervalP1M   Interval = "P1M"
)

func (e Interval) ToPointer() *Interval {
	return &e
}
func (e *Interval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PT15M":
		fallthrough
	case "PT1H":
		fallthrough
	case "P1D":
		fallthrough
	case "P1M":
		*e = Interval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Interval: %v", v)
	}
}

type GetConsumptionRequest struct {
	// Extension ID for consumption data.
	ExtensionID string `queryParam:"style=form,explode=true,name=extensionId"`
	// Start date for consumption data (ISO 8601 format).
	From time.Time `queryParam:"style=form,explode=true,name=from"`
	// Hook ID for consumption data.
	HookID string `queryParam:"style=form,explode=true,name=hookId"`
	// Interval between consumption data points (e.g., PT15M for 15 minutes, PT1H for hourly). Not all intervals have to be supported.
	Interval Interval `queryParam:"style=form,explode=true,name=interval"`
	// Meter ID for consumption data.
	MeterID string `queryParam:"style=form,explode=true,name=meter_id"`
	// End date for consumption data (ISO 8601 format).
	To time.Time `queryParam:"style=form,explode=true,name=to"`
}

func (g GetConsumptionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetConsumptionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"extensionId", "from", "hookId", "interval", "meter_id", "to"}); err != nil {
		return err
	}
	return nil
}

func (o *GetConsumptionRequest) GetExtensionID() string {
	if o == nil {
		return ""
	}
	return o.ExtensionID
}

func (o *GetConsumptionRequest) GetFrom() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.From
}

func (o *GetConsumptionRequest) GetHookID() string {
	if o == nil {
		return ""
	}
	return o.HookID
}

func (o *GetConsumptionRequest) GetInterval() Interval {
	if o == nil {
		return Interval("")
	}
	return o.Interval
}

func (o *GetConsumptionRequest) GetMeterID() string {
	if o == nil {
		return ""
	}
	return o.MeterID
}

func (o *GetConsumptionRequest) GetTo() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.To
}

type Consumptions struct {
	// ISO 8601 timestamp of the consumption record.
	Timestamp time.Time `json:"timestamp"`
	// Optional type of the consumption, such as 'nt' (night time) or 'ht' (high time). Can be any string.
	Type *string `json:"type,omitempty"`
	// The consumption value.
	Value float64 `json:"value"`
}

func (c Consumptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Consumptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"timestamp", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *Consumptions) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Consumptions) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Consumptions) GetValue() float64 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

// GetConsumptionResponseBody - Consumption data returned successfully.
type GetConsumptionResponseBody struct {
	Consumptions []Consumptions `json:"consumptions,omitempty"`
}

func (o *GetConsumptionResponseBody) GetConsumptions() []Consumptions {
	if o == nil {
		return nil
	}
	return o.Consumptions
}

type GetConsumptionResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Consumption data returned successfully.
	Object *GetConsumptionResponseBody
}

func (o *GetConsumptionResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetConsumptionResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *GetConsumptionResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetConsumptionResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetConsumptionResponse) GetObject() *GetConsumptionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
