// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

type SearchPortalUserEntitiesResponseBodyType string

const (
	SearchPortalUserEntitiesResponseBodyTypeEntityResponseWithHits        SearchPortalUserEntitiesResponseBodyType = "EntityResponseWithHits"
	SearchPortalUserEntitiesResponseBodyTypeEntityResponseGroupedWithHits SearchPortalUserEntitiesResponseBodyType = "EntityResponseGroupedWithHits"
)

// SearchPortalUserEntitiesResponseBody - The entities have been retrieved successfully for the portal user.
type SearchPortalUserEntitiesResponseBody struct {
	EntityResponseWithHits        *shared.EntityResponseWithHits        `queryParam:"inline" name:"responseBody"`
	EntityResponseGroupedWithHits *shared.EntityResponseGroupedWithHits `queryParam:"inline" name:"responseBody"`

	Type SearchPortalUserEntitiesResponseBodyType
}

func CreateSearchPortalUserEntitiesResponseBodyEntityResponseWithHits(entityResponseWithHits shared.EntityResponseWithHits) SearchPortalUserEntitiesResponseBody {
	typ := SearchPortalUserEntitiesResponseBodyTypeEntityResponseWithHits

	return SearchPortalUserEntitiesResponseBody{
		EntityResponseWithHits: &entityResponseWithHits,
		Type:                   typ,
	}
}

func CreateSearchPortalUserEntitiesResponseBodyEntityResponseGroupedWithHits(entityResponseGroupedWithHits shared.EntityResponseGroupedWithHits) SearchPortalUserEntitiesResponseBody {
	typ := SearchPortalUserEntitiesResponseBodyTypeEntityResponseGroupedWithHits

	return SearchPortalUserEntitiesResponseBody{
		EntityResponseGroupedWithHits: &entityResponseGroupedWithHits,
		Type:                          typ,
	}
}

func (u *SearchPortalUserEntitiesResponseBody) UnmarshalJSON(data []byte) error {

	var entityResponseWithHits shared.EntityResponseWithHits = shared.EntityResponseWithHits{}
	if err := utils.UnmarshalJSON(data, &entityResponseWithHits, "", true, nil); err == nil {
		u.EntityResponseWithHits = &entityResponseWithHits
		u.Type = SearchPortalUserEntitiesResponseBodyTypeEntityResponseWithHits
		return nil
	}

	var entityResponseGroupedWithHits shared.EntityResponseGroupedWithHits = shared.EntityResponseGroupedWithHits{}
	if err := utils.UnmarshalJSON(data, &entityResponseGroupedWithHits, "", true, nil); err == nil {
		u.EntityResponseGroupedWithHits = &entityResponseGroupedWithHits
		u.Type = SearchPortalUserEntitiesResponseBodyTypeEntityResponseGroupedWithHits
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SearchPortalUserEntitiesResponseBody", string(data))
}

func (u SearchPortalUserEntitiesResponseBody) MarshalJSON() ([]byte, error) {
	if u.EntityResponseWithHits != nil {
		return utils.MarshalJSON(u.EntityResponseWithHits, "", true)
	}

	if u.EntityResponseGroupedWithHits != nil {
		return utils.MarshalJSON(u.EntityResponseGroupedWithHits, "", true)
	}

	return nil, errors.New("could not marshal union type SearchPortalUserEntitiesResponseBody: all fields are null")
}

type SearchPortalUserEntitiesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The entities have been retrieved successfully for the portal user.
	OneOf *SearchPortalUserEntitiesResponseBody
}

func (o *SearchPortalUserEntitiesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SearchPortalUserEntitiesResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *SearchPortalUserEntitiesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SearchPortalUserEntitiesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *SearchPortalUserEntitiesResponse) GetOneOf() *SearchPortalUserEntitiesResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
