// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
)

type CreateUserRequest struct {
	// Portal user payload
	CreateUserRequest shared.CreateUserRequest `request:"mediaType=application/json"`
	// Origin of the portal
	Origin string `queryParam:"style=form,explode=true,name=origin"`
}

func (o *CreateUserRequest) GetCreateUserRequest() shared.CreateUserRequest {
	if o == nil {
		return shared.CreateUserRequest{}
	}
	return o.CreateUserRequest
}

func (o *CreateUserRequest) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

type CreateUserMessage string

const (
	CreateUserMessageUserCreatedSuccessfully CreateUserMessage = "User created successfully"
)

func (e CreateUserMessage) ToPointer() *CreateUserMessage {
	return &e
}
func (e *CreateUserMessage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User created successfully":
		*e = CreateUserMessage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserMessage: %v", v)
	}
}

// CreateUserResponseBody - User created successfully.
type CreateUserResponseBody struct {
	Message CreateUserMessage `json:"message"`
}

func (o *CreateUserResponseBody) GetMessage() CreateUserMessage {
	if o == nil {
		return CreateUserMessage("")
	}
	return o.Message
}

type CreateUserResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// The request could not be validated
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// User created successfully.
	Object *CreateUserResponseBody
}

func (o *CreateUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateUserResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *CreateUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateUserResponse) GetObject() *CreateUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
