// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
	"time"
)

// GetPricesQueryParamInterval - Interval between price data points (e.g., PT15M for 15 minutes, PT1H for hourly). Not all intervals have to be supported.
type GetPricesQueryParamInterval string

const (
	GetPricesQueryParamIntervalPt15M GetPricesQueryParamInterval = "PT15M"
	GetPricesQueryParamIntervalPt1H  GetPricesQueryParamInterval = "PT1H"
	GetPricesQueryParamIntervalP1D   GetPricesQueryParamInterval = "P1D"
	GetPricesQueryParamIntervalP1M   GetPricesQueryParamInterval = "P1M"
)

func (e GetPricesQueryParamInterval) ToPointer() *GetPricesQueryParamInterval {
	return &e
}
func (e *GetPricesQueryParamInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PT15M":
		fallthrough
	case "PT1H":
		fallthrough
	case "P1D":
		fallthrough
	case "P1M":
		*e = GetPricesQueryParamInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPricesQueryParamInterval: %v", v)
	}
}

type GetPricesRequest struct {
	// Extension ID for price data.
	ExtensionID string `queryParam:"style=form,explode=true,name=extensionId"`
	// Start date for price data (ISO 8601 format).
	From time.Time `queryParam:"style=form,explode=true,name=from"`
	// Hook ID for price data.
	HookID string `queryParam:"style=form,explode=true,name=hookId"`
	// Interval between price data points (e.g., PT15M for 15 minutes, PT1H for hourly). Not all intervals have to be supported.
	Interval GetPricesQueryParamInterval `queryParam:"style=form,explode=true,name=interval"`
	// Meter ID for price data.
	MeterID string `queryParam:"style=form,explode=true,name=meter_id"`
	// End date for price data (ISO 8601 format).
	To time.Time `queryParam:"style=form,explode=true,name=to"`
}

func (g GetPricesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetPricesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"extensionId", "from", "hookId", "interval", "meter_id", "to"}); err != nil {
		return err
	}
	return nil
}

func (o *GetPricesRequest) GetExtensionID() string {
	if o == nil {
		return ""
	}
	return o.ExtensionID
}

func (o *GetPricesRequest) GetFrom() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.From
}

func (o *GetPricesRequest) GetHookID() string {
	if o == nil {
		return ""
	}
	return o.HookID
}

func (o *GetPricesRequest) GetInterval() GetPricesQueryParamInterval {
	if o == nil {
		return GetPricesQueryParamInterval("")
	}
	return o.Interval
}

func (o *GetPricesRequest) GetMeterID() string {
	if o == nil {
		return ""
	}
	return o.MeterID
}

func (o *GetPricesRequest) GetTo() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.To
}

// Components - Optional price components.
type Components struct {
	// Market price in cents, e.g. 1000 for 10,00 €.
	AuctionPriceAmount *int64 `json:"auction_price_amount,omitempty"`
	// Market price in decimal format, e.g. "10.00".
	AuctionPriceAmountDecimal *string `json:"auction_price_amount_decimal,omitempty"`
	// Fee associated with the transmission/distribution in cents, e.g. 100 for 1,00 €.
	GridFeeAmount *int64 `json:"grid_fee_amount,omitempty"`
	// Fee associated with the transmission/distribution in decimal format, e.g. "1.00".
	GridFeeAmountDecimal *string `json:"grid_fee_amount_decimal,omitempty"`
	// Margin in cents, e.g. 34 for 0,34 €.
	MarginAmount *int64 `json:"margin_amount,omitempty"`
	// Margin in decimal format, e.g. "0.34".
	MarginAmountDecimal *string `json:"margin_amount_decimal,omitempty"`
	// Fee associated with the source, e.g. Green Energy Certificate fee in cents, e.g. 50 for 00,50 €.
	SourceFeeAmount *int64 `json:"source_fee_amount,omitempty"`
	// Fee associated with the source, e.g. Green Energy Certificate fee in decimal format, e.g. "0.50".
	SourceFeeAmountDecimal *string `json:"source_fee_amount_decimal,omitempty"`
	// Taxes/Levies other than tax specified on the price level in cents, e.g. 50 for 00,50 €.
	TaxesLeviesAmount *int64 `json:"taxes_levies_amount,omitempty"`
	// Taxes/Levies other than tax specified on the price level in decimal format, e.g. "0.50".
	TaxesLeviesAmountDecimal *string `json:"taxes_levies_amount_decimal,omitempty"`
}

func (o *Components) GetAuctionPriceAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.AuctionPriceAmount
}

func (o *Components) GetAuctionPriceAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.AuctionPriceAmountDecimal
}

func (o *Components) GetGridFeeAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.GridFeeAmount
}

func (o *Components) GetGridFeeAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.GridFeeAmountDecimal
}

func (o *Components) GetMarginAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.MarginAmount
}

func (o *Components) GetMarginAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.MarginAmountDecimal
}

func (o *Components) GetSourceFeeAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.SourceFeeAmount
}

func (o *Components) GetSourceFeeAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.SourceFeeAmountDecimal
}

func (o *Components) GetTaxesLeviesAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.TaxesLeviesAmount
}

func (o *Components) GetTaxesLeviesAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.TaxesLeviesAmountDecimal
}

// GetPricesTaxBehavior - Is the tax (typically Value Added Tax) included in the amounts. Typically should NOT be included - exclusive of tax.
type GetPricesTaxBehavior string

const (
	GetPricesTaxBehaviorInclusive GetPricesTaxBehavior = "inclusive"
	GetPricesTaxBehaviorExclusive GetPricesTaxBehavior = "exclusive"
)

func (e GetPricesTaxBehavior) ToPointer() *GetPricesTaxBehavior {
	return &e
}
func (e *GetPricesTaxBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inclusive":
		fallthrough
	case "exclusive":
		*e = GetPricesTaxBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPricesTaxBehavior: %v", v)
	}
}

type Prices struct {
	// Optional price components.
	Components *Components `json:"components,omitempty"`
	// Is the tax (typically Value Added Tax) included in the amounts. Typically should NOT be included - exclusive of tax.
	TaxBehavior GetPricesTaxBehavior `json:"tax_behavior"`
	// Tax rate in percent, e.g. 19 for 19%.
	TaxRate int64 `json:"tax_rate"`
	// ISO 8601 timestamp of the price record.
	Timestamp time.Time `json:"timestamp"`
	// Cost in cents, e.g. 1234 for 12,34 €.
	UnitAmount int64 `json:"unit_amount"`
	// ISO 4217:2015 currency.
	UnitAmountCurrency string `json:"unit_amount_currency"`
	// Cost in decimal format, e.g. "12.34".
	UnitAmountDecimal string `json:"unit_amount_decimal"`
}

func (p Prices) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Prices) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"tax_behavior", "tax_rate", "timestamp", "unit_amount", "unit_amount_currency", "unit_amount_decimal"}); err != nil {
		return err
	}
	return nil
}

func (o *Prices) GetComponents() *Components {
	if o == nil {
		return nil
	}
	return o.Components
}

func (o *Prices) GetTaxBehavior() GetPricesTaxBehavior {
	if o == nil {
		return GetPricesTaxBehavior("")
	}
	return o.TaxBehavior
}

func (o *Prices) GetTaxRate() int64 {
	if o == nil {
		return 0
	}
	return o.TaxRate
}

func (o *Prices) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Prices) GetUnitAmount() int64 {
	if o == nil {
		return 0
	}
	return o.UnitAmount
}

func (o *Prices) GetUnitAmountCurrency() string {
	if o == nil {
		return ""
	}
	return o.UnitAmountCurrency
}

func (o *Prices) GetUnitAmountDecimal() string {
	if o == nil {
		return ""
	}
	return o.UnitAmountDecimal
}

// GetPricesResponseBody - Price data returned successfully.
type GetPricesResponseBody struct {
	Prices []Prices `json:"prices,omitempty"`
}

func (o *GetPricesResponseBody) GetPrices() []Prices {
	if o == nil {
		return nil
	}
	return o.Prices
}

type GetPricesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Could not authenticate the user
	ErrorResp *shared.ErrorResp
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Price data returned successfully.
	Object *GetPricesResponseBody
}

func (o *GetPricesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetPricesResponse) GetErrorResp() *shared.ErrorResp {
	if o == nil {
		return nil
	}
	return o.ErrorResp
}

func (o *GetPricesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetPricesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetPricesResponse) GetObject() *GetPricesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
