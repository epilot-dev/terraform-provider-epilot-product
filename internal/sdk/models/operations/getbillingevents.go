// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/models/shared"
	"net/http"
	"time"
)

// EventType - Type of billing event to filter by
type EventType string

const (
	EventTypeInstallment   EventType = "installment"
	EventTypeReimbursement EventType = "reimbursement"
)

func (e EventType) ToPointer() *EventType {
	return &e
}
func (e *EventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "installment":
		fallthrough
	case "reimbursement":
		*e = EventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventType: %v", v)
	}
}

type GetBillingEventsRequest struct {
	DateAfter  *time.Time `queryParam:"style=form,explode=true,name=date_after"`
	DateBefore *time.Time `queryParam:"style=form,explode=true,name=date_before"`
	// Entity ID to filter billing events by
	EntityID []string `queryParam:"style=form,explode=true,name=entity_id"`
	// Type of billing event to filter by
	EventType *EventType `queryParam:"style=form,explode=true,name=event_type"`
	From      *float64   `default:"0" queryParam:"style=form,explode=true,name=from"`
	Paid      *bool      `queryParam:"style=form,explode=true,name=paid"`
	Size      *float64   `default:"100" queryParam:"style=form,explode=true,name=size"`
	Sort      *string    `queryParam:"style=form,explode=true,name=sort"`
}

func (g GetBillingEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetBillingEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetBillingEventsRequest) GetDateAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateAfter
}

func (o *GetBillingEventsRequest) GetDateBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateBefore
}

func (o *GetBillingEventsRequest) GetEntityID() []string {
	if o == nil {
		return nil
	}
	return o.EntityID
}

func (o *GetBillingEventsRequest) GetEventType() *EventType {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *GetBillingEventsRequest) GetFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetBillingEventsRequest) GetPaid() *bool {
	if o == nil {
		return nil
	}
	return o.Paid
}

func (o *GetBillingEventsRequest) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetBillingEventsRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

// GetBillingEventsResponseBody - List billing events for all contracts/orders of specific customer
type GetBillingEventsResponseBody struct {
	// Total number of billing events for pagination
	Hits    *float64              `json:"hits,omitempty"`
	Results []shared.BillingEvent `json:"results,omitempty"`
}

func (o *GetBillingEventsResponseBody) GetHits() *float64 {
	if o == nil {
		return nil
	}
	return o.Hits
}

func (o *GetBillingEventsResponseBody) GetResults() []shared.BillingEvent {
	if o == nil {
		return nil
	}
	return o.Results
}

type GetBillingEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List billing events for all contracts/orders of specific customer
	Object *GetBillingEventsResponseBody
}

func (o *GetBillingEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetBillingEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetBillingEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetBillingEventsResponse) GetObject() *GetBillingEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
