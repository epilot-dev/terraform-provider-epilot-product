// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type AutomationEntityMapping struct {
	// Enable/Disable automation entity mapping
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *AutomationEntityMapping) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type AutomationPreview struct {
	// Enable/Disable automation preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *AutomationPreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type CentralInboxPreviewSetting struct {
	// Enable/Disable central inbox preview setting
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *CentralInboxPreviewSetting) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type ContractsPreviewSetting struct {
	// Enable/Disable contracts preview setting
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *ContractsPreviewSetting) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type DisableIvy struct {
	// Enable/Disable Ivy
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *DisableIvy) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type DoubleOptIn struct {
	// Enable/Disable double opt-in
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *DoubleOptIn) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type EcommerceCatalogPreview struct {
	// Enable/Disable ecommerce catalog preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *EcommerceCatalogPreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type EcommerceOpportunitiesPreview struct {
	// Enable/Disable ecommerce opportunities preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *EcommerceOpportunitiesPreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type EcommercePreview struct {
	// Enable/Disable ecommerce preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *EcommercePreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type EndCustomerPortal struct {
	// Enable/Disable end customer portal
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *EndCustomerPortal) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type EntitySchemaBuilder struct {
	// Enable/Disable entity schema builder
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *EntitySchemaBuilder) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type InstallerPortal struct {
	// Enable/Disable installer portal
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *InstallerPortal) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type LogicEditorPreview struct {
	// Enable/Disable logic editor preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *LogicEditorPreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type NewNavigation struct {
	// Enable/Disable new navigation
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *NewNavigation) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type Partnering struct {
	// Enable/Disable partnering
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *Partnering) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type ProductAvailability struct {
	// Enable/Disable product availability
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *ProductAvailability) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type Sso struct {
	// Enable/Disable single sign-on (SSO)
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *Sso) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type SubmissionPreview struct {
	// Enable/Disable submission preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *SubmissionPreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type UserRolesPreview struct {
	// Enable/Disable user roles preview
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *UserRolesPreview) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type OrganizationSettings struct {
	AutomationEntityMapping       *AutomationEntityMapping       `json:"automation_entity_mapping,omitempty"`
	AutomationPreview             *AutomationPreview             `json:"automation_preview,omitempty"`
	CentralInboxPreviewSetting    *CentralInboxPreviewSetting    `json:"central_inbox_preview_setting,omitempty"`
	ContractsPreviewSetting       *ContractsPreviewSetting       `json:"contracts_preview_setting,omitempty"`
	DisableIvy                    *DisableIvy                    `json:"disable_ivy,omitempty"`
	DoubleOptIn                   *DoubleOptIn                   `json:"double_opt_in,omitempty"`
	EcommerceCatalogPreview       *EcommerceCatalogPreview       `json:"ecommerce_catalog_preview,omitempty"`
	EcommerceOpportunitiesPreview *EcommerceOpportunitiesPreview `json:"ecommerce_opportunities_preview,omitempty"`
	EcommercePreview              *EcommercePreview              `json:"ecommerce_preview,omitempty"`
	EndCustomerPortal             *EndCustomerPortal             `json:"end_customer_portal,omitempty"`
	EntitySchemaBuilder           *EntitySchemaBuilder           `json:"entity_schema_builder,omitempty"`
	InstallerPortal               *InstallerPortal               `json:"installer_portal,omitempty"`
	LogicEditorPreview            *LogicEditorPreview            `json:"logic_editor_preview,omitempty"`
	NewNavigation                 *NewNavigation                 `json:"new_navigation,omitempty"`
	Partnering                    *Partnering                    `json:"partnering,omitempty"`
	ProductAvailability           *ProductAvailability           `json:"product-availability,omitempty"`
	Sso                           *Sso                           `json:"sso,omitempty"`
	SubmissionPreview             *SubmissionPreview             `json:"submission_preview,omitempty"`
	UserRolesPreview              *UserRolesPreview              `json:"user_roles_preview,omitempty"`
}

func (o *OrganizationSettings) GetAutomationEntityMapping() *AutomationEntityMapping {
	if o == nil {
		return nil
	}
	return o.AutomationEntityMapping
}

func (o *OrganizationSettings) GetAutomationPreview() *AutomationPreview {
	if o == nil {
		return nil
	}
	return o.AutomationPreview
}

func (o *OrganizationSettings) GetCentralInboxPreviewSetting() *CentralInboxPreviewSetting {
	if o == nil {
		return nil
	}
	return o.CentralInboxPreviewSetting
}

func (o *OrganizationSettings) GetContractsPreviewSetting() *ContractsPreviewSetting {
	if o == nil {
		return nil
	}
	return o.ContractsPreviewSetting
}

func (o *OrganizationSettings) GetDisableIvy() *DisableIvy {
	if o == nil {
		return nil
	}
	return o.DisableIvy
}

func (o *OrganizationSettings) GetDoubleOptIn() *DoubleOptIn {
	if o == nil {
		return nil
	}
	return o.DoubleOptIn
}

func (o *OrganizationSettings) GetEcommerceCatalogPreview() *EcommerceCatalogPreview {
	if o == nil {
		return nil
	}
	return o.EcommerceCatalogPreview
}

func (o *OrganizationSettings) GetEcommerceOpportunitiesPreview() *EcommerceOpportunitiesPreview {
	if o == nil {
		return nil
	}
	return o.EcommerceOpportunitiesPreview
}

func (o *OrganizationSettings) GetEcommercePreview() *EcommercePreview {
	if o == nil {
		return nil
	}
	return o.EcommercePreview
}

func (o *OrganizationSettings) GetEndCustomerPortal() *EndCustomerPortal {
	if o == nil {
		return nil
	}
	return o.EndCustomerPortal
}

func (o *OrganizationSettings) GetEntitySchemaBuilder() *EntitySchemaBuilder {
	if o == nil {
		return nil
	}
	return o.EntitySchemaBuilder
}

func (o *OrganizationSettings) GetInstallerPortal() *InstallerPortal {
	if o == nil {
		return nil
	}
	return o.InstallerPortal
}

func (o *OrganizationSettings) GetLogicEditorPreview() *LogicEditorPreview {
	if o == nil {
		return nil
	}
	return o.LogicEditorPreview
}

func (o *OrganizationSettings) GetNewNavigation() *NewNavigation {
	if o == nil {
		return nil
	}
	return o.NewNavigation
}

func (o *OrganizationSettings) GetPartnering() *Partnering {
	if o == nil {
		return nil
	}
	return o.Partnering
}

func (o *OrganizationSettings) GetProductAvailability() *ProductAvailability {
	if o == nil {
		return nil
	}
	return o.ProductAvailability
}

func (o *OrganizationSettings) GetSso() *Sso {
	if o == nil {
		return nil
	}
	return o.Sso
}

func (o *OrganizationSettings) GetSubmissionPreview() *SubmissionPreview {
	if o == nil {
		return nil
	}
	return o.SubmissionPreview
}

func (o *OrganizationSettings) GetUserRolesPreview() *UserRolesPreview {
	if o == nil {
		return nil
	}
	return o.UserRolesPreview
}
