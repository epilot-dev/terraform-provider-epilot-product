// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AdvancedMfa struct {
	// Advanced MFA feature flag
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *AdvancedMfa) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type EntryPoint string

const (
	EntryPointPassword EntryPoint = "PASSWORD"
	EntryPointSso      EntryPoint = "SSO"
)

func (e EntryPoint) ToPointer() *EntryPoint {
	return &e
}
func (e *EntryPoint) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD":
		fallthrough
	case "SSO":
		*e = EntryPoint(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntryPoint: %v", v)
	}
}

type PasswordlessLogin struct {
	// Passwordless login feature flag
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *PasswordlessLogin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// AuthSettings - Authentication settings for the portal
type AuthSettings struct {
	// Decide whether to automatically redirect to the provider page during login, which would completely bypass showing the portal authentication page.
	AutoRedirectToSso     *bool              `json:"auto_redirect_to_sso,omitempty"`
	EntryPoint            *EntryPoint        `json:"entry_point,omitempty"`
	PasswordlessLogin     *PasswordlessLogin `json:"passwordless_login,omitempty"`
	PreferredSsoProviders []string           `json:"preferred_sso_providers,omitempty"`
}

func (o *AuthSettings) GetAutoRedirectToSso() *bool {
	if o == nil {
		return nil
	}
	return o.AutoRedirectToSso
}

func (o *AuthSettings) GetEntryPoint() *EntryPoint {
	if o == nil {
		return nil
	}
	return o.EntryPoint
}

func (o *AuthSettings) GetPasswordlessLogin() *PasswordlessLogin {
	if o == nil {
		return nil
	}
	return o.PasswordlessLogin
}

func (o *AuthSettings) GetPreferredSsoProviders() []string {
	if o == nil {
		return nil
	}
	return o.PreferredSsoProviders
}

// PasswordPolicy - Password policy for the portal
type PasswordPolicy struct {
	// Minimum password length
	MinimumLength *int64 `json:"minimum_length,omitempty"`
	// Require lowercase characters
	RequireLowercase *bool `json:"require_lowercase,omitempty"`
	// Require numbers
	RequireNumbers *bool `json:"require_numbers,omitempty"`
	// Require symbols
	RequireSymbols *bool `json:"require_symbols,omitempty"`
	// Require uppercase characters
	RequireUppercase *bool `json:"require_uppercase,omitempty"`
}

func (o *PasswordPolicy) GetMinimumLength() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumLength
}

func (o *PasswordPolicy) GetRequireLowercase() *bool {
	if o == nil {
		return nil
	}
	return o.RequireLowercase
}

func (o *PasswordPolicy) GetRequireNumbers() *bool {
	if o == nil {
		return nil
	}
	return o.RequireNumbers
}

func (o *PasswordPolicy) GetRequireSymbols() *bool {
	if o == nil {
		return nil
	}
	return o.RequireSymbols
}

func (o *PasswordPolicy) GetRequireUppercase() *bool {
	if o == nil {
		return nil
	}
	return o.RequireUppercase
}

// CognitoDetails - AWS Cognito Pool details for the portal
type CognitoDetails struct {
	// Cognito user pool ARN
	CognitoUserPoolArn *string `json:"cognito_user_pool_arn,omitempty"`
	// Cognito user pool client ID
	CognitoUserPoolClientID *string `json:"cognito_user_pool_client_id,omitempty"`
	// Cognito user pool ID
	CognitoUserPoolID *string `json:"cognito_user_pool_id,omitempty"`
	// Password policy for the portal
	PasswordPolicy *PasswordPolicy `json:"password_policy,omitempty"`
}

func (o *CognitoDetails) GetCognitoUserPoolArn() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolArn
}

func (o *CognitoDetails) GetCognitoUserPoolClientID() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolClientID
}

func (o *CognitoDetails) GetCognitoUserPoolID() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolID
}

func (o *CognitoDetails) GetPasswordPolicy() *PasswordPolicy {
	if o == nil {
		return nil
	}
	return o.PasswordPolicy
}

// ContractSelectorConfig - Configuration for contract selector in the portal
type ContractSelectorConfig struct {
	// Whether to show inactive contracts in the selector
	ShowInactive *bool `json:"show_inactive,omitempty"`
	// Path to the property to use as the contract title
	TitlePath *string `json:"title_path,omitempty"`
}

func (o *ContractSelectorConfig) GetShowInactive() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInactive
}

func (o *ContractSelectorConfig) GetTitlePath() *string {
	if o == nil {
		return nil
	}
	return o.TitlePath
}

type CadencePeriodType string

const (
	CadencePeriodTypeDays   CadencePeriodType = "days"
	CadencePeriodTypeWeeks  CadencePeriodType = "weeks"
	CadencePeriodTypeMonths CadencePeriodType = "months"
)

func (e CadencePeriodType) ToPointer() *CadencePeriodType {
	return &e
}
func (e *CadencePeriodType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = CadencePeriodType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CadencePeriodType: %v", v)
	}
}

type RuleType string

const (
	RuleTypeCadence                RuleType = "cadence"
	RuleTypeRelativeToCurrentValue RuleType = "relative_to_current_value"
	RuleTypeDaysBeforeDate         RuleType = "days_before_date"
	RuleTypeOverduePayments        RuleType = "overdue_payments"
)

func (e RuleType) ToPointer() *RuleType {
	return &e
}
func (e *RuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cadence":
		fallthrough
	case "relative_to_current_value":
		fallthrough
	case "days_before_date":
		fallthrough
	case "overdue_payments":
		*e = RuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleType: %v", v)
	}
}

type EntityEditRules struct {
	AllowedDecrement              *string            `json:"allowed_decrement,omitempty"`
	AllowedIncrement              *string            `json:"allowed_increment,omitempty"`
	Attribute                     *string            `json:"attribute,omitempty"`
	CadencePeriod                 *float64           `json:"cadence_period,omitempty"`
	CadencePeriodType             *CadencePeriodType `json:"cadence_period_type,omitempty"`
	ChangesAllowed                *int64             `json:"changes_allowed,omitempty"`
	GracePeriod                   *int64             `json:"grace_period,omitempty"`
	NumberOfDaysBeforeRestriction *int64             `json:"number_of_days_before_restriction,omitempty"`
	RuleType                      *RuleType          `json:"rule_type,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *EntitySlug `json:"slug,omitempty"`
}

func (o *EntityEditRules) GetAllowedDecrement() *string {
	if o == nil {
		return nil
	}
	return o.AllowedDecrement
}

func (o *EntityEditRules) GetAllowedIncrement() *string {
	if o == nil {
		return nil
	}
	return o.AllowedIncrement
}

func (o *EntityEditRules) GetAttribute() *string {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *EntityEditRules) GetCadencePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.CadencePeriod
}

func (o *EntityEditRules) GetCadencePeriodType() *CadencePeriodType {
	if o == nil {
		return nil
	}
	return o.CadencePeriodType
}

func (o *EntityEditRules) GetChangesAllowed() *int64 {
	if o == nil {
		return nil
	}
	return o.ChangesAllowed
}

func (o *EntityEditRules) GetGracePeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.GracePeriod
}

func (o *EntityEditRules) GetNumberOfDaysBeforeRestriction() *int64 {
	if o == nil {
		return nil
	}
	return o.NumberOfDaysBeforeRestriction
}

func (o *EntityEditRules) GetRuleType() *RuleType {
	if o == nil {
		return nil
	}
	return o.RuleType
}

func (o *EntityEditRules) GetSlug() *EntitySlug {
	if o == nil {
		return nil
	}
	return o.Slug
}

type PortalConfigType struct {
	// Attributes used to identify an entity
	Attributes []string `json:"attributes,omitempty"`
	// Enable/Disable the entity identifier
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

func (o *PortalConfigType) GetAttributes() []string {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *PortalConfigType) GetIsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

// EntityIdentifiers - Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type EntityIdentifiers struct {
	Type *PortalConfigType `json:"type,omitempty"`
}

func (o *EntityIdentifiers) GetType() *PortalConfigType {
	if o == nil {
		return nil
	}
	return o.Type
}

// FeatureSettings - Feature settings for the portal
type FeatureSettings struct {
	// Billing feature flag
	Billing *bool `json:"billing,omitempty"`
	// Change due date feature flag
	ChangeDueDate *bool `json:"change_due_date,omitempty"`
	// Enable or disable the new design for the portal
	NewDesign *bool `json:"new_design,omitempty"`
	// Start page feature flag
	StartPage *bool `json:"start_page,omitempty"`
}

func (o *FeatureSettings) GetBilling() *bool {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *FeatureSettings) GetChangeDueDate() *bool {
	if o == nil {
		return nil
	}
	return o.ChangeDueDate
}

func (o *FeatureSettings) GetNewDesign() *bool {
	if o == nil {
		return nil
	}
	return o.NewDesign
}

func (o *FeatureSettings) GetStartPage() *bool {
	if o == nil {
		return nil
	}
	return o.StartPage
}

// Images - Teaser & Banner Image web links
type Images struct {
	// URL of the order left teaser image
	OrderLeftTeaser *string `json:"orderLeftTeaser,omitempty"`
	// URL of the order right teaser image
	OrderRightTeaser *string `json:"orderRightTeaser,omitempty"`
	// URL of the welcome banner image
	WelcomeBanner *string `json:"welcomeBanner,omitempty"`
}

func (o *Images) GetOrderLeftTeaser() *string {
	if o == nil {
		return nil
	}
	return o.OrderLeftTeaser
}

func (o *Images) GetOrderRightTeaser() *string {
	if o == nil {
		return nil
	}
	return o.OrderRightTeaser
}

func (o *Images) GetWelcomeBanner() *string {
	if o == nil {
		return nil
	}
	return o.WelcomeBanner
}

// Canary feature flag
type Canary struct {
	// Enable/Disable the canary feature
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *Canary) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// Notracking - Disable Advanced Usage Metrics
type Notracking struct {
	// Disable browser-side scripts that track advanced usage metrics
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *Notracking) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// OrgSettings - Organization settings
type OrgSettings struct {
	// Canary feature flag
	Canary *Canary `json:"canary,omitempty"`
	// Disable Advanced Usage Metrics
	Notracking *Notracking `json:"notracking,omitempty"`
}

func (o *OrgSettings) GetCanary() *Canary {
	if o == nil {
		return nil
	}
	return o.Canary
}

func (o *OrgSettings) GetNotracking() *Notracking {
	if o == nil {
		return nil
	}
	return o.Notracking
}

type SelfRegistrationSetting string

const (
	SelfRegistrationSettingAllowWithContactCreation    SelfRegistrationSetting = "ALLOW_WITH_CONTACT_CREATION"
	SelfRegistrationSettingAllowWithoutContactCreation SelfRegistrationSetting = "ALLOW_WITHOUT_CONTACT_CREATION"
	SelfRegistrationSettingDeny                        SelfRegistrationSetting = "DENY"
)

func (e SelfRegistrationSetting) ToPointer() *SelfRegistrationSetting {
	return &e
}
func (e *SelfRegistrationSetting) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW_WITH_CONTACT_CREATION":
		fallthrough
	case "ALLOW_WITHOUT_CONTACT_CREATION":
		fallthrough
	case "DENY":
		*e = SelfRegistrationSetting(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SelfRegistrationSetting: %v", v)
	}
}

type TriggerName string

const (
	TriggerNameFirstLogin   TriggerName = "FIRST_LOGIN"
	TriggerNameAcceptOrder  TriggerName = "ACCEPT_ORDER"
	TriggerNameDeclineOrder TriggerName = "DECLINE_ORDER"
)

func (e TriggerName) ToPointer() *TriggerName {
	return &e
}
func (e *TriggerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIRST_LOGIN":
		fallthrough
	case "ACCEPT_ORDER":
		fallthrough
	case "DECLINE_ORDER":
		*e = TriggerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerName: %v", v)
	}
}

type TriggeredJourneys struct {
	// Entity ID
	JourneyID   *string      `json:"journey_id,omitempty"`
	TriggerName *TriggerName `json:"trigger_name,omitempty"`
}

func (o *TriggeredJourneys) GetJourneyID() *string {
	if o == nil {
		return nil
	}
	return o.JourneyID
}

func (o *TriggeredJourneys) GetTriggerName() *TriggerName {
	if o == nil {
		return nil
	}
	return o.TriggerName
}

type PortalConfig struct {
	// Access token for the portal
	AccessToken *string      `json:"accessToken,omitempty"`
	AdvancedMfa *AdvancedMfa `json:"advanced_mfa,omitempty"`
	// Allowed file extensions for upload
	AllowedFileExtensions   *AllowedFileExtensions `json:"allowed_file_extensions,omitempty"`
	ApprovalStateAttributes map[string][]string    `json:"approval_state_attributes,omitempty"`
	// Authentication settings for the portal
	AuthSettings *AuthSettings `json:"auth_settings,omitempty"`
	// AWS Cognito Pool details for the portal
	CognitoDetails *CognitoDetails `json:"cognito_details,omitempty"`
	// Stringified object with configuration details
	Config *string `json:"config,omitempty"`
	// Deprecated. Use registration_identifiers instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ContactIdentifiers []string `json:"contact_identifiers,omitempty"`
	// Identifiers to identify a contract by a portal user.
	ContractIdentifiers []ContractIdentifier `json:"contract_identifiers,omitempty"`
	// Configuration for contract selector in the portal
	ContractSelectorConfig *ContractSelectorConfig `json:"contract_selector_config,omitempty"`
	// Entity ID
	DesignID *string `json:"design_id,omitempty"`
	// The URL on which the portal is accessible
	Domain string `json:"domain"`
	// Email templates used for authentication and internal processes
	EmailTemplates *EmailTemplates `json:"email_templates,omitempty"`
	// Enable/Disable the portal access
	Enabled *bool `json:"enabled,omitempty"`
	// Rules for editing an entity by a portal user
	EntityEditRules []EntityEditRules `json:"entity_edit_rules,omitempty"`
	// Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	EntityIdentifiers *EntityIdentifiers `json:"entity_identifiers,omitempty"`
	// Feature flags for the portal
	FeatureFlags map[string]bool `json:"feature_flags,omitempty"`
	// Feature settings for the portal
	FeatureSettings *FeatureSettings `json:"feature_settings,omitempty"`
	// Permissions granted to a portal user while accessing entities
	Grants []Grant `json:"grants,omitempty"`
	// ID of the organization
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ID                *string                `json:"id,omitempty"`
	IdentityProviders []ProviderPublicConfig `json:"identity_providers,omitempty"`
	// Teaser & Banner Image web links
	Images *Images `json:"images,omitempty"`
	// Number of years to look back for showing inactive contracts in the portal
	InactiveContractCutoffYears *float64 `json:"inactive_contract_cutoff_years,omitempty"`
	// Whether this is a dummy/test portal configuration
	IsDummy *bool `json:"is_dummy,omitempty"`
	// Mark true if the domain is an Epilot domain
	IsEpilotDomain *bool `json:"is_epilot_domain,omitempty"`
	// Whether this is a v3 portal configuration
	IsV3Item *bool `json:"is_v3_item,omitempty"`
	// Grace period in days for meter readings
	MeterReadingGracePeriod *float64 `json:"meter_reading_grace_period,omitempty"`
	// A short name to identify your portal
	Name *string `json:"name,omitempty"`
	// Organization settings
	OrgSettings *OrgSettings `json:"org_settings,omitempty"`
	// ID of the organization
	OrganizationID *string `json:"organization_id,omitempty"`
	// Origin of the portal
	Origin *string         `json:"origin,omitempty"`
	Pages  map[string]Page `json:"pages,omitempty"`
	// ID of the portal
	PortalID *string `json:"portal_id,omitempty"`
	// Key of the portal config
	PortalSkV3 *string `json:"portal_sk_v3,omitempty"`
	// Prevent indexing by search engines
	PreventSearchEngineIndexing *bool `json:"prevent_search_engine_indexing,omitempty"`
	// Identifiers to identify a contact of a portal user during the registration.
	RegistrationIdentifiers []ContractIdentifier     `json:"registration_identifiers,omitempty"`
	SelfRegistrationSetting *SelfRegistrationSetting `json:"self_registration_setting,omitempty"`
	// Journeys automatically opened on a portal user action
	TriggeredJourneys []TriggeredJourneys `json:"triggered_journeys,omitempty"`
}

func (o *PortalConfig) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *PortalConfig) GetAdvancedMfa() *AdvancedMfa {
	if o == nil {
		return nil
	}
	return o.AdvancedMfa
}

func (o *PortalConfig) GetAllowedFileExtensions() *AllowedFileExtensions {
	if o == nil {
		return nil
	}
	return o.AllowedFileExtensions
}

func (o *PortalConfig) GetApprovalStateAttributes() map[string][]string {
	if o == nil {
		return nil
	}
	return o.ApprovalStateAttributes
}

func (o *PortalConfig) GetAuthSettings() *AuthSettings {
	if o == nil {
		return nil
	}
	return o.AuthSettings
}

func (o *PortalConfig) GetCognitoDetails() *CognitoDetails {
	if o == nil {
		return nil
	}
	return o.CognitoDetails
}

func (o *PortalConfig) GetConfig() *string {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *PortalConfig) GetContactIdentifiers() []string {
	if o == nil {
		return nil
	}
	return o.ContactIdentifiers
}

func (o *PortalConfig) GetContractIdentifiers() []ContractIdentifier {
	if o == nil {
		return nil
	}
	return o.ContractIdentifiers
}

func (o *PortalConfig) GetContractSelectorConfig() *ContractSelectorConfig {
	if o == nil {
		return nil
	}
	return o.ContractSelectorConfig
}

func (o *PortalConfig) GetDesignID() *string {
	if o == nil {
		return nil
	}
	return o.DesignID
}

func (o *PortalConfig) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *PortalConfig) GetEmailTemplates() *EmailTemplates {
	if o == nil {
		return nil
	}
	return o.EmailTemplates
}

func (o *PortalConfig) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PortalConfig) GetEntityEditRules() []EntityEditRules {
	if o == nil {
		return nil
	}
	return o.EntityEditRules
}

func (o *PortalConfig) GetEntityIdentifiers() *EntityIdentifiers {
	if o == nil {
		return nil
	}
	return o.EntityIdentifiers
}

func (o *PortalConfig) GetFeatureFlags() map[string]bool {
	if o == nil {
		return nil
	}
	return o.FeatureFlags
}

func (o *PortalConfig) GetFeatureSettings() *FeatureSettings {
	if o == nil {
		return nil
	}
	return o.FeatureSettings
}

func (o *PortalConfig) GetGrants() []Grant {
	if o == nil {
		return nil
	}
	return o.Grants
}

func (o *PortalConfig) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PortalConfig) GetIdentityProviders() []ProviderPublicConfig {
	if o == nil {
		return nil
	}
	return o.IdentityProviders
}

func (o *PortalConfig) GetImages() *Images {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *PortalConfig) GetInactiveContractCutoffYears() *float64 {
	if o == nil {
		return nil
	}
	return o.InactiveContractCutoffYears
}

func (o *PortalConfig) GetIsDummy() *bool {
	if o == nil {
		return nil
	}
	return o.IsDummy
}

func (o *PortalConfig) GetIsEpilotDomain() *bool {
	if o == nil {
		return nil
	}
	return o.IsEpilotDomain
}

func (o *PortalConfig) GetIsV3Item() *bool {
	if o == nil {
		return nil
	}
	return o.IsV3Item
}

func (o *PortalConfig) GetMeterReadingGracePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.MeterReadingGracePeriod
}

func (o *PortalConfig) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PortalConfig) GetOrgSettings() *OrgSettings {
	if o == nil {
		return nil
	}
	return o.OrgSettings
}

func (o *PortalConfig) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *PortalConfig) GetOrigin() *string {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *PortalConfig) GetPages() map[string]Page {
	if o == nil {
		return nil
	}
	return o.Pages
}

func (o *PortalConfig) GetPortalID() *string {
	if o == nil {
		return nil
	}
	return o.PortalID
}

func (o *PortalConfig) GetPortalSkV3() *string {
	if o == nil {
		return nil
	}
	return o.PortalSkV3
}

func (o *PortalConfig) GetPreventSearchEngineIndexing() *bool {
	if o == nil {
		return nil
	}
	return o.PreventSearchEngineIndexing
}

func (o *PortalConfig) GetRegistrationIdentifiers() []ContractIdentifier {
	if o == nil {
		return nil
	}
	return o.RegistrationIdentifiers
}

func (o *PortalConfig) GetSelfRegistrationSetting() *SelfRegistrationSetting {
	if o == nil {
		return nil
	}
	return o.SelfRegistrationSetting
}

func (o *PortalConfig) GetTriggeredJourneys() []TriggeredJourneys {
	if o == nil {
		return nil
	}
	return o.TriggeredJourneys
}
