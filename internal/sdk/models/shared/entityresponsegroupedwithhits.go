// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

// EntityResponseGroupedWithHitsPagination - Pagination metadata for entities within this group
type EntityResponseGroupedWithHitsPagination struct {
	// Starting offset for entities in this group
	From *float64 `json:"from,omitempty"`
	// Whether there are more entities available in this group beyond the current page
	HasMore *bool `json:"has_more,omitempty"`
	// Number of entities returned for this group
	Size *float64 `json:"size,omitempty"`
	// Total number of entities available in this group
	Total *float64 `json:"total,omitempty"`
}

func (e EntityResponseGroupedWithHitsPagination) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityResponseGroupedWithHitsPagination) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityResponseGroupedWithHitsPagination) GetFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *EntityResponseGroupedWithHitsPagination) GetHasMore() *bool {
	if o == nil {
		return nil
	}
	return o.HasMore
}

func (o *EntityResponseGroupedWithHitsPagination) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *EntityResponseGroupedWithHitsPagination) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

type Groups struct {
	// Total number of entities in this group
	Count *float64 `json:"count,omitempty"`
	// Group title
	Group *string `json:"group,omitempty"`
	// Pagination metadata for entities within this group
	Pagination *EntityResponseGroupedWithHitsPagination `json:"pagination,omitempty"`
	Results    []EntityItem                             `json:"results,omitempty"`
}

func (g Groups) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *Groups) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Groups) GetCount() *float64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *Groups) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *Groups) GetPagination() *EntityResponseGroupedWithHitsPagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

func (o *Groups) GetResults() []EntityItem {
	if o == nil {
		return nil
	}
	return o.Results
}

// GroupsPagination - Group pagination metadata
type GroupsPagination struct {
	// Composite aggregation key for the next page
	AfterKey map[string]string `json:"after_key,omitempty"`
	// Whether there are more groups available
	HasMore *bool `json:"has_more,omitempty"`
}

func (g GroupsPagination) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupsPagination) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GroupsPagination) GetAfterKey() map[string]string {
	if o == nil {
		return nil
	}
	return o.AfterKey
}

func (o *GroupsPagination) GetHasMore() *bool {
	if o == nil {
		return nil
	}
	return o.HasMore
}

// EntityResponseGroupedWithHits - Response for entity search requests, but with groupings
type EntityResponseGroupedWithHits struct {
	Groups []Groups `json:"groups,omitempty"`
	// Group pagination metadata
	GroupsPagination *GroupsPagination `json:"groups_pagination,omitempty"`
	// Number of groups returned in this response
	Hits *float64 `json:"hits,omitempty"`
}

func (e EntityResponseGroupedWithHits) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityResponseGroupedWithHits) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityResponseGroupedWithHits) GetGroups() []Groups {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *EntityResponseGroupedWithHits) GetGroupsPagination() *GroupsPagination {
	if o == nil {
		return nil
	}
	return o.GroupsPagination
}

func (o *EntityResponseGroupedWithHits) GetHits() *float64 {
	if o == nil {
		return nil
	}
	return o.Hits
}
