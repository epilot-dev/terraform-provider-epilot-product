// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type MeterChartWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (m MeterChartWidgetHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterChartWidgetHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *MeterChartWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *MeterChartWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type MeterChartWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (m MeterChartWidgetSubHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterChartWidgetSubHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *MeterChartWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *MeterChartWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type MeterChartWidgetType string

const (
	MeterChartWidgetTypeActionWidget       MeterChartWidgetType = "ACTION_WIDGET"
	MeterChartWidgetTypeContentWidget      MeterChartWidgetType = "CONTENT_WIDGET"
	MeterChartWidgetTypeEntityWidget       MeterChartWidgetType = "ENTITY_WIDGET"
	MeterChartWidgetTypeTeaserWidget       MeterChartWidgetType = "TEASER_WIDGET"
	MeterChartWidgetTypeDocumentWidget     MeterChartWidgetType = "DOCUMENT_WIDGET"
	MeterChartWidgetTypePaymentWidget      MeterChartWidgetType = "PAYMENT_WIDGET"
	MeterChartWidgetTypeMeterReadingWidget MeterChartWidgetType = "METER_READING_WIDGET"
	MeterChartWidgetTypeMeterChartWidget   MeterChartWidgetType = "METER_CHART_WIDGET"
	MeterChartWidgetTypeCampaignWidget     MeterChartWidgetType = "CAMPAIGN_WIDGET"
)

func (e MeterChartWidgetType) ToPointer() *MeterChartWidgetType {
	return &e
}
func (e *MeterChartWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = MeterChartWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeterChartWidgetType: %v", v)
	}
}

type MeterChartWidget struct {
	Headline *MeterChartWidgetHeadline `json:"headline,omitempty"`
	ID       string                    `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                        `json:"listIndex"`
	Schema      *string                      `json:"schema,omitempty"`
	SubHeadline *MeterChartWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        MeterChartWidgetType         `json:"type"`
}

func (m MeterChartWidget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterChartWidget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"id", "listIndex", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *MeterChartWidget) GetHeadline() *MeterChartWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *MeterChartWidget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MeterChartWidget) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *MeterChartWidget) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *MeterChartWidget) GetSubHeadline() *MeterChartWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *MeterChartWidget) GetType() MeterChartWidgetType {
	if o == nil {
		return MeterChartWidgetType("")
	}
	return o.Type
}
