// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type TeaserWidgetLabel struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (t TeaserWidgetLabel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TeaserWidgetLabel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *TeaserWidgetLabel) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *TeaserWidgetLabel) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type TeaserWidgetButton struct {
	Label *TeaserWidgetLabel `json:"label,omitempty"`
	URL   *string            `json:"url,omitempty"`
}

func (t TeaserWidgetButton) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TeaserWidgetButton) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *TeaserWidgetButton) GetLabel() *TeaserWidgetLabel {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *TeaserWidgetButton) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type TeaserWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (t TeaserWidgetHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TeaserWidgetHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *TeaserWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *TeaserWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type TeaserWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (t TeaserWidgetSubHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TeaserWidgetSubHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *TeaserWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *TeaserWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type TeaserWidgetType string

const (
	TeaserWidgetTypeActionWidget       TeaserWidgetType = "ACTION_WIDGET"
	TeaserWidgetTypeContentWidget      TeaserWidgetType = "CONTENT_WIDGET"
	TeaserWidgetTypeEntityWidget       TeaserWidgetType = "ENTITY_WIDGET"
	TeaserWidgetTypeTeaserWidget       TeaserWidgetType = "TEASER_WIDGET"
	TeaserWidgetTypeDocumentWidget     TeaserWidgetType = "DOCUMENT_WIDGET"
	TeaserWidgetTypePaymentWidget      TeaserWidgetType = "PAYMENT_WIDGET"
	TeaserWidgetTypeMeterReadingWidget TeaserWidgetType = "METER_READING_WIDGET"
	TeaserWidgetTypeMeterChartWidget   TeaserWidgetType = "METER_CHART_WIDGET"
	TeaserWidgetTypeCampaignWidget     TeaserWidgetType = "CAMPAIGN_WIDGET"
)

func (e TeaserWidgetType) ToPointer() *TeaserWidgetType {
	return &e
}
func (e *TeaserWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = TeaserWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeaserWidgetType: %v", v)
	}
}

type TeaserWidget struct {
	Button   *TeaserWidgetButton   `json:"button,omitempty"`
	Headline *TeaserWidgetHeadline `json:"headline,omitempty"`
	ID       string                `json:"id"`
	ImageURL *string               `json:"imageUrl,omitempty"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                    `json:"listIndex"`
	SubHeadline *TeaserWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        TeaserWidgetType         `json:"type"`
}

func (t TeaserWidget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TeaserWidget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"id", "listIndex", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *TeaserWidget) GetButton() *TeaserWidgetButton {
	if o == nil {
		return nil
	}
	return o.Button
}

func (o *TeaserWidget) GetHeadline() *TeaserWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *TeaserWidget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TeaserWidget) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *TeaserWidget) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *TeaserWidget) GetSubHeadline() *TeaserWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *TeaserWidget) GetType() TeaserWidgetType {
	if o == nil {
		return TeaserWidgetType("")
	}
	return o.Type
}
