// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

// SaveEntityFileAccessControl - Access control level for the file. Deprecated - all files are private.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type SaveEntityFileAccessControl string

const (
	SaveEntityFileAccessControlPrivate    SaveEntityFileAccessControl = "private"
	SaveEntityFileAccessControlPublicRead SaveEntityFileAccessControl = "public-read"
)

func (e SaveEntityFileAccessControl) ToPointer() *SaveEntityFileAccessControl {
	return &e
}
func (e *SaveEntityFileAccessControl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public-read":
		*e = SaveEntityFileAccessControl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveEntityFileAccessControl: %v", v)
	}
}

type SaveEntityFileS3ref struct {
	// S3 bucket name
	Bucket string `json:"bucket"`
	// S3 key
	Key string `json:"key"`
}

func (o *SaveEntityFileS3ref) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *SaveEntityFileS3ref) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

type Files struct {
	// Access control level for the file. Deprecated - all files are private.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccessControl *SaveEntityFileAccessControl `default:"private" json:"access_control"`
	// File name
	Filename string              `json:"filename"`
	S3ref    SaveEntityFileS3ref `json:"s3ref"`
}

func (f Files) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *Files) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"filename", "s3ref"}); err != nil {
		return err
	}
	return nil
}

func (o *Files) GetAccessControl() *SaveEntityFileAccessControl {
	if o == nil {
		return nil
	}
	return o.AccessControl
}

func (o *Files) GetFilename() string {
	if o == nil {
		return ""
	}
	return o.Filename
}

func (o *Files) GetS3ref() SaveEntityFileS3ref {
	if o == nil {
		return SaveEntityFileS3ref{}
	}
	return o.S3ref
}

type SaveEntityFile struct {
	// Entity ID
	EntityID string `json:"entity_id"`
	// Entity type
	EntityType string  `json:"entity_type"`
	Files      []Files `json:"files"`
}

func (o *SaveEntityFile) GetEntityID() string {
	if o == nil {
		return ""
	}
	return o.EntityID
}

func (o *SaveEntityFile) GetEntityType() string {
	if o == nil {
		return ""
	}
	return o.EntityType
}

func (o *SaveEntityFile) GetFiles() []Files {
	if o == nil {
		return []Files{}
	}
	return o.Files
}
