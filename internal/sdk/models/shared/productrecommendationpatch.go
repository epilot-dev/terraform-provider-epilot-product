// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProductRecommendationPatchSchema string

const (
	ProductRecommendationPatchSchemaProductRecommendation ProductRecommendationPatchSchema = "product_recommendation"
)

func (e ProductRecommendationPatchSchema) ToPointer() *ProductRecommendationPatchSchema {
	return &e
}
func (e *ProductRecommendationPatchSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product_recommendation":
		*e = ProductRecommendationPatchSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductRecommendationPatchSchema: %v", v)
	}
}

// ProductRecommendationPatchType - Type of product recommendation
type ProductRecommendationPatchType string

const (
	ProductRecommendationPatchTypeChange    ProductRecommendationPatchType = "change"
	ProductRecommendationPatchTypeCrossSell ProductRecommendationPatchType = "cross-sell"
	ProductRecommendationPatchTypeUpSell    ProductRecommendationPatchType = "up-sell"
)

func (e ProductRecommendationPatchType) ToPointer() *ProductRecommendationPatchType {
	return &e
}
func (e *ProductRecommendationPatchType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change":
		fallthrough
	case "cross-sell":
		fallthrough
	case "up-sell":
		*e = ProductRecommendationPatchType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductRecommendationPatchType: %v", v)
	}
}

type ProductRecommendationPatch struct {
	// Additional fields that are not part of the schema
	Additional any           `json:"__additional,omitempty"`
	Files      *BaseRelation `json:"_files,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string                          `json:"_manifest,omitempty"`
	Purpose  []string                          `json:"_purpose,omitempty"`
	Schema   *ProductRecommendationPatchSchema `json:"_schema,omitempty"`
	Tags     []string                          `json:"_tags,omitempty"`
	Offers   any                               `json:"offers,omitempty"`
	// Price being used as source
	SourcePrice any `json:"source_price,omitempty"`
	// Product being used as source
	SourceProduct any `json:"source_product,omitempty"`
	// Type of product recommendation
	Type *ProductRecommendationPatchType `json:"type,omitempty"`
}

func (p *ProductRecommendationPatch) GetAdditional() any {
	if p == nil {
		return nil
	}
	return p.Additional
}

func (p *ProductRecommendationPatch) GetFiles() *BaseRelation {
	if p == nil {
		return nil
	}
	return p.Files
}

func (p *ProductRecommendationPatch) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *ProductRecommendationPatch) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *ProductRecommendationPatch) GetSchema() *ProductRecommendationPatchSchema {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *ProductRecommendationPatch) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *ProductRecommendationPatch) GetOffers() any {
	if p == nil {
		return nil
	}
	return p.Offers
}

func (p *ProductRecommendationPatch) GetSourcePrice() any {
	if p == nil {
		return nil
	}
	return p.SourcePrice
}

func (p *ProductRecommendationPatch) GetSourceProduct() any {
	if p == nil {
		return nil
	}
	return p.SourceProduct
}

func (p *ProductRecommendationPatch) GetType() *ProductRecommendationPatchType {
	if p == nil {
		return nil
	}
	return p.Type
}
