// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TaxPatchSchema string

const (
	TaxPatchSchemaTax TaxPatchSchema = "tax"
)

func (e TaxPatchSchema) ToPointer() *TaxPatchSchema {
	return &e
}
func (e *TaxPatchSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tax":
		*e = TaxPatchSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxPatchSchema: %v", v)
	}
}

type TaxPatchType string

const (
	TaxPatchTypeVat    TaxPatchType = "VAT"
	TaxPatchTypeCustom TaxPatchType = "Custom"
)

func (e TaxPatchType) ToPointer() *TaxPatchType {
	return &e
}
func (e *TaxPatchType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VAT":
		fallthrough
	case "Custom":
		*e = TaxPatchType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxPatchType: %v", v)
	}
}

type TaxPatch struct {
	Schema      *TaxPatchSchema `json:"_schema,omitempty"`
	Active      *bool           `json:"active,omitempty"`
	Description *string         `json:"description,omitempty"`
	Rate        *string         `json:"rate,omitempty"`
	Region      *string         `json:"region,omitempty"`
	Type        *TaxPatchType   `json:"type,omitempty"`
}

func (o *TaxPatch) GetSchema() *TaxPatchSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *TaxPatch) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *TaxPatch) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaxPatch) GetRate() *string {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *TaxPatch) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *TaxPatch) GetType() *TaxPatchType {
	if o == nil {
		return nil
	}
	return o.Type
}
