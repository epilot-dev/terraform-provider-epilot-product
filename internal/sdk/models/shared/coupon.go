// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"time"
)

type Schema string

const (
	SchemaCoupon Schema = "coupon"
)

func (e Schema) ToPointer() *Schema {
	return &e
}
func (e *Schema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "coupon":
		*e = Schema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schema: %v", v)
	}
}

// CashbackPeriod - The cashback period, for now it's limited to either 0 months or 12 months
type CashbackPeriod string

const (
	CashbackPeriodZero   CashbackPeriod = "0"
	CashbackPeriodTwelve CashbackPeriod = "12"
)

func (e CashbackPeriod) ToPointer() *CashbackPeriod {
	return &e
}
func (e *CashbackPeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "12":
		*e = CashbackPeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CashbackPeriod: %v", v)
	}
}

type Category string

const (
	CategoryDiscount Category = "discount"
	CategoryCashback Category = "cashback"
)

func (e Category) ToPointer() *Category {
	return &e
}
func (e *Category) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "discount":
		fallthrough
	case "cashback":
		*e = Category(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Category: %v", v)
	}
}

type Type string

const (
	TypeFixed      Type = "fixed"
	TypePercentage Type = "percentage"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "percentage":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Coupon struct {
	// Additional fields that are not part of the schema
	Additional any           `json:"__additional,omitempty"`
	CreatedAt  *time.Time    `json:"_created_at,omitempty"`
	Files      *BaseRelation `json:"_files,omitempty"`
	ID         *string       `json:"_id,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// Organization Id the entity belongs to
	Org       string     `json:"_org"`
	Purpose   []string   `json:"_purpose,omitempty"`
	Schema    Schema     `json:"_schema"`
	Tags      []string   `json:"_tags,omitempty"`
	Title     *string    `json:"_title,omitempty"`
	UpdatedAt *time.Time `json:"_updated_at,omitempty"`
	Active    bool       `json:"active"`
	// The cashback period, for now it's limited to either 0 months or 12 months
	CashbackPeriod *CashbackPeriod `json:"cashback_period,omitempty"`
	Category       Category        `json:"category"`
	Description    *string         `json:"description,omitempty"`
	// Use if type is set to fixed. The fixed amount in cents to be discounted, represented as a whole integer.
	FixedValue *float64 `json:"fixed_value,omitempty"`
	// Use if type is set to fixed. Three-letter ISO currency code, in lowercase.
	FixedValueCurrency *string `json:"fixed_value_currency,omitempty"`
	// Use if type is set to fixed. The unit amount in cents to be discounted, represented as a decimal string with at most 12 decimal places.
	FixedValueDecimal *string `json:"fixed_value_decimal,omitempty"`
	Name              string  `json:"name"`
	// Use if type is set to percentage. The percentage to be discounted, represented as a whole integer.
	PercentageValue *string       `json:"percentage_value,omitempty"`
	Prices          *BaseRelation `json:"prices,omitempty"`
	// Map of ids of promo codes with their usage count
	PromoCodeUsage any         `json:"promo_code_usage,omitempty"`
	PromoCodes     []PromoCode `json:"promo_codes,omitempty"`
	// Whether the coupon requires a promo code to be applied
	RequiresPromoCode *bool `json:"requires_promo_code,omitempty"`
	Type              Type  `json:"type"`
}

func (c Coupon) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Coupon) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"_org", "_schema", "active", "category", "name", "type"}); err != nil {
		return err
	}
	return nil
}

func (c *Coupon) GetAdditional() any {
	if c == nil {
		return nil
	}
	return c.Additional
}

func (c *Coupon) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *Coupon) GetFiles() *BaseRelation {
	if c == nil {
		return nil
	}
	return c.Files
}

func (c *Coupon) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *Coupon) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *Coupon) GetOrg() string {
	if c == nil {
		return ""
	}
	return c.Org
}

func (c *Coupon) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *Coupon) GetSchema() Schema {
	if c == nil {
		return Schema("")
	}
	return c.Schema
}

func (c *Coupon) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *Coupon) GetTitle() *string {
	if c == nil {
		return nil
	}
	return c.Title
}

func (c *Coupon) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *Coupon) GetActive() bool {
	if c == nil {
		return false
	}
	return c.Active
}

func (c *Coupon) GetCashbackPeriod() *CashbackPeriod {
	if c == nil {
		return nil
	}
	return c.CashbackPeriod
}

func (c *Coupon) GetCategory() Category {
	if c == nil {
		return Category("")
	}
	return c.Category
}

func (c *Coupon) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *Coupon) GetFixedValue() *float64 {
	if c == nil {
		return nil
	}
	return c.FixedValue
}

func (c *Coupon) GetFixedValueCurrency() *string {
	if c == nil {
		return nil
	}
	return c.FixedValueCurrency
}

func (c *Coupon) GetFixedValueDecimal() *string {
	if c == nil {
		return nil
	}
	return c.FixedValueDecimal
}

func (c *Coupon) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *Coupon) GetPercentageValue() *string {
	if c == nil {
		return nil
	}
	return c.PercentageValue
}

func (c *Coupon) GetPrices() *BaseRelation {
	if c == nil {
		return nil
	}
	return c.Prices
}

func (c *Coupon) GetPromoCodeUsage() any {
	if c == nil {
		return nil
	}
	return c.PromoCodeUsage
}

func (c *Coupon) GetPromoCodes() []PromoCode {
	if c == nil {
		return nil
	}
	return c.PromoCodes
}

func (c *Coupon) GetRequiresPromoCode() *bool {
	if c == nil {
		return nil
	}
	return c.RequiresPromoCode
}

func (c *Coupon) GetType() Type {
	if c == nil {
		return Type("")
	}
	return c.Type
}
