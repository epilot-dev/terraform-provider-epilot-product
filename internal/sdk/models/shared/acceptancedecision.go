// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Decision - Acceptance decision
type Decision string

const (
	DecisionAccept  Decision = "accept"
	DecisionDecline Decision = "decline"
)

func (e Decision) ToPointer() *Decision {
	return &e
}
func (e *Decision) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "decline":
		*e = Decision(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Decision: %v", v)
	}
}

type AcceptanceDecision struct {
	// Acceptance decision
	Decision Decision `json:"decision"`
}

func (o *AcceptanceDecision) GetDecision() Decision {
	if o == nil {
		return Decision("")
	}
	return o.Decision
}
