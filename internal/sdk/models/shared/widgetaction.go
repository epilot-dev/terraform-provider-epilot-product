// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type Label struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (l Label) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Label) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Label) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *Label) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type WidgetActionRules struct {
	Attribute      string `json:"attribute"`
	AttributeValue string `json:"attribute_value"`
	Entity         string `json:"entity"`
}

func (w WidgetActionRules) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WidgetActionRules) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"attribute", "attribute_value", "entity"}); err != nil {
		return err
	}
	return nil
}

func (o *WidgetActionRules) GetAttribute() string {
	if o == nil {
		return ""
	}
	return o.Attribute
}

func (o *WidgetActionRules) GetAttributeValue() string {
	if o == nil {
		return ""
	}
	return o.AttributeValue
}

func (o *WidgetActionRules) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

type WidgetActionType string

const (
	WidgetActionTypeLink    WidgetActionType = "link"
	WidgetActionTypeJourney WidgetActionType = "journey"
)

func (e WidgetActionType) ToPointer() *WidgetActionType {
	return &e
}
func (e *WidgetActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		fallthrough
	case "journey":
		*e = WidgetActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WidgetActionType: %v", v)
	}
}

type WidgetAction struct {
	ID    string              `json:"_id"`
	Label Label               `json:"label"`
	Rules []WidgetActionRules `json:"rules,omitempty"`
	Type  WidgetActionType    `json:"type"`
	URL   string              `json:"url"`
}

func (w WidgetAction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WidgetAction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"_id", "label", "type", "url"}); err != nil {
		return err
	}
	return nil
}

func (o *WidgetAction) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WidgetAction) GetLabel() Label {
	if o == nil {
		return Label{}
	}
	return o.Label
}

func (o *WidgetAction) GetRules() []WidgetActionRules {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *WidgetAction) GetType() WidgetActionType {
	if o == nil {
		return WidgetActionType("")
	}
	return o.Type
}

func (o *WidgetAction) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}
