// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"time"
)

type PriceSchema string

const (
	PriceSchemaPrice PriceSchema = "price"
)

func (e PriceSchema) ToPointer() *PriceSchema {
	return &e
}
func (e *PriceSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "price":
		*e = PriceSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PriceSchema: %v", v)
	}
}

// BillingDurationUnit - The billing period duration unit
type BillingDurationUnit string

const (
	BillingDurationUnitWeeks  BillingDurationUnit = "weeks"
	BillingDurationUnitMonths BillingDurationUnit = "months"
	BillingDurationUnitYears  BillingDurationUnit = "years"
)

func (e BillingDurationUnit) ToPointer() *BillingDurationUnit {
	return &e
}
func (e *BillingDurationUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = BillingDurationUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingDurationUnit: %v", v)
	}
}

// NoticeTimeUnit - The notice period duration unit
type NoticeTimeUnit string

const (
	NoticeTimeUnitWeeks  NoticeTimeUnit = "weeks"
	NoticeTimeUnitMonths NoticeTimeUnit = "months"
	NoticeTimeUnitYears  NoticeTimeUnit = "years"
)

func (e NoticeTimeUnit) ToPointer() *NoticeTimeUnit {
	return &e
}
func (e *NoticeTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = NoticeTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NoticeTimeUnit: %v", v)
	}
}

// PriceComponents - A set of [price](/api/pricing#tag/simple_price_schema) components that define the composite price.
type PriceComponents struct {
	DollarRelation []PriceComponentRelation `json:"$relation,omitempty"`
}

func (p *PriceComponents) GetDollarRelation() []PriceComponentRelation {
	if p == nil {
		return nil
	}
	return p.DollarRelation
}

// PriceDisplayInJourneys - Defines the way the price amount is display in epilot journeys.
type PriceDisplayInJourneys string

const (
	PriceDisplayInJourneysShowPrice           PriceDisplayInJourneys = "show_price"
	PriceDisplayInJourneysShowAsStartingPrice PriceDisplayInJourneys = "show_as_starting_price"
	PriceDisplayInJourneysShowAsOnRequest     PriceDisplayInJourneys = "show_as_on_request"
)

func (e PriceDisplayInJourneys) ToPointer() *PriceDisplayInJourneys {
	return &e
}
func (e *PriceDisplayInJourneys) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "show_price":
		fallthrough
	case "show_as_starting_price":
		fallthrough
	case "show_as_on_request":
		*e = PriceDisplayInJourneys(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PriceDisplayInJourneys: %v", v)
	}
}

// PricingModel - Describes how to compute the price per period. Either `per_unit`, `tiered_graduated` or `tiered_volume`.
// - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
// - `tiered_graduated` indicates that the unit pricing will be computed using tiers attribute. The customer pays the price per unit in every range their purchase rises through.
// - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unit price for all purchased units.
// - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.
type PricingModel string

const (
	PricingModelPerUnit         PricingModel = "per_unit"
	PricingModelTieredVolume    PricingModel = "tiered_volume"
	PricingModelTieredGraduated PricingModel = "tiered_graduated"
	PricingModelTieredFlatfee   PricingModel = "tiered_flatfee"
)

func (e PricingModel) ToPointer() *PricingModel {
	return &e
}
func (e *PricingModel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "per_unit":
		fallthrough
	case "tiered_volume":
		fallthrough
	case "tiered_graduated":
		fallthrough
	case "tiered_flatfee":
		*e = PricingModel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PricingModel: %v", v)
	}
}

// RenewalDurationUnit - The renewal period duration unit
type RenewalDurationUnit string

const (
	RenewalDurationUnitWeeks  RenewalDurationUnit = "weeks"
	RenewalDurationUnitMonths RenewalDurationUnit = "months"
	RenewalDurationUnitYears  RenewalDurationUnit = "years"
)

func (e RenewalDurationUnit) ToPointer() *RenewalDurationUnit {
	return &e
}
func (e *RenewalDurationUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = RenewalDurationUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RenewalDurationUnit: %v", v)
	}
}

// TerminationTimeUnit - The termination period duration unit
type TerminationTimeUnit string

const (
	TerminationTimeUnitWeeks  TerminationTimeUnit = "weeks"
	TerminationTimeUnitMonths TerminationTimeUnit = "months"
	TerminationTimeUnitYears  TerminationTimeUnit = "years"
)

func (e TerminationTimeUnit) ToPointer() *TerminationTimeUnit {
	return &e
}
func (e *TerminationTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = TerminationTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TerminationTimeUnit: %v", v)
	}
}

// PriceType - One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
type PriceType string

const (
	PriceTypeOneTime   PriceType = "one_time"
	PriceTypeRecurring PriceType = "recurring"
)

func (e PriceType) ToPointer() *PriceType {
	return &e
}
func (e *PriceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "one_time":
		fallthrough
	case "recurring":
		*e = PriceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PriceType: %v", v)
	}
}

type Price struct {
	// Additional fields that are not part of the schema
	Additional any           `json:"__additional,omitempty"`
	CreatedAt  *time.Time    `json:"_created_at,omitempty"`
	Files      *BaseRelation `json:"_files,omitempty"`
	ID         *string       `json:"_id,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// Organization Id the entity belongs to
	Org       string      `json:"_org"`
	Purpose   []string    `json:"_purpose,omitempty"`
	Schema    PriceSchema `json:"_schema"`
	Tags      []string    `json:"_tags,omitempty"`
	Title     *string     `json:"_title,omitempty"`
	UpdatedAt *time.Time  `json:"_updated_at,omitempty"`
	// Whether the price can be used for new purchases.
	Active bool `json:"active"`
	// The billing period duration
	BillingDurationAmount *float64 `json:"billing_duration_amount,omitempty"`
	// The billing period duration unit
	BillingDurationUnit *BillingDurationUnit `json:"billing_duration_unit,omitempty"`
	// A brief description of the price.
	Description *string `json:"description,omitempty"`
	// The flag for prices that contain price components.
	IsCompositePrice *bool `json:"is_composite_price,omitempty"`
	// Specifies whether the price is considered `inclusive` of taxes or not.
	IsTaxInclusive *bool `default:"false" json:"is_tax_inclusive"`
	// A detailed description of the price. This is shown on the order document and order table. Multi-line supported.
	LongDescription *string `json:"long_description,omitempty"`
	// The notice period duration
	NoticeTimeAmount *float64 `json:"notice_time_amount,omitempty"`
	// The notice period duration unit
	NoticeTimeUnit *NoticeTimeUnit `json:"notice_time_unit,omitempty"`
	// A set of [price](/api/pricing#tag/simple_price_schema) components that define the composite price.
	PriceComponents *PriceComponents `json:"price_components,omitempty"`
	// Defines the way the price amount is display in epilot journeys.
	PriceDisplayInJourneys *PriceDisplayInJourneys `json:"price_display_in_journeys,omitempty"`
	// Describes how to compute the price per period. Either `per_unit`, `tiered_graduated` or `tiered_volume`.
	// - `per_unit` indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity
	// - `tiered_graduated` indicates that the unit pricing will be computed using tiers attribute. The customer pays the price per unit in every range their purchase rises through.
	// - `tiered_volume` indicates that the unit pricing will be computed using tiers attribute. The customer pays the same unit price for all purchased units.
	// - `tiered_flatfee` While similar to tiered_volume, tiered flat fee charges for the same price (flat) for the entire range instead using the unit price to multiply the quantity.
	//
	PricingModel *PricingModel `default:"per_unit" json:"pricing_model"`
	// The renewal period duration
	RenewalDurationAmount *float64 `json:"renewal_duration_amount,omitempty"`
	// The renewal period duration unit
	RenewalDurationUnit *RenewalDurationUnit `json:"renewal_duration_unit,omitempty"`
	Tax                 any                  `json:"tax,omitempty"`
	// The termination period duration
	TerminationTimeAmount *float64 `json:"termination_time_amount,omitempty"`
	// The termination period duration unit
	TerminationTimeUnit *TerminationTimeUnit `json:"termination_time_unit,omitempty"`
	// Defines an array of tiers. Each tier has an upper bound, an unit amount and a flat fee.
	//
	Tiers []PriceTier `json:"tiers,omitempty"`
	// One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
	Type *PriceType `default:"one_time" json:"type"`
	// The unit of measurement used for display purposes and possibly for calculations when the price is variable.
	Unit *string `json:"unit,omitempty"`
	// The unit amount in cents to be charged, represented as a whole integer if possible.
	UnitAmount *float64 `json:"unit_amount,omitempty"`
	// Three-letter ISO currency code, in lowercase.
	UnitAmountCurrency *string `json:"unit_amount_currency,omitempty"`
	// The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places.
	UnitAmountDecimal *string `json:"unit_amount_decimal,omitempty"`
	// The flag for prices that can be influenced by external variables such as user input.
	VariablePrice *bool `default:"false" json:"variable_price"`
}

func (p Price) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Price) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"_org", "_schema", "active"}); err != nil {
		return err
	}
	return nil
}

func (p *Price) GetAdditional() any {
	if p == nil {
		return nil
	}
	return p.Additional
}

func (p *Price) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *Price) GetFiles() *BaseRelation {
	if p == nil {
		return nil
	}
	return p.Files
}

func (p *Price) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *Price) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *Price) GetOrg() string {
	if p == nil {
		return ""
	}
	return p.Org
}

func (p *Price) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *Price) GetSchema() PriceSchema {
	if p == nil {
		return PriceSchema("")
	}
	return p.Schema
}

func (p *Price) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *Price) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *Price) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *Price) GetActive() bool {
	if p == nil {
		return false
	}
	return p.Active
}

func (p *Price) GetBillingDurationAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.BillingDurationAmount
}

func (p *Price) GetBillingDurationUnit() *BillingDurationUnit {
	if p == nil {
		return nil
	}
	return p.BillingDurationUnit
}

func (p *Price) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *Price) GetIsCompositePrice() *bool {
	if p == nil {
		return nil
	}
	return p.IsCompositePrice
}

func (p *Price) GetIsTaxInclusive() *bool {
	if p == nil {
		return nil
	}
	return p.IsTaxInclusive
}

func (p *Price) GetLongDescription() *string {
	if p == nil {
		return nil
	}
	return p.LongDescription
}

func (p *Price) GetNoticeTimeAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.NoticeTimeAmount
}

func (p *Price) GetNoticeTimeUnit() *NoticeTimeUnit {
	if p == nil {
		return nil
	}
	return p.NoticeTimeUnit
}

func (p *Price) GetPriceComponents() *PriceComponents {
	if p == nil {
		return nil
	}
	return p.PriceComponents
}

func (p *Price) GetPriceDisplayInJourneys() *PriceDisplayInJourneys {
	if p == nil {
		return nil
	}
	return p.PriceDisplayInJourneys
}

func (p *Price) GetPricingModel() *PricingModel {
	if p == nil {
		return nil
	}
	return p.PricingModel
}

func (p *Price) GetRenewalDurationAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.RenewalDurationAmount
}

func (p *Price) GetRenewalDurationUnit() *RenewalDurationUnit {
	if p == nil {
		return nil
	}
	return p.RenewalDurationUnit
}

func (p *Price) GetTax() any {
	if p == nil {
		return nil
	}
	return p.Tax
}

func (p *Price) GetTerminationTimeAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.TerminationTimeAmount
}

func (p *Price) GetTerminationTimeUnit() *TerminationTimeUnit {
	if p == nil {
		return nil
	}
	return p.TerminationTimeUnit
}

func (p *Price) GetTiers() []PriceTier {
	if p == nil {
		return nil
	}
	return p.Tiers
}

func (p *Price) GetType() *PriceType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *Price) GetUnit() *string {
	if p == nil {
		return nil
	}
	return p.Unit
}

func (p *Price) GetUnitAmount() *float64 {
	if p == nil {
		return nil
	}
	return p.UnitAmount
}

func (p *Price) GetUnitAmountCurrency() *string {
	if p == nil {
		return nil
	}
	return p.UnitAmountCurrency
}

func (p *Price) GetUnitAmountDecimal() *string {
	if p == nil {
		return nil
	}
	return p.UnitAmountDecimal
}

func (p *Price) GetVariablePrice() *bool {
	if p == nil {
		return nil
	}
	return p.VariablePrice
}
