// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type EntityWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (e EntityWidgetHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityWidgetHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *EntityWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type EntityWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (e EntityWidgetSubHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityWidgetSubHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *EntityWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *EntityWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type EntityWidgetType string

const (
	EntityWidgetTypeActionWidget       EntityWidgetType = "ACTION_WIDGET"
	EntityWidgetTypeContentWidget      EntityWidgetType = "CONTENT_WIDGET"
	EntityWidgetTypeEntityWidget       EntityWidgetType = "ENTITY_WIDGET"
	EntityWidgetTypeTeaserWidget       EntityWidgetType = "TEASER_WIDGET"
	EntityWidgetTypeDocumentWidget     EntityWidgetType = "DOCUMENT_WIDGET"
	EntityWidgetTypePaymentWidget      EntityWidgetType = "PAYMENT_WIDGET"
	EntityWidgetTypeMeterReadingWidget EntityWidgetType = "METER_READING_WIDGET"
	EntityWidgetTypeMeterChartWidget   EntityWidgetType = "METER_CHART_WIDGET"
	EntityWidgetTypeCampaignWidget     EntityWidgetType = "CAMPAIGN_WIDGET"
)

func (e EntityWidgetType) ToPointer() *EntityWidgetType {
	return &e
}
func (e *EntityWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = EntityWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityWidgetType: %v", v)
	}
}

type EntityWidget struct {
	Headline *EntityWidgetHeadline `json:"headline,omitempty"`
	ID       string                `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                    `json:"listIndex"`
	Schema      *string                  `json:"schema,omitempty"`
	SubHeadline *EntityWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        EntityWidgetType         `json:"type"`
}

func (e EntityWidget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityWidget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"id", "listIndex", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *EntityWidget) GetHeadline() *EntityWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *EntityWidget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntityWidget) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *EntityWidget) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *EntityWidget) GetSubHeadline() *EntityWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *EntityWidget) GetType() EntityWidgetType {
	if o == nil {
		return EntityWidgetType("")
	}
	return o.Type
}
