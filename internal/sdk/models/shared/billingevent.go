// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/types"
	"time"
)

type SchemasDollarRelation struct {
	// Entity ID for the related contract.
	EntityID *string `json:"entity_id,omitempty"`
}

func (s SchemasDollarRelation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasDollarRelation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *SchemasDollarRelation) GetEntityID() *string {
	if o == nil {
		return nil
	}
	return o.EntityID
}

type SchemasContract struct {
	DollarRelation []SchemasDollarRelation `json:"$relation,omitempty"`
}

func (s SchemasContract) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasContract) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *SchemasContract) GetDollarRelation() []SchemasDollarRelation {
	if o == nil {
		return nil
	}
	return o.DollarRelation
}

// SchemasReimbursementEventType - Type of the billing event.
type SchemasReimbursementEventType string

const (
	SchemasReimbursementEventTypeReimbursement SchemasReimbursementEventType = "reimbursement"
)

func (e SchemasReimbursementEventType) ToPointer() *SchemasReimbursementEventType {
	return &e
}
func (e *SchemasReimbursementEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reimbursement":
		*e = SchemasReimbursementEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasReimbursementEventType: %v", v)
	}
}

// ReimbursementEventSchemas - An entity that describes a reimbursement billing event.
type ReimbursementEventSchemas struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Creation timestamp of the entity
	CreatedAt time.Time `json:"_created_at"`
	// Entity ID
	ID string `json:"_id"`
	// Organization ID the entity belongs to
	Org string `json:"_org"`
	// Array of entity tags
	Tags []string `json:"_tags,omitempty"`
	// Title of the entity
	Title string `json:"_title"`
	// Last update timestamp of the entity
	UpdatedAt time.Time `json:"_updated_at"`
	// Amount to be paid in cents i.e. precision 2
	BillingAmount *int64 `json:"billing_amount,omitempty"`
	// Amount to be paid in cents in decimal string representation
	BillingAmountDecimal *string `json:"billing_amount_decimal,omitempty"`
	// Currency code in ISO 4217 format
	BillingCurrency *string         `json:"billing_currency,omitempty"`
	Contract        SchemasContract `json:"contract"`
	// Date on which the installment is due.
	DueDate *types.Date `json:"due_date,omitempty"`
	// Unique identifier for event, used to reference the event to a 3rd party resource such as a SAP Installment.
	ExternalID *string `json:"external_id,omitempty"`
	// Date on which the customer is reimbursed.
	PaidDate *types.Date `json:"paid_date,omitempty"`
	// Type of the billing event.
	Type SchemasReimbursementEventType `json:"type"`
}

func (r ReimbursementEventSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReimbursementEventSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"_created_at", "_id", "_org", "_title", "_updated_at", "contract", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *ReimbursementEventSchemas) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *ReimbursementEventSchemas) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ReimbursementEventSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReimbursementEventSchemas) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *ReimbursementEventSchemas) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ReimbursementEventSchemas) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *ReimbursementEventSchemas) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ReimbursementEventSchemas) GetBillingAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.BillingAmount
}

func (o *ReimbursementEventSchemas) GetBillingAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.BillingAmountDecimal
}

func (o *ReimbursementEventSchemas) GetBillingCurrency() *string {
	if o == nil {
		return nil
	}
	return o.BillingCurrency
}

func (o *ReimbursementEventSchemas) GetContract() SchemasContract {
	if o == nil {
		return SchemasContract{}
	}
	return o.Contract
}

func (o *ReimbursementEventSchemas) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *ReimbursementEventSchemas) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *ReimbursementEventSchemas) GetPaidDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.PaidDate
}

func (o *ReimbursementEventSchemas) GetType() SchemasReimbursementEventType {
	if o == nil {
		return SchemasReimbursementEventType("")
	}
	return o.Type
}

type DollarRelation struct {
	// Entity ID for the related contract.
	EntityID *string `json:"entity_id,omitempty"`
}

func (d DollarRelation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DollarRelation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *DollarRelation) GetEntityID() *string {
	if o == nil {
		return nil
	}
	return o.EntityID
}

type SchemasInstallmentEventContract struct {
	DollarRelation []DollarRelation `json:"$relation,omitempty"`
}

func (s SchemasInstallmentEventContract) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SchemasInstallmentEventContract) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *SchemasInstallmentEventContract) GetDollarRelation() []DollarRelation {
	if o == nil {
		return nil
	}
	return o.DollarRelation
}

// SchemasInstallmentEventType - Type of the billing event.
type SchemasInstallmentEventType string

const (
	SchemasInstallmentEventTypeInstallment SchemasInstallmentEventType = "installment"
)

func (e SchemasInstallmentEventType) ToPointer() *SchemasInstallmentEventType {
	return &e
}
func (e *SchemasInstallmentEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "installment":
		*e = SchemasInstallmentEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasInstallmentEventType: %v", v)
	}
}

// InstallmentEventSchemas - An entity that describes an installment billing event.
type InstallmentEventSchemas struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Creation timestamp of the entity
	CreatedAt time.Time `json:"_created_at"`
	// Entity ID
	ID string `json:"_id"`
	// Organization ID the entity belongs to
	Org string `json:"_org"`
	// Array of entity tags
	Tags []string `json:"_tags,omitempty"`
	// Title of the entity
	Title string `json:"_title"`
	// Last update timestamp of the entity
	UpdatedAt time.Time `json:"_updated_at"`
	// Amount to be paid in cents i.e. precision 2
	BillingAmount *int64 `json:"billing_amount,omitempty"`
	// Amount to be paid in cents in decimal string representation
	BillingAmountDecimal *string `json:"billing_amount_decimal,omitempty"`
	// Currency code in ISO 4217 format
	BillingCurrency *string                         `json:"billing_currency,omitempty"`
	Contract        SchemasInstallmentEventContract `json:"contract"`
	// Date on which the installment is due.
	DueDate types.Date `json:"due_date"`
	// Unique identifier for event, used to reference the event to a 3rd party resource such as a SAP Installment.
	ExternalID *string `json:"external_id,omitempty"`
	// Date on which the installment is paid by the customer.
	PaidDate *types.Date `json:"paid_date,omitempty"`
	// Type of the billing event.
	Type SchemasInstallmentEventType `json:"type"`
}

func (i InstallmentEventSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InstallmentEventSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"_created_at", "_id", "_org", "_title", "_updated_at", "contract", "due_date", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *InstallmentEventSchemas) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *InstallmentEventSchemas) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *InstallmentEventSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InstallmentEventSchemas) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *InstallmentEventSchemas) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *InstallmentEventSchemas) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *InstallmentEventSchemas) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *InstallmentEventSchemas) GetBillingAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.BillingAmount
}

func (o *InstallmentEventSchemas) GetBillingAmountDecimal() *string {
	if o == nil {
		return nil
	}
	return o.BillingAmountDecimal
}

func (o *InstallmentEventSchemas) GetBillingCurrency() *string {
	if o == nil {
		return nil
	}
	return o.BillingCurrency
}

func (o *InstallmentEventSchemas) GetContract() SchemasInstallmentEventContract {
	if o == nil {
		return SchemasInstallmentEventContract{}
	}
	return o.Contract
}

func (o *InstallmentEventSchemas) GetDueDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DueDate
}

func (o *InstallmentEventSchemas) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *InstallmentEventSchemas) GetPaidDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.PaidDate
}

func (o *InstallmentEventSchemas) GetType() SchemasInstallmentEventType {
	if o == nil {
		return SchemasInstallmentEventType("")
	}
	return o.Type
}

type BillingEventType string

const (
	BillingEventTypeInstallmentEventSchemas   BillingEventType = "InstallmentEvent_Schemas"
	BillingEventTypeReimbursementEventSchemas BillingEventType = "ReimbursementEvent_Schemas"
)

// BillingEvent - An entity that describes a billing event such as a future installment or a reimbursement back to the customer.
type BillingEvent struct {
	InstallmentEventSchemas   *InstallmentEventSchemas   `queryParam:"inline" name:"BillingEvent"`
	ReimbursementEventSchemas *ReimbursementEventSchemas `queryParam:"inline" name:"BillingEvent"`

	Type BillingEventType
}

func CreateBillingEventInstallmentEventSchemas(installmentEventSchemas InstallmentEventSchemas) BillingEvent {
	typ := BillingEventTypeInstallmentEventSchemas

	return BillingEvent{
		InstallmentEventSchemas: &installmentEventSchemas,
		Type:                    typ,
	}
}

func CreateBillingEventReimbursementEventSchemas(reimbursementEventSchemas ReimbursementEventSchemas) BillingEvent {
	typ := BillingEventTypeReimbursementEventSchemas

	return BillingEvent{
		ReimbursementEventSchemas: &reimbursementEventSchemas,
		Type:                      typ,
	}
}

func (u *BillingEvent) UnmarshalJSON(data []byte) error {

	var installmentEventSchemas InstallmentEventSchemas = InstallmentEventSchemas{}
	if err := utils.UnmarshalJSON(data, &installmentEventSchemas, "", true, nil); err == nil {
		u.InstallmentEventSchemas = &installmentEventSchemas
		u.Type = BillingEventTypeInstallmentEventSchemas
		return nil
	}

	var reimbursementEventSchemas ReimbursementEventSchemas = ReimbursementEventSchemas{}
	if err := utils.UnmarshalJSON(data, &reimbursementEventSchemas, "", true, nil); err == nil {
		u.ReimbursementEventSchemas = &reimbursementEventSchemas
		u.Type = BillingEventTypeReimbursementEventSchemas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BillingEvent", string(data))
}

func (u BillingEvent) MarshalJSON() ([]byte, error) {
	if u.InstallmentEventSchemas != nil {
		return utils.MarshalJSON(u.InstallmentEventSchemas, "", true)
	}

	if u.ReimbursementEventSchemas != nil {
		return utils.MarshalJSON(u.ReimbursementEventSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type BillingEvent: all fields are null")
}
