// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CouponCreateSchema string

const (
	CouponCreateSchemaCoupon CouponCreateSchema = "coupon"
)

func (e CouponCreateSchema) ToPointer() *CouponCreateSchema {
	return &e
}
func (e *CouponCreateSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "coupon":
		*e = CouponCreateSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponCreateSchema: %v", v)
	}
}

// CouponCreateCashbackPeriod - The cashback period, for now it's limited to either 0 months or 12 months
type CouponCreateCashbackPeriod string

const (
	CouponCreateCashbackPeriodZero   CouponCreateCashbackPeriod = "0"
	CouponCreateCashbackPeriodTwelve CouponCreateCashbackPeriod = "12"
)

func (e CouponCreateCashbackPeriod) ToPointer() *CouponCreateCashbackPeriod {
	return &e
}
func (e *CouponCreateCashbackPeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "12":
		*e = CouponCreateCashbackPeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponCreateCashbackPeriod: %v", v)
	}
}

type CouponCreateCategory string

const (
	CouponCreateCategoryDiscount CouponCreateCategory = "discount"
	CouponCreateCategoryCashback CouponCreateCategory = "cashback"
)

func (e CouponCreateCategory) ToPointer() *CouponCreateCategory {
	return &e
}
func (e *CouponCreateCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "discount":
		fallthrough
	case "cashback":
		*e = CouponCreateCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponCreateCategory: %v", v)
	}
}

type CouponCreateType string

const (
	CouponCreateTypeFixed      CouponCreateType = "fixed"
	CouponCreateTypePercentage CouponCreateType = "percentage"
)

func (e CouponCreateType) ToPointer() *CouponCreateType {
	return &e
}
func (e *CouponCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "percentage":
		*e = CouponCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponCreateType: %v", v)
	}
}

type CouponCreate struct {
	// Additional fields that are not part of the schema
	Additional any           `json:"__additional,omitempty"`
	Files      *BaseRelation `json:"_files,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string            `json:"_manifest,omitempty"`
	Purpose  []string            `json:"_purpose,omitempty"`
	Schema   *CouponCreateSchema `json:"_schema,omitempty"`
	Tags     []string            `json:"_tags,omitempty"`
	Active   bool                `json:"active"`
	// The cashback period, for now it's limited to either 0 months or 12 months
	CashbackPeriod *CouponCreateCashbackPeriod `json:"cashback_period,omitempty"`
	Category       CouponCreateCategory        `json:"category"`
	Description    *string                     `json:"description,omitempty"`
	// Use if type is set to fixed. The fixed amount in cents to be discounted, represented as a whole integer.
	FixedValue *float64 `json:"fixed_value,omitempty"`
	// Use if type is set to fixed. Three-letter ISO currency code, in lowercase.
	FixedValueCurrency *string `json:"fixed_value_currency,omitempty"`
	// Use if type is set to fixed. The unit amount in cents to be discounted, represented as a decimal string with at most 12 decimal places.
	FixedValueDecimal *string `json:"fixed_value_decimal,omitempty"`
	Name              string  `json:"name"`
	// Use if type is set to percentage. The percentage to be discounted, represented as a whole integer.
	PercentageValue *string       `json:"percentage_value,omitempty"`
	Prices          *BaseRelation `json:"prices,omitempty"`
	// Map of ids of promo codes with their usage count
	PromoCodeUsage any         `json:"promo_code_usage,omitempty"`
	PromoCodes     []PromoCode `json:"promo_codes,omitempty"`
	// Whether the coupon requires a promo code to be applied
	RequiresPromoCode *bool            `json:"requires_promo_code,omitempty"`
	Type              CouponCreateType `json:"type"`
}

func (c *CouponCreate) GetAdditional() any {
	if c == nil {
		return nil
	}
	return c.Additional
}

func (c *CouponCreate) GetFiles() *BaseRelation {
	if c == nil {
		return nil
	}
	return c.Files
}

func (c *CouponCreate) GetManifest() []string {
	if c == nil {
		return nil
	}
	return c.Manifest
}

func (c *CouponCreate) GetPurpose() []string {
	if c == nil {
		return nil
	}
	return c.Purpose
}

func (c *CouponCreate) GetSchema() *CouponCreateSchema {
	if c == nil {
		return nil
	}
	return c.Schema
}

func (c *CouponCreate) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CouponCreate) GetActive() bool {
	if c == nil {
		return false
	}
	return c.Active
}

func (c *CouponCreate) GetCashbackPeriod() *CouponCreateCashbackPeriod {
	if c == nil {
		return nil
	}
	return c.CashbackPeriod
}

func (c *CouponCreate) GetCategory() CouponCreateCategory {
	if c == nil {
		return CouponCreateCategory("")
	}
	return c.Category
}

func (c *CouponCreate) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CouponCreate) GetFixedValue() *float64 {
	if c == nil {
		return nil
	}
	return c.FixedValue
}

func (c *CouponCreate) GetFixedValueCurrency() *string {
	if c == nil {
		return nil
	}
	return c.FixedValueCurrency
}

func (c *CouponCreate) GetFixedValueDecimal() *string {
	if c == nil {
		return nil
	}
	return c.FixedValueDecimal
}

func (c *CouponCreate) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CouponCreate) GetPercentageValue() *string {
	if c == nil {
		return nil
	}
	return c.PercentageValue
}

func (c *CouponCreate) GetPrices() *BaseRelation {
	if c == nil {
		return nil
	}
	return c.Prices
}

func (c *CouponCreate) GetPromoCodeUsage() any {
	if c == nil {
		return nil
	}
	return c.PromoCodeUsage
}

func (c *CouponCreate) GetPromoCodes() []PromoCode {
	if c == nil {
		return nil
	}
	return c.PromoCodes
}

func (c *CouponCreate) GetRequiresPromoCode() *bool {
	if c == nil {
		return nil
	}
	return c.RequiresPromoCode
}

func (c *CouponCreate) GetType() CouponCreateType {
	if c == nil {
		return CouponCreateType("")
	}
	return c.Type
}
