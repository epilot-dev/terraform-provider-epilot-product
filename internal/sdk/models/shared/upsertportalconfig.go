// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UpsertPortalConfigAdvancedMfa struct {
	// Advanced MFA feature flag
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *UpsertPortalConfigAdvancedMfa) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type UpsertPortalConfigEntryPoint string

const (
	UpsertPortalConfigEntryPointPassword UpsertPortalConfigEntryPoint = "PASSWORD"
	UpsertPortalConfigEntryPointSso      UpsertPortalConfigEntryPoint = "SSO"
)

func (e UpsertPortalConfigEntryPoint) ToPointer() *UpsertPortalConfigEntryPoint {
	return &e
}
func (e *UpsertPortalConfigEntryPoint) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD":
		fallthrough
	case "SSO":
		*e = UpsertPortalConfigEntryPoint(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertPortalConfigEntryPoint: %v", v)
	}
}

type UpsertPortalConfigPasswordlessLogin struct {
	// Passwordless login feature flag
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *UpsertPortalConfigPasswordlessLogin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// UpsertPortalConfigAuthSettings - Authentication settings for the portal
type UpsertPortalConfigAuthSettings struct {
	// Decide whether to automatically redirect to the provider page during login, which would completely bypass showing the portal authentication page.
	AutoRedirectToSso     *bool                                `json:"auto_redirect_to_sso,omitempty"`
	EntryPoint            *UpsertPortalConfigEntryPoint        `json:"entry_point,omitempty"`
	PasswordlessLogin     *UpsertPortalConfigPasswordlessLogin `json:"passwordless_login,omitempty"`
	PreferredSsoProviders []string                             `json:"preferred_sso_providers,omitempty"`
}

func (o *UpsertPortalConfigAuthSettings) GetAutoRedirectToSso() *bool {
	if o == nil {
		return nil
	}
	return o.AutoRedirectToSso
}

func (o *UpsertPortalConfigAuthSettings) GetEntryPoint() *UpsertPortalConfigEntryPoint {
	if o == nil {
		return nil
	}
	return o.EntryPoint
}

func (o *UpsertPortalConfigAuthSettings) GetPasswordlessLogin() *UpsertPortalConfigPasswordlessLogin {
	if o == nil {
		return nil
	}
	return o.PasswordlessLogin
}

func (o *UpsertPortalConfigAuthSettings) GetPreferredSsoProviders() []string {
	if o == nil {
		return nil
	}
	return o.PreferredSsoProviders
}

// UpsertPortalConfigPasswordPolicy - Password policy for the portal
type UpsertPortalConfigPasswordPolicy struct {
	// Minimum password length
	MinimumLength *int64 `json:"minimum_length,omitempty"`
	// Require lowercase characters
	RequireLowercase *bool `json:"require_lowercase,omitempty"`
	// Require numbers
	RequireNumbers *bool `json:"require_numbers,omitempty"`
	// Require symbols
	RequireSymbols *bool `json:"require_symbols,omitempty"`
	// Require uppercase characters
	RequireUppercase *bool `json:"require_uppercase,omitempty"`
}

func (o *UpsertPortalConfigPasswordPolicy) GetMinimumLength() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumLength
}

func (o *UpsertPortalConfigPasswordPolicy) GetRequireLowercase() *bool {
	if o == nil {
		return nil
	}
	return o.RequireLowercase
}

func (o *UpsertPortalConfigPasswordPolicy) GetRequireNumbers() *bool {
	if o == nil {
		return nil
	}
	return o.RequireNumbers
}

func (o *UpsertPortalConfigPasswordPolicy) GetRequireSymbols() *bool {
	if o == nil {
		return nil
	}
	return o.RequireSymbols
}

func (o *UpsertPortalConfigPasswordPolicy) GetRequireUppercase() *bool {
	if o == nil {
		return nil
	}
	return o.RequireUppercase
}

// UpsertPortalConfigCognitoDetails - AWS Cognito Pool details for the portal
type UpsertPortalConfigCognitoDetails struct {
	// Cognito user pool ARN
	CognitoUserPoolArn *string `json:"cognito_user_pool_arn,omitempty"`
	// Cognito user pool client ID
	CognitoUserPoolClientID *string `json:"cognito_user_pool_client_id,omitempty"`
	// Cognito user pool ID
	CognitoUserPoolID *string `json:"cognito_user_pool_id,omitempty"`
	// Password policy for the portal
	PasswordPolicy *UpsertPortalConfigPasswordPolicy `json:"password_policy,omitempty"`
}

func (o *UpsertPortalConfigCognitoDetails) GetCognitoUserPoolArn() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolArn
}

func (o *UpsertPortalConfigCognitoDetails) GetCognitoUserPoolClientID() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolClientID
}

func (o *UpsertPortalConfigCognitoDetails) GetCognitoUserPoolID() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolID
}

func (o *UpsertPortalConfigCognitoDetails) GetPasswordPolicy() *UpsertPortalConfigPasswordPolicy {
	if o == nil {
		return nil
	}
	return o.PasswordPolicy
}

// UpsertPortalConfigContractSelectorConfig - Configuration for contract selector in the portal
type UpsertPortalConfigContractSelectorConfig struct {
	// Whether to show inactive contracts in the selector
	ShowInactive *bool `json:"show_inactive,omitempty"`
	// Path to the property to use as the contract title
	TitlePath *string `json:"title_path,omitempty"`
}

func (o *UpsertPortalConfigContractSelectorConfig) GetShowInactive() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInactive
}

func (o *UpsertPortalConfigContractSelectorConfig) GetTitlePath() *string {
	if o == nil {
		return nil
	}
	return o.TitlePath
}

// UpsertPortalConfigDefaultUserToNotify - Default 360 user to notify upon an internal notification
type UpsertPortalConfigDefaultUserToNotify struct {
	// Default admin users for pending user notification to notify
	OnPendingUser []AdminUser `json:"onPendingUser,omitempty"`
}

func (o *UpsertPortalConfigDefaultUserToNotify) GetOnPendingUser() []AdminUser {
	if o == nil {
		return nil
	}
	return o.OnPendingUser
}

type UpsertPortalConfigActionLabel struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *UpsertPortalConfigActionLabel) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *UpsertPortalConfigActionLabel) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type UpsertPortalConfigEntityActions struct {
	ActionLabel *UpsertPortalConfigActionLabel `json:"action_Label,omitempty"`
	// Entity ID
	JourneyID *string `json:"journey_id,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *EntitySlug `json:"slug,omitempty"`
}

func (o *UpsertPortalConfigEntityActions) GetActionLabel() *UpsertPortalConfigActionLabel {
	if o == nil {
		return nil
	}
	return o.ActionLabel
}

func (o *UpsertPortalConfigEntityActions) GetJourneyID() *string {
	if o == nil {
		return nil
	}
	return o.JourneyID
}

func (o *UpsertPortalConfigEntityActions) GetSlug() *EntitySlug {
	if o == nil {
		return nil
	}
	return o.Slug
}

type UpsertPortalConfigCadencePeriodType string

const (
	UpsertPortalConfigCadencePeriodTypeDays   UpsertPortalConfigCadencePeriodType = "days"
	UpsertPortalConfigCadencePeriodTypeWeeks  UpsertPortalConfigCadencePeriodType = "weeks"
	UpsertPortalConfigCadencePeriodTypeMonths UpsertPortalConfigCadencePeriodType = "months"
)

func (e UpsertPortalConfigCadencePeriodType) ToPointer() *UpsertPortalConfigCadencePeriodType {
	return &e
}
func (e *UpsertPortalConfigCadencePeriodType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = UpsertPortalConfigCadencePeriodType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertPortalConfigCadencePeriodType: %v", v)
	}
}

type UpsertPortalConfigRuleType string

const (
	UpsertPortalConfigRuleTypeCadence                UpsertPortalConfigRuleType = "cadence"
	UpsertPortalConfigRuleTypeRelativeToCurrentValue UpsertPortalConfigRuleType = "relative_to_current_value"
	UpsertPortalConfigRuleTypeDaysBeforeDate         UpsertPortalConfigRuleType = "days_before_date"
	UpsertPortalConfigRuleTypeOverduePayments        UpsertPortalConfigRuleType = "overdue_payments"
)

func (e UpsertPortalConfigRuleType) ToPointer() *UpsertPortalConfigRuleType {
	return &e
}
func (e *UpsertPortalConfigRuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cadence":
		fallthrough
	case "relative_to_current_value":
		fallthrough
	case "days_before_date":
		fallthrough
	case "overdue_payments":
		*e = UpsertPortalConfigRuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertPortalConfigRuleType: %v", v)
	}
}

type UpsertPortalConfigEntityEditRules struct {
	AllowedDecrement              *string                              `json:"allowed_decrement,omitempty"`
	AllowedIncrement              *string                              `json:"allowed_increment,omitempty"`
	Attribute                     *string                              `json:"attribute,omitempty"`
	CadencePeriod                 *float64                             `json:"cadence_period,omitempty"`
	CadencePeriodType             *UpsertPortalConfigCadencePeriodType `json:"cadence_period_type,omitempty"`
	ChangesAllowed                *int64                               `json:"changes_allowed,omitempty"`
	GracePeriod                   *int64                               `json:"grace_period,omitempty"`
	NumberOfDaysBeforeRestriction *int64                               `json:"number_of_days_before_restriction,omitempty"`
	RuleType                      *UpsertPortalConfigRuleType          `json:"rule_type,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *EntitySlug `json:"slug,omitempty"`
}

func (o *UpsertPortalConfigEntityEditRules) GetAllowedDecrement() *string {
	if o == nil {
		return nil
	}
	return o.AllowedDecrement
}

func (o *UpsertPortalConfigEntityEditRules) GetAllowedIncrement() *string {
	if o == nil {
		return nil
	}
	return o.AllowedIncrement
}

func (o *UpsertPortalConfigEntityEditRules) GetAttribute() *string {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *UpsertPortalConfigEntityEditRules) GetCadencePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.CadencePeriod
}

func (o *UpsertPortalConfigEntityEditRules) GetCadencePeriodType() *UpsertPortalConfigCadencePeriodType {
	if o == nil {
		return nil
	}
	return o.CadencePeriodType
}

func (o *UpsertPortalConfigEntityEditRules) GetChangesAllowed() *int64 {
	if o == nil {
		return nil
	}
	return o.ChangesAllowed
}

func (o *UpsertPortalConfigEntityEditRules) GetGracePeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.GracePeriod
}

func (o *UpsertPortalConfigEntityEditRules) GetNumberOfDaysBeforeRestriction() *int64 {
	if o == nil {
		return nil
	}
	return o.NumberOfDaysBeforeRestriction
}

func (o *UpsertPortalConfigEntityEditRules) GetRuleType() *UpsertPortalConfigRuleType {
	if o == nil {
		return nil
	}
	return o.RuleType
}

func (o *UpsertPortalConfigEntityEditRules) GetSlug() *EntitySlug {
	if o == nil {
		return nil
	}
	return o.Slug
}

type UpsertPortalConfigType struct {
	// Attributes used to identify an entity
	Attributes []string `json:"attributes,omitempty"`
	// Enable/Disable the entity identifier
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

func (o *UpsertPortalConfigType) GetAttributes() []string {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *UpsertPortalConfigType) GetIsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

// UpsertPortalConfigEntityIdentifiers - Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type UpsertPortalConfigEntityIdentifiers struct {
	Type *UpsertPortalConfigType `json:"type,omitempty"`
}

func (o *UpsertPortalConfigEntityIdentifiers) GetType() *UpsertPortalConfigType {
	if o == nil {
		return nil
	}
	return o.Type
}

// UpsertPortalConfigFeatureSettings - Feature settings for the portal
type UpsertPortalConfigFeatureSettings struct {
	// Billing feature flag
	Billing *bool `json:"billing,omitempty"`
	// Change due date feature flag
	ChangeDueDate *bool `json:"change_due_date,omitempty"`
	// Enable or disable the new design for the portal
	NewDesign *bool `json:"new_design,omitempty"`
	// Start page feature flag
	StartPage *bool `json:"start_page,omitempty"`
}

func (o *UpsertPortalConfigFeatureSettings) GetBilling() *bool {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *UpsertPortalConfigFeatureSettings) GetChangeDueDate() *bool {
	if o == nil {
		return nil
	}
	return o.ChangeDueDate
}

func (o *UpsertPortalConfigFeatureSettings) GetNewDesign() *bool {
	if o == nil {
		return nil
	}
	return o.NewDesign
}

func (o *UpsertPortalConfigFeatureSettings) GetStartPage() *bool {
	if o == nil {
		return nil
	}
	return o.StartPage
}

// UpsertPortalConfigImages - Teaser & Banner Image web links
type UpsertPortalConfigImages struct {
	// URL of the order left teaser image
	OrderLeftTeaser *string `json:"orderLeftTeaser,omitempty"`
	// URL of the order right teaser image
	OrderRightTeaser *string `json:"orderRightTeaser,omitempty"`
	// URL of the welcome banner image
	WelcomeBanner *string `json:"welcomeBanner,omitempty"`
}

func (o *UpsertPortalConfigImages) GetOrderLeftTeaser() *string {
	if o == nil {
		return nil
	}
	return o.OrderLeftTeaser
}

func (o *UpsertPortalConfigImages) GetOrderRightTeaser() *string {
	if o == nil {
		return nil
	}
	return o.OrderRightTeaser
}

func (o *UpsertPortalConfigImages) GetWelcomeBanner() *string {
	if o == nil {
		return nil
	}
	return o.WelcomeBanner
}

type UpsertPortalConfigSelfRegistrationSetting string

const (
	UpsertPortalConfigSelfRegistrationSettingAllowWithContactCreation    UpsertPortalConfigSelfRegistrationSetting = "ALLOW_WITH_CONTACT_CREATION"
	UpsertPortalConfigSelfRegistrationSettingAllowWithoutContactCreation UpsertPortalConfigSelfRegistrationSetting = "ALLOW_WITHOUT_CONTACT_CREATION"
	UpsertPortalConfigSelfRegistrationSettingDeny                        UpsertPortalConfigSelfRegistrationSetting = "DENY"
)

func (e UpsertPortalConfigSelfRegistrationSetting) ToPointer() *UpsertPortalConfigSelfRegistrationSetting {
	return &e
}
func (e *UpsertPortalConfigSelfRegistrationSetting) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW_WITH_CONTACT_CREATION":
		fallthrough
	case "ALLOW_WITHOUT_CONTACT_CREATION":
		fallthrough
	case "DENY":
		*e = UpsertPortalConfigSelfRegistrationSetting(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertPortalConfigSelfRegistrationSetting: %v", v)
	}
}

type UpsertPortalConfigTriggerName string

const (
	UpsertPortalConfigTriggerNameFirstLogin   UpsertPortalConfigTriggerName = "FIRST_LOGIN"
	UpsertPortalConfigTriggerNameAcceptOrder  UpsertPortalConfigTriggerName = "ACCEPT_ORDER"
	UpsertPortalConfigTriggerNameDeclineOrder UpsertPortalConfigTriggerName = "DECLINE_ORDER"
)

func (e UpsertPortalConfigTriggerName) ToPointer() *UpsertPortalConfigTriggerName {
	return &e
}
func (e *UpsertPortalConfigTriggerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIRST_LOGIN":
		fallthrough
	case "ACCEPT_ORDER":
		fallthrough
	case "DECLINE_ORDER":
		*e = UpsertPortalConfigTriggerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpsertPortalConfigTriggerName: %v", v)
	}
}

type UpsertPortalConfigTriggeredJourneys struct {
	// Entity ID
	JourneyID   *string                        `json:"journey_id,omitempty"`
	TriggerName *UpsertPortalConfigTriggerName `json:"trigger_name,omitempty"`
}

func (o *UpsertPortalConfigTriggeredJourneys) GetJourneyID() *string {
	if o == nil {
		return nil
	}
	return o.JourneyID
}

func (o *UpsertPortalConfigTriggeredJourneys) GetTriggerName() *UpsertPortalConfigTriggerName {
	if o == nil {
		return nil
	}
	return o.TriggerName
}

type UpsertPortalConfig struct {
	// Access token for the portal
	AccessToken *string                        `json:"accessToken,omitempty"`
	AdvancedMfa *UpsertPortalConfigAdvancedMfa `json:"advanced_mfa,omitempty"`
	// Allowed file extensions for upload
	AllowedFileExtensions   *AllowedFileExtensions `json:"allowed_file_extensions,omitempty"`
	ApprovalStateAttributes map[string][]string    `json:"approval_state_attributes,omitempty"`
	// Authentication settings for the portal
	AuthSettings *UpsertPortalConfigAuthSettings `json:"auth_settings,omitempty"`
	// AWS Cognito Pool details for the portal
	CognitoDetails *UpsertPortalConfigCognitoDetails `json:"cognito_details,omitempty"`
	// Stringified object with configuration details
	Config *string `json:"config,omitempty"`
	// Deprecated. Use registration_identifiers instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ContactIdentifiers []string `json:"contact_identifiers,omitempty"`
	// Identifiers to identify a contract by a portal user.
	ContractIdentifiers []ContractIdentifier `json:"contract_identifiers,omitempty"`
	// Configuration for contract selector in the portal
	ContractSelectorConfig *UpsertPortalConfigContractSelectorConfig `json:"contract_selector_config,omitempty"`
	// Default 360 user to notify upon an internal notification
	DefaultUserToNotify *UpsertPortalConfigDefaultUserToNotify `json:"default_user_to_notify,omitempty"`
	// Entity ID
	DesignID *string `json:"design_id,omitempty"`
	// The URL on which the portal is accessible
	Domain string `json:"domain"`
	// Email templates used for authentication and internal processes
	EmailTemplates *EmailTemplates `json:"email_templates,omitempty"`
	// Enable/Disable the portal access
	Enabled *bool `json:"enabled,omitempty"`
	// Journey actions allowed on an entity by a portal user
	EntityActions []UpsertPortalConfigEntityActions `json:"entity_actions,omitempty"`
	// Rules for editing an entity by a portal user
	EntityEditRules []UpsertPortalConfigEntityEditRules `json:"entity_edit_rules,omitempty"`
	// Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	EntityIdentifiers *UpsertPortalConfigEntityIdentifiers `json:"entity_identifiers,omitempty"`
	// Configured Portal extensions hooks
	ExtensionHooks map[string]*ExtensionHookConfig `json:"extension_hooks,omitempty"`
	// Configured Portal extensions
	Extensions []ExtensionConfig `json:"extensions,omitempty"`
	// Feature settings for the portal
	FeatureSettings *UpsertPortalConfigFeatureSettings `json:"feature_settings,omitempty"`
	// Teaser & Banner Image web links
	Images *UpsertPortalConfigImages `json:"images,omitempty"`
	// Number of years to look back for showing inactive contracts in the portal
	InactiveContractCutoffYears *float64 `json:"inactive_contract_cutoff_years,omitempty"`
	// Whether this is a dummy/test portal configuration
	IsDummy *bool `json:"is_dummy,omitempty"`
	// Mark true if the domain is an Epilot domain
	IsEpilotDomain *bool `json:"is_epilot_domain,omitempty"`
	// Whether this is a v3 portal configuration
	IsV3Item *bool `json:"is_v3_item,omitempty"`
	// Grace period in days for meter readings
	MeterReadingGracePeriod *float64 `json:"meter_reading_grace_period,omitempty"`
	// A short name to identify your portal
	Name *string `json:"name,omitempty"`
	// Origin of the portal
	Origin *string         `json:"origin,omitempty"`
	Pages  map[string]Page `json:"pages,omitempty"`
	// ID of the portal
	PortalID *string `json:"portal_id,omitempty"`
	// Key of the portal config
	PortalSkV3 *string `json:"portal_sk_v3,omitempty"`
	// Prevent indexing by search engines
	PreventSearchEngineIndexing *bool `json:"prevent_search_engine_indexing,omitempty"`
	// Identifiers to identify a contact of a portal user during the registration.
	RegistrationIdentifiers []ContractIdentifier                       `json:"registration_identifiers,omitempty"`
	SelfRegistrationSetting *UpsertPortalConfigSelfRegistrationSetting `json:"self_registration_setting,omitempty"`
	// Journeys automatically opened on a portal user action
	TriggeredJourneys []UpsertPortalConfigTriggeredJourneys `json:"triggered_journeys,omitempty"`
}

func (o *UpsertPortalConfig) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *UpsertPortalConfig) GetAdvancedMfa() *UpsertPortalConfigAdvancedMfa {
	if o == nil {
		return nil
	}
	return o.AdvancedMfa
}

func (o *UpsertPortalConfig) GetAllowedFileExtensions() *AllowedFileExtensions {
	if o == nil {
		return nil
	}
	return o.AllowedFileExtensions
}

func (o *UpsertPortalConfig) GetApprovalStateAttributes() map[string][]string {
	if o == nil {
		return nil
	}
	return o.ApprovalStateAttributes
}

func (o *UpsertPortalConfig) GetAuthSettings() *UpsertPortalConfigAuthSettings {
	if o == nil {
		return nil
	}
	return o.AuthSettings
}

func (o *UpsertPortalConfig) GetCognitoDetails() *UpsertPortalConfigCognitoDetails {
	if o == nil {
		return nil
	}
	return o.CognitoDetails
}

func (o *UpsertPortalConfig) GetConfig() *string {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *UpsertPortalConfig) GetContactIdentifiers() []string {
	if o == nil {
		return nil
	}
	return o.ContactIdentifiers
}

func (o *UpsertPortalConfig) GetContractIdentifiers() []ContractIdentifier {
	if o == nil {
		return nil
	}
	return o.ContractIdentifiers
}

func (o *UpsertPortalConfig) GetContractSelectorConfig() *UpsertPortalConfigContractSelectorConfig {
	if o == nil {
		return nil
	}
	return o.ContractSelectorConfig
}

func (o *UpsertPortalConfig) GetDefaultUserToNotify() *UpsertPortalConfigDefaultUserToNotify {
	if o == nil {
		return nil
	}
	return o.DefaultUserToNotify
}

func (o *UpsertPortalConfig) GetDesignID() *string {
	if o == nil {
		return nil
	}
	return o.DesignID
}

func (o *UpsertPortalConfig) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *UpsertPortalConfig) GetEmailTemplates() *EmailTemplates {
	if o == nil {
		return nil
	}
	return o.EmailTemplates
}

func (o *UpsertPortalConfig) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpsertPortalConfig) GetEntityActions() []UpsertPortalConfigEntityActions {
	if o == nil {
		return nil
	}
	return o.EntityActions
}

func (o *UpsertPortalConfig) GetEntityEditRules() []UpsertPortalConfigEntityEditRules {
	if o == nil {
		return nil
	}
	return o.EntityEditRules
}

func (o *UpsertPortalConfig) GetEntityIdentifiers() *UpsertPortalConfigEntityIdentifiers {
	if o == nil {
		return nil
	}
	return o.EntityIdentifiers
}

func (o *UpsertPortalConfig) GetExtensionHooks() map[string]*ExtensionHookConfig {
	if o == nil {
		return nil
	}
	return o.ExtensionHooks
}

func (o *UpsertPortalConfig) GetExtensions() []ExtensionConfig {
	if o == nil {
		return nil
	}
	return o.Extensions
}

func (o *UpsertPortalConfig) GetFeatureSettings() *UpsertPortalConfigFeatureSettings {
	if o == nil {
		return nil
	}
	return o.FeatureSettings
}

func (o *UpsertPortalConfig) GetImages() *UpsertPortalConfigImages {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *UpsertPortalConfig) GetInactiveContractCutoffYears() *float64 {
	if o == nil {
		return nil
	}
	return o.InactiveContractCutoffYears
}

func (o *UpsertPortalConfig) GetIsDummy() *bool {
	if o == nil {
		return nil
	}
	return o.IsDummy
}

func (o *UpsertPortalConfig) GetIsEpilotDomain() *bool {
	if o == nil {
		return nil
	}
	return o.IsEpilotDomain
}

func (o *UpsertPortalConfig) GetIsV3Item() *bool {
	if o == nil {
		return nil
	}
	return o.IsV3Item
}

func (o *UpsertPortalConfig) GetMeterReadingGracePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.MeterReadingGracePeriod
}

func (o *UpsertPortalConfig) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpsertPortalConfig) GetOrigin() *string {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *UpsertPortalConfig) GetPages() map[string]Page {
	if o == nil {
		return nil
	}
	return o.Pages
}

func (o *UpsertPortalConfig) GetPortalID() *string {
	if o == nil {
		return nil
	}
	return o.PortalID
}

func (o *UpsertPortalConfig) GetPortalSkV3() *string {
	if o == nil {
		return nil
	}
	return o.PortalSkV3
}

func (o *UpsertPortalConfig) GetPreventSearchEngineIndexing() *bool {
	if o == nil {
		return nil
	}
	return o.PreventSearchEngineIndexing
}

func (o *UpsertPortalConfig) GetRegistrationIdentifiers() []ContractIdentifier {
	if o == nil {
		return nil
	}
	return o.RegistrationIdentifiers
}

func (o *UpsertPortalConfig) GetSelfRegistrationSetting() *UpsertPortalConfigSelfRegistrationSetting {
	if o == nil {
		return nil
	}
	return o.SelfRegistrationSetting
}

func (o *UpsertPortalConfig) GetTriggeredJourneys() []UpsertPortalConfigTriggeredJourneys {
	if o == nil {
		return nil
	}
	return o.TriggeredJourneys
}
