// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

// ExtensionSeamlessLinkDescription - Name of the extension.
type ExtensionSeamlessLinkDescription struct {
	AdditionalProperties map[string]string `additionalProperties:"true" json:"-"`
	// Name of the extension in English.
	En string `json:"en"`
}

func (e ExtensionSeamlessLinkDescription) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExtensionSeamlessLinkDescription) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"en"}); err != nil {
		return err
	}
	return nil
}

func (o *ExtensionSeamlessLinkDescription) GetAdditionalProperties() map[string]string {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *ExtensionSeamlessLinkDescription) GetEn() string {
	if o == nil {
		return ""
	}
	return o.En
}

// ExtensionSeamlessLinkName - Name of the extension.
type ExtensionSeamlessLinkName struct {
	AdditionalProperties map[string]string `additionalProperties:"true" json:"-"`
	// Name of the extension in English.
	En string `json:"en"`
}

func (e ExtensionSeamlessLinkName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExtensionSeamlessLinkName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"en"}); err != nil {
		return err
	}
	return nil
}

func (o *ExtensionSeamlessLinkName) GetAdditionalProperties() map[string]string {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *ExtensionSeamlessLinkName) GetEn() string {
	if o == nil {
		return ""
	}
	return o.En
}

type Redirect struct {
	// Parameters to append to the URL. Supports variable interpolation.
	Params map[string]string `json:"params,omitempty"`
	// URL to redirect to. Supports variable interpolation.
	URL *string `json:"url,omitempty"`
}

func (o *Redirect) GetParams() map[string]string {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *Redirect) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type ExtensionSeamlessLinkType string

const (
	ExtensionSeamlessLinkTypeSeamless ExtensionSeamlessLinkType = "seamless"
)

func (e ExtensionSeamlessLinkType) ToPointer() *ExtensionSeamlessLinkType {
	return &e
}
func (e *ExtensionSeamlessLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "seamless":
		*e = ExtensionSeamlessLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtensionSeamlessLinkType: %v", v)
	}
}

type ExtensionSeamlessLink struct {
	Auth *ExtensionAuthBlock `json:"auth,omitempty"`
	// Controls whether the link should be shown. Supports variable interpolation.
	Condition *string `json:"condition,omitempty"`
	// Name of the extension.
	Description *ExtensionSeamlessLinkDescription `json:"description,omitempty"`
	// Identifier of the link. Should not change between updates.
	ID string `json:"id"`
	// Name of the extension.
	Name     ExtensionSeamlessLinkName `json:"name"`
	Redirect Redirect                  `json:"redirect"`
	Type     ExtensionSeamlessLinkType `json:"type"`
}

func (o *ExtensionSeamlessLink) GetAuth() *ExtensionAuthBlock {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *ExtensionSeamlessLink) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *ExtensionSeamlessLink) GetDescription() *ExtensionSeamlessLinkDescription {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ExtensionSeamlessLink) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ExtensionSeamlessLink) GetName() ExtensionSeamlessLinkName {
	if o == nil {
		return ExtensionSeamlessLinkName{}
	}
	return o.Name
}

func (o *ExtensionSeamlessLink) GetRedirect() Redirect {
	if o == nil {
		return Redirect{}
	}
	return o.Redirect
}

func (o *ExtensionSeamlessLink) GetType() ExtensionSeamlessLinkType {
	if o == nil {
		return ExtensionSeamlessLinkType("")
	}
	return o.Type
}
