// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

// Filters - Elasticsearch filter object
type Filters struct {
}

type FiltersSchema string

const (
	FiltersSchemaContact    FiltersSchema = "contact"
	FiltersSchemaContract   FiltersSchema = "contract"
	FiltersSchemaPortalUser FiltersSchema = "portal_user"
)

func (e FiltersSchema) ToPointer() *FiltersSchema {
	return &e
}
func (e *FiltersSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "contact":
		fallthrough
	case "contract":
		fallthrough
	case "portal_user":
		*e = FiltersSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FiltersSchema: %v", v)
	}
}

type GroupAfterKeyType string

const (
	GroupAfterKeyTypeStr    GroupAfterKeyType = "str"
	GroupAfterKeyTypeNumber GroupAfterKeyType = "number"
)

type GroupAfterKey struct {
	Str    *string  `queryParam:"inline" name:"group_after_key"`
	Number *float64 `queryParam:"inline" name:"group_after_key"`

	Type GroupAfterKeyType
}

func CreateGroupAfterKeyStr(str string) GroupAfterKey {
	typ := GroupAfterKeyTypeStr

	return GroupAfterKey{
		Str:  &str,
		Type: typ,
	}
}

func CreateGroupAfterKeyNumber(number float64) GroupAfterKey {
	typ := GroupAfterKeyTypeNumber

	return GroupAfterKey{
		Number: &number,
		Type:   typ,
	}
}

func (u *GroupAfterKey) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = GroupAfterKeyTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = GroupAfterKeyTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GroupAfterKey", string(data))
}

func (u GroupAfterKey) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GroupAfterKey: all fields are null")
}

// GroupSort - Sort order for groups
type GroupSort string

const (
	GroupSortAsc  GroupSort = "asc"
	GroupSortDesc GroupSort = "desc"
)

func (e GroupSort) ToPointer() *GroupSort {
	return &e
}
func (e *GroupSort) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GroupSort(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupSort: %v", v)
	}
}

type SlugType string

const (
	SlugTypeEntitySlug        SlugType = "EntitySlug"
	SlugTypeArrayOfEntitySlug SlugType = "arrayOfEntitySlug"
)

// Slug - Single entity schema slug or array of slugs
type Slug struct {
	EntitySlug        *EntitySlug  `queryParam:"inline" name:"slug"`
	ArrayOfEntitySlug []EntitySlug `queryParam:"inline" name:"slug"`

	Type SlugType
}

func CreateSlugEntitySlug(entitySlug EntitySlug) Slug {
	typ := SlugTypeEntitySlug

	return Slug{
		EntitySlug: &entitySlug,
		Type:       typ,
	}
}

func CreateSlugArrayOfEntitySlug(arrayOfEntitySlug []EntitySlug) Slug {
	typ := SlugTypeArrayOfEntitySlug

	return Slug{
		ArrayOfEntitySlug: arrayOfEntitySlug,
		Type:              typ,
	}
}

func (u *Slug) UnmarshalJSON(data []byte) error {

	var entitySlug EntitySlug = EntitySlug("")
	if err := utils.UnmarshalJSON(data, &entitySlug, "", true, nil); err == nil {
		u.EntitySlug = &entitySlug
		u.Type = SlugTypeEntitySlug
		return nil
	}

	var arrayOfEntitySlug []EntitySlug = []EntitySlug{}
	if err := utils.UnmarshalJSON(data, &arrayOfEntitySlug, "", true, nil); err == nil {
		u.ArrayOfEntitySlug = arrayOfEntitySlug
		u.Type = SlugTypeArrayOfEntitySlug
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Slug", string(data))
}

func (u Slug) MarshalJSON() ([]byte, error) {
	if u.EntitySlug != nil {
		return utils.MarshalJSON(u.EntitySlug, "", true)
	}

	if u.ArrayOfEntitySlug != nil {
		return utils.MarshalJSON(u.ArrayOfEntitySlug, "", true)
	}

	return nil, errors.New("could not marshal union type Slug: all fields are null")
}

type EntitySearchParams struct {
	// List of contract IDs to filter by
	Contracts []string `json:"contracts,omitempty"`
	// List of entity fields to include in search results
	Fields []string `json:"fields,omitempty"`
	// Additional filters to apply to the search query
	Filters []Filters `json:"filters,omitempty"`
	// Schema-based filters for entity relations.
	FiltersSchema []FiltersSchema `json:"filters_schema,omitempty"`
	From          *int64          `default:"0" json:"from"`
	// Field to group results by
	Group *string `json:"group,omitempty"`
	// Composite aggregation key for group pagination
	GroupAfterKey map[string]GroupAfterKey `json:"group_after_key,omitempty"`
	// Number of groups to return
	GroupSize *int64 `default:"100" json:"group_size"`
	// Sort order for groups
	GroupSort *GroupSort `default:"asc" json:"group_sort"`
	// When true, enables entity hydration to resolve nested $relation & $relation_ref references in-place.
	Hydrate *bool `default:"false" json:"hydrate"`
	// Keyword search query
	Q *string `json:"q,omitempty"`
	// List of fields that can be searched
	QFields []string `json:"q_fields,omitempty"`
	// Max search size is 1000 with higher values defaulting to 1000
	Size *int64 `default:"100" json:"size"`
	// Single entity schema slug or array of slugs
	Slug Slug    `json:"slug"`
	Sort *string `json:"sort,omitempty"`
	// Filters from these targets will be applied to the search query.
	Targets []string `json:"targets,omitempty"`
}

func (e EntitySearchParams) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySearchParams) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"slug"}); err != nil {
		return err
	}
	return nil
}

func (o *EntitySearchParams) GetContracts() []string {
	if o == nil {
		return nil
	}
	return o.Contracts
}

func (o *EntitySearchParams) GetFields() []string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *EntitySearchParams) GetFilters() []Filters {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *EntitySearchParams) GetFiltersSchema() []FiltersSchema {
	if o == nil {
		return nil
	}
	return o.FiltersSchema
}

func (o *EntitySearchParams) GetFrom() *int64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *EntitySearchParams) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *EntitySearchParams) GetGroupAfterKey() map[string]GroupAfterKey {
	if o == nil {
		return nil
	}
	return o.GroupAfterKey
}

func (o *EntitySearchParams) GetGroupSize() *int64 {
	if o == nil {
		return nil
	}
	return o.GroupSize
}

func (o *EntitySearchParams) GetGroupSort() *GroupSort {
	if o == nil {
		return nil
	}
	return o.GroupSort
}

func (o *EntitySearchParams) GetHydrate() *bool {
	if o == nil {
		return nil
	}
	return o.Hydrate
}

func (o *EntitySearchParams) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *EntitySearchParams) GetQFields() []string {
	if o == nil {
		return nil
	}
	return o.QFields
}

func (o *EntitySearchParams) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *EntitySearchParams) GetSlug() Slug {
	if o == nil {
		return Slug{}
	}
	return o.Slug
}

func (o *EntitySearchParams) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *EntitySearchParams) GetTargets() []string {
	if o == nil {
		return nil
	}
	return o.Targets
}
