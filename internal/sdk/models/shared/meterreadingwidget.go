// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type MeterReadingWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (m MeterReadingWidgetHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterReadingWidgetHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *MeterReadingWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *MeterReadingWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type MeterReadingWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (m MeterReadingWidgetSubHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterReadingWidgetSubHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *MeterReadingWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *MeterReadingWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type MeterReadingWidgetType string

const (
	MeterReadingWidgetTypeActionWidget       MeterReadingWidgetType = "ACTION_WIDGET"
	MeterReadingWidgetTypeContentWidget      MeterReadingWidgetType = "CONTENT_WIDGET"
	MeterReadingWidgetTypeEntityWidget       MeterReadingWidgetType = "ENTITY_WIDGET"
	MeterReadingWidgetTypeTeaserWidget       MeterReadingWidgetType = "TEASER_WIDGET"
	MeterReadingWidgetTypeDocumentWidget     MeterReadingWidgetType = "DOCUMENT_WIDGET"
	MeterReadingWidgetTypePaymentWidget      MeterReadingWidgetType = "PAYMENT_WIDGET"
	MeterReadingWidgetTypeMeterReadingWidget MeterReadingWidgetType = "METER_READING_WIDGET"
	MeterReadingWidgetTypeMeterChartWidget   MeterReadingWidgetType = "METER_CHART_WIDGET"
	MeterReadingWidgetTypeCampaignWidget     MeterReadingWidgetType = "CAMPAIGN_WIDGET"
)

func (e MeterReadingWidgetType) ToPointer() *MeterReadingWidgetType {
	return &e
}
func (e *MeterReadingWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = MeterReadingWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeterReadingWidgetType: %v", v)
	}
}

type MeterReadingWidget struct {
	Headline *MeterReadingWidgetHeadline `json:"headline,omitempty"`
	ID       string                      `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                          `json:"listIndex"`
	Schema      *string                        `json:"schema,omitempty"`
	SubHeadline *MeterReadingWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        MeterReadingWidgetType         `json:"type"`
}

func (m MeterReadingWidget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterReadingWidget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"id", "listIndex", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *MeterReadingWidget) GetHeadline() *MeterReadingWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *MeterReadingWidget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MeterReadingWidget) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *MeterReadingWidget) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *MeterReadingWidget) GetSubHeadline() *MeterReadingWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *MeterReadingWidget) GetType() MeterReadingWidgetType {
	if o == nil {
		return MeterReadingWidgetType("")
	}
	return o.Type
}
