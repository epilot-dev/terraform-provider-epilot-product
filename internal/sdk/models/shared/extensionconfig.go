// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

// ExtensionConfigStatus - Status of the extension
type ExtensionConfigStatus string

const (
	ExtensionConfigStatusInstalled ExtensionConfigStatus = "installed"
	ExtensionConfigStatusEnabled   ExtensionConfigStatus = "enabled"
)

func (e ExtensionConfigStatus) ToPointer() *ExtensionConfigStatus {
	return &e
}
func (e *ExtensionConfigStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "installed":
		fallthrough
	case "enabled":
		*e = ExtensionConfigStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtensionConfigStatus: %v", v)
	}
}

type ExtensionConfig struct {
	// Name of the extension
	ID string `json:"id"`
	// Extension option values.
	Options map[string]string `json:"options,omitempty"`
	// Status of the extension
	Status *ExtensionConfigStatus `default:"installed" json:"status"`
}

func (e ExtensionConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExtensionConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (o *ExtensionConfig) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ExtensionConfig) GetOptions() map[string]string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *ExtensionConfig) GetStatus() *ExtensionConfigStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
