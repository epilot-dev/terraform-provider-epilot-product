// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type ContentWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (c ContentWidgetHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContentWidgetHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ContentWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *ContentWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type ContentWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (c ContentWidgetSubHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContentWidgetSubHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ContentWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *ContentWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type ContentWidgetType string

const (
	ContentWidgetTypeActionWidget       ContentWidgetType = "ACTION_WIDGET"
	ContentWidgetTypeContentWidget      ContentWidgetType = "CONTENT_WIDGET"
	ContentWidgetTypeEntityWidget       ContentWidgetType = "ENTITY_WIDGET"
	ContentWidgetTypeTeaserWidget       ContentWidgetType = "TEASER_WIDGET"
	ContentWidgetTypeDocumentWidget     ContentWidgetType = "DOCUMENT_WIDGET"
	ContentWidgetTypePaymentWidget      ContentWidgetType = "PAYMENT_WIDGET"
	ContentWidgetTypeMeterReadingWidget ContentWidgetType = "METER_READING_WIDGET"
	ContentWidgetTypeMeterChartWidget   ContentWidgetType = "METER_CHART_WIDGET"
	ContentWidgetTypeCampaignWidget     ContentWidgetType = "CAMPAIGN_WIDGET"
)

func (e ContentWidgetType) ToPointer() *ContentWidgetType {
	return &e
}
func (e *ContentWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = ContentWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentWidgetType: %v", v)
	}
}

type ContentWidget struct {
	Content  *string                `json:"content,omitempty"`
	Headline *ContentWidgetHeadline `json:"headline,omitempty"`
	ID       string                 `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                     `json:"listIndex"`
	SubHeadline *ContentWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        ContentWidgetType         `json:"type"`
}

func (c ContentWidget) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContentWidget) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "listIndex", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *ContentWidget) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *ContentWidget) GetHeadline() *ContentWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *ContentWidget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ContentWidget) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *ContentWidget) GetSubHeadline() *ContentWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *ContentWidget) GetType() ContentWidgetType {
	if o == nil {
		return ContentWidgetType("")
	}
	return o.Type
}
