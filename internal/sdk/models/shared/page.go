// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"time"
)

// PageSchema - The schema of the page
type PageSchema string

const (
	PageSchemaContact      PageSchema = "contact"
	PageSchemaContract     PageSchema = "contract"
	PageSchemaMeter        PageSchema = "meter"
	PageSchemaOrder        PageSchema = "order"
	PageSchemaOpportunity  PageSchema = "opportunity"
	PageSchemaMeterCounter PageSchema = "meter_counter"
)

func (e PageSchema) ToPointer() *PageSchema {
	return &e
}
func (e *PageSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "contact":
		fallthrough
	case "contract":
		fallthrough
	case "meter":
		fallthrough
	case "order":
		fallthrough
	case "opportunity":
		fallthrough
	case "meter_counter":
		*e = PageSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PageSchema: %v", v)
	}
}

type Page struct {
	AdditionalProperties any              `additionalProperties:"true" json:"-"`
	Blocks               map[string]Block `json:"blocks,omitempty"`
	// The content of the page
	Content map[string]any `json:"content,omitempty"`
	// The design of the page
	Design map[string]any `json:"design,omitempty"`
	// The id of the page
	ID *string `json:"id,omitempty"`
	// Send the flag as true to delete the page
	IsDeleted *bool `json:"is_deleted,omitempty"`
	// Whether the page is the entry route
	IsEntryRoute *bool `json:"is_entry_route,omitempty"`
	// Whether the page is public
	IsPublic *bool `json:"is_public,omitempty"`
	// Whether the page is a system page
	IsSystem *bool `json:"is_system,omitempty"`
	// Last modified timestamp of the Page
	LastModifiedAt *time.Time `json:"last_modified_at,omitempty"`
	// The order of the block
	Order float64 `json:"order"`
	// The id of the parent page
	ParentID *string `json:"parentId,omitempty"`
	// The path of the page
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Path   *string      `json:"path,omitempty"`
	Schema []PageSchema `json:"schema,omitempty"`
	// The slug of the page
	Slug string `json:"slug"`
	// The conditions that need to be met for the page to be shown
	Visibility map[string]any `json:"visibility,omitempty"`
}

func (p Page) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Page) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"order", "slug"}); err != nil {
		return err
	}
	return nil
}

func (o *Page) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *Page) GetBlocks() map[string]Block {
	if o == nil {
		return nil
	}
	return o.Blocks
}

func (o *Page) GetContent() map[string]any {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *Page) GetDesign() map[string]any {
	if o == nil {
		return nil
	}
	return o.Design
}

func (o *Page) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Page) GetIsDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.IsDeleted
}

func (o *Page) GetIsEntryRoute() *bool {
	if o == nil {
		return nil
	}
	return o.IsEntryRoute
}

func (o *Page) GetIsPublic() *bool {
	if o == nil {
		return nil
	}
	return o.IsPublic
}

func (o *Page) GetIsSystem() *bool {
	if o == nil {
		return nil
	}
	return o.IsSystem
}

func (o *Page) GetLastModifiedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastModifiedAt
}

func (o *Page) GetOrder() float64 {
	if o == nil {
		return 0.0
	}
	return o.Order
}

func (o *Page) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *Page) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Page) GetSchema() []PageSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *Page) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Page) GetVisibility() map[string]any {
	if o == nil {
		return nil
	}
	return o.Visibility
}
