// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProductRecommendationCreateSchema string

const (
	ProductRecommendationCreateSchemaProductRecommendation ProductRecommendationCreateSchema = "product_recommendation"
)

func (e ProductRecommendationCreateSchema) ToPointer() *ProductRecommendationCreateSchema {
	return &e
}
func (e *ProductRecommendationCreateSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product_recommendation":
		*e = ProductRecommendationCreateSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductRecommendationCreateSchema: %v", v)
	}
}

// ProductRecommendationCreateType - Type of product recommendation
type ProductRecommendationCreateType string

const (
	ProductRecommendationCreateTypeChange    ProductRecommendationCreateType = "change"
	ProductRecommendationCreateTypeCrossSell ProductRecommendationCreateType = "cross-sell"
	ProductRecommendationCreateTypeUpSell    ProductRecommendationCreateType = "up-sell"
)

func (e ProductRecommendationCreateType) ToPointer() *ProductRecommendationCreateType {
	return &e
}
func (e *ProductRecommendationCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change":
		fallthrough
	case "cross-sell":
		fallthrough
	case "up-sell":
		*e = ProductRecommendationCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductRecommendationCreateType: %v", v)
	}
}

type ProductRecommendationCreate struct {
	// Additional fields that are not part of the schema
	Additional any           `json:"__additional,omitempty"`
	Files      *BaseRelation `json:"_files,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string                           `json:"_manifest,omitempty"`
	Purpose  []string                           `json:"_purpose,omitempty"`
	Schema   *ProductRecommendationCreateSchema `json:"_schema,omitempty"`
	Tags     []string                           `json:"_tags,omitempty"`
	Offers   any                                `json:"offers,omitempty"`
	// Price being used as source
	SourcePrice any `json:"source_price,omitempty"`
	// Product being used as source
	SourceProduct any `json:"source_product,omitempty"`
	// Type of product recommendation
	Type ProductRecommendationCreateType `json:"type"`
}

func (p *ProductRecommendationCreate) GetAdditional() any {
	if p == nil {
		return nil
	}
	return p.Additional
}

func (p *ProductRecommendationCreate) GetFiles() *BaseRelation {
	if p == nil {
		return nil
	}
	return p.Files
}

func (p *ProductRecommendationCreate) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *ProductRecommendationCreate) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *ProductRecommendationCreate) GetSchema() *ProductRecommendationCreateSchema {
	if p == nil {
		return nil
	}
	return p.Schema
}

func (p *ProductRecommendationCreate) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *ProductRecommendationCreate) GetOffers() any {
	if p == nil {
		return nil
	}
	return p.Offers
}

func (p *ProductRecommendationCreate) GetSourcePrice() any {
	if p == nil {
		return nil
	}
	return p.SourcePrice
}

func (p *ProductRecommendationCreate) GetSourceProduct() any {
	if p == nil {
		return nil
	}
	return p.SourceProduct
}

func (p *ProductRecommendationCreate) GetType() ProductRecommendationCreateType {
	if p == nil {
		return ProductRecommendationCreateType("")
	}
	return p.Type
}
