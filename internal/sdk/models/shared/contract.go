// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"time"
)

// BillingPeriod - The billing period associated with the contract.
type BillingPeriod string

const (
	BillingPeriodWeekly       BillingPeriod = "weekly"
	BillingPeriodMonthly      BillingPeriod = "monthly"
	BillingPeriodEveryQuarter BillingPeriod = "every_quarter"
	BillingPeriodEvery6Months BillingPeriod = "every_6_months"
	BillingPeriodYearly       BillingPeriod = "yearly"
)

func (e BillingPeriod) ToPointer() *BillingPeriod {
	return &e
}
func (e *BillingPeriod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weekly":
		fallthrough
	case "monthly":
		fallthrough
	case "every_quarter":
		fallthrough
	case "every_6_months":
		fallthrough
	case "yearly":
		*e = BillingPeriod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingPeriod: %v", v)
	}
}

// Branch - The branch associated with the contract.
type Branch string

const (
	BranchPower           Branch = "power"
	BranchGas             Branch = "gas"
	BranchWater           Branch = "water"
	BranchWasteWater      Branch = "waste_water"
	BranchDistrictHeating Branch = "district_heating"
)

func (e Branch) ToPointer() *Branch {
	return &e
}
func (e *Branch) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "power":
		fallthrough
	case "gas":
		fallthrough
	case "water":
		fallthrough
	case "waste_water":
		fallthrough
	case "district_heating":
		*e = Branch(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Branch: %v", v)
	}
}

// NoticeTimeUnit - The unit of time for the notice period.
type NoticeTimeUnit string

const (
	NoticeTimeUnitWeeks  NoticeTimeUnit = "weeks"
	NoticeTimeUnitMonths NoticeTimeUnit = "months"
	NoticeTimeUnitYears  NoticeTimeUnit = "years"
)

func (e NoticeTimeUnit) ToPointer() *NoticeTimeUnit {
	return &e
}
func (e *NoticeTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = NoticeTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NoticeTimeUnit: %v", v)
	}
}

// RenewalDurationUnit - The unit of time for the renewal period.
type RenewalDurationUnit string

const (
	RenewalDurationUnitWeeks  RenewalDurationUnit = "weeks"
	RenewalDurationUnitMonths RenewalDurationUnit = "months"
	RenewalDurationUnitYears  RenewalDurationUnit = "years"
)

func (e RenewalDurationUnit) ToPointer() *RenewalDurationUnit {
	return &e
}
func (e *RenewalDurationUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weeks":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = RenewalDurationUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RenewalDurationUnit: %v", v)
	}
}

// Status - The status of the contract.
type Status string

const (
	StatusDraft             Status = "draft"
	StatusInApprovalProcess Status = "in_approval_process"
	StatusApproved          Status = "approved"
	StatusActive            Status = "active"
	StatusDeactivated       Status = "deactivated"
	StatusRevoked           Status = "revoked"
	StatusTerminated        Status = "terminated"
	StatusExpired           Status = "expired"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "in_approval_process":
		fallthrough
	case "approved":
		fallthrough
	case "active":
		fallthrough
	case "deactivated":
		fallthrough
	case "revoked":
		fallthrough
	case "terminated":
		fallthrough
	case "expired":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// Contract - The contract entity
type Contract struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Creation timestamp of the entity
	CreatedAt time.Time `json:"_created_at"`
	// Entity ID
	ID string `json:"_id"`
	// Organization ID the entity belongs to
	Org string `json:"_org"`
	// Array of entity tags
	Tags []string `json:"_tags,omitempty"`
	// Title of the entity
	Title string `json:"_title"`
	// Last update timestamp of the entity
	UpdatedAt time.Time `json:"_updated_at"`
	// The account number associated with the contract.
	AccountNumber *string `json:"account_number,omitempty"`
	// Any additional addresses associated with the contract.
	AdditionalAddresses *string `json:"additional_addresses,omitempty"`
	// Current balance of the contract in cents. (precision 2)
	Balance *int64 `json:"balance,omitempty"`
	// Currency code in ISO 4217 format
	BalanceCurrency *string `json:"balance_currency,omitempty"`
	// The billing address associated with the contract.
	BillingAddress *string `json:"billing_address,omitempty"`
	// Defines the day of the month in which the installments are due.
	BillingDueDay *int64 `json:"billing_due_day,omitempty"`
	// The duration of the billing period.
	BillingDurationAmount *float64 `json:"billing_duration_amount,omitempty"`
	// The billing period associated with the contract.
	BillingPeriod *BillingPeriod `default:"weekly" json:"billing_period"`
	// The branch associated with the contract.
	Branch *Branch `json:"branch,omitempty"`
	// The name of the contract.
	ContractName *string `json:"contract_name,omitempty"`
	// The unique identifier of the contract.
	ContractNumber *string `json:"contract_number,omitempty"`
	// The delivery address associated with the contract.
	DeliveryAddress *string `json:"delivery_address,omitempty"`
	// A brief description of the contract.
	Description *string `json:"description,omitempty"`
	// Set amount for installments in cents. (precision 2)
	InstallmentAmount *int64 `json:"installment_amount,omitempty"`
	// The amount of notice required for termination of the contract.
	NoticeTimeAmount *float64 `json:"notice_time_amount,omitempty"`
	// The unit of time for the notice period.
	NoticeTimeUnit *NoticeTimeUnit `default:"months" json:"notice_time_unit"`
	// The duration of the renewal period.
	RenewalDurationAmount *float64 `json:"renewal_duration_amount,omitempty"`
	// The unit of time for the renewal period.
	RenewalDurationUnit *RenewalDurationUnit `default:"months" json:"renewal_duration_unit"`
	// The start date of the contract.
	StartDate *string `json:"start_date,omitempty"`
	// The status of the contract.
	Status *Status `default:"draft" json:"status"`
	// The date on which the contract was terminated.
	TerminationDate *string `json:"termination_date,omitempty"`
	// The reason for the termination of the contract.
	TerminationReason *string `json:"termination_reason,omitempty"`
}

func (c Contract) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Contract) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"_created_at", "_id", "_org", "_title", "_updated_at"}); err != nil {
		return err
	}
	return nil
}

func (o *Contract) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *Contract) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Contract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Contract) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *Contract) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Contract) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Contract) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Contract) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *Contract) GetAdditionalAddresses() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalAddresses
}

func (o *Contract) GetBalance() *int64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *Contract) GetBalanceCurrency() *string {
	if o == nil {
		return nil
	}
	return o.BalanceCurrency
}

func (o *Contract) GetBillingAddress() *string {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Contract) GetBillingDueDay() *int64 {
	if o == nil {
		return nil
	}
	return o.BillingDueDay
}

func (o *Contract) GetBillingDurationAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BillingDurationAmount
}

func (o *Contract) GetBillingPeriod() *BillingPeriod {
	if o == nil {
		return nil
	}
	return o.BillingPeriod
}

func (o *Contract) GetBranch() *Branch {
	if o == nil {
		return nil
	}
	return o.Branch
}

func (o *Contract) GetContractName() *string {
	if o == nil {
		return nil
	}
	return o.ContractName
}

func (o *Contract) GetContractNumber() *string {
	if o == nil {
		return nil
	}
	return o.ContractNumber
}

func (o *Contract) GetDeliveryAddress() *string {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}

func (o *Contract) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Contract) GetInstallmentAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.InstallmentAmount
}

func (o *Contract) GetNoticeTimeAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.NoticeTimeAmount
}

func (o *Contract) GetNoticeTimeUnit() *NoticeTimeUnit {
	if o == nil {
		return nil
	}
	return o.NoticeTimeUnit
}

func (o *Contract) GetRenewalDurationAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.RenewalDurationAmount
}

func (o *Contract) GetRenewalDurationUnit() *RenewalDurationUnit {
	if o == nil {
		return nil
	}
	return o.RenewalDurationUnit
}

func (o *Contract) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *Contract) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Contract) GetTerminationDate() *string {
	if o == nil {
		return nil
	}
	return o.TerminationDate
}

func (o *Contract) GetTerminationReason() *string {
	if o == nil {
		return nil
	}
	return o.TerminationReason
}
