// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
)

type WidgetBaseHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (w WidgetBaseHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WidgetBaseHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *WidgetBaseHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *WidgetBaseHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type WidgetBaseSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (w WidgetBaseSubHeadline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WidgetBaseSubHeadline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *WidgetBaseSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *WidgetBaseSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type WidgetBaseType string

const (
	WidgetBaseTypeActionWidget       WidgetBaseType = "ACTION_WIDGET"
	WidgetBaseTypeContentWidget      WidgetBaseType = "CONTENT_WIDGET"
	WidgetBaseTypeEntityWidget       WidgetBaseType = "ENTITY_WIDGET"
	WidgetBaseTypeTeaserWidget       WidgetBaseType = "TEASER_WIDGET"
	WidgetBaseTypeDocumentWidget     WidgetBaseType = "DOCUMENT_WIDGET"
	WidgetBaseTypePaymentWidget      WidgetBaseType = "PAYMENT_WIDGET"
	WidgetBaseTypeMeterReadingWidget WidgetBaseType = "METER_READING_WIDGET"
	WidgetBaseTypeMeterChartWidget   WidgetBaseType = "METER_CHART_WIDGET"
	WidgetBaseTypeCampaignWidget     WidgetBaseType = "CAMPAIGN_WIDGET"
)

func (e WidgetBaseType) ToPointer() *WidgetBaseType {
	return &e
}
func (e *WidgetBaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = WidgetBaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WidgetBaseType: %v", v)
	}
}

type WidgetBase struct {
	Headline *WidgetBaseHeadline `json:"headline,omitempty"`
	ID       string              `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                  `json:"listIndex"`
	SubHeadline *WidgetBaseSubHeadline `json:"subHeadline,omitempty"`
	Type        WidgetBaseType         `json:"type"`
}

func (w WidgetBase) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WidgetBase) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"id", "listIndex", "type"}); err != nil {
		return err
	}
	return nil
}

func (o *WidgetBase) GetHeadline() *WidgetBaseHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *WidgetBase) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WidgetBase) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *WidgetBase) GetSubHeadline() *WidgetBaseSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *WidgetBase) GetType() WidgetBaseType {
	if o == nil {
		return WidgetBaseType("")
	}
	return o.Type
}
