// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-product/internal/sdk/internal/utils"
	"time"
)

type ProductRecommendationSchema string

const (
	ProductRecommendationSchemaProductRecommendation ProductRecommendationSchema = "product_recommendation"
)

func (e ProductRecommendationSchema) ToPointer() *ProductRecommendationSchema {
	return &e
}
func (e *ProductRecommendationSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "product_recommendation":
		*e = ProductRecommendationSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductRecommendationSchema: %v", v)
	}
}

// ProductRecommendationType - Type of product recommendation
type ProductRecommendationType string

const (
	ProductRecommendationTypeChange    ProductRecommendationType = "change"
	ProductRecommendationTypeCrossSell ProductRecommendationType = "cross-sell"
	ProductRecommendationTypeUpSell    ProductRecommendationType = "up-sell"
)

func (e ProductRecommendationType) ToPointer() *ProductRecommendationType {
	return &e
}
func (e *ProductRecommendationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change":
		fallthrough
	case "cross-sell":
		fallthrough
	case "up-sell":
		*e = ProductRecommendationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductRecommendationType: %v", v)
	}
}

type ProductRecommendation struct {
	// Additional fields that are not part of the schema
	Additional any           `json:"__additional,omitempty"`
	CreatedAt  *time.Time    `json:"_created_at,omitempty"`
	Files      *BaseRelation `json:"_files,omitempty"`
	ID         *string       `json:"_id,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// Organization Id the entity belongs to
	Org       string                      `json:"_org"`
	Purpose   []string                    `json:"_purpose,omitempty"`
	Schema    ProductRecommendationSchema `json:"_schema"`
	Tags      []string                    `json:"_tags,omitempty"`
	Title     *string                     `json:"_title,omitempty"`
	UpdatedAt *time.Time                  `json:"_updated_at,omitempty"`
	Offers    any                         `json:"offers,omitempty"`
	// Price being used as source
	SourcePrice any `json:"source_price,omitempty"`
	// Product being used as source
	SourceProduct any `json:"source_product,omitempty"`
	// Type of product recommendation
	Type ProductRecommendationType `json:"type"`
}

func (p ProductRecommendation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProductRecommendation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"_org", "_schema", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *ProductRecommendation) GetAdditional() any {
	if p == nil {
		return nil
	}
	return p.Additional
}

func (p *ProductRecommendation) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *ProductRecommendation) GetFiles() *BaseRelation {
	if p == nil {
		return nil
	}
	return p.Files
}

func (p *ProductRecommendation) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *ProductRecommendation) GetManifest() []string {
	if p == nil {
		return nil
	}
	return p.Manifest
}

func (p *ProductRecommendation) GetOrg() string {
	if p == nil {
		return ""
	}
	return p.Org
}

func (p *ProductRecommendation) GetPurpose() []string {
	if p == nil {
		return nil
	}
	return p.Purpose
}

func (p *ProductRecommendation) GetSchema() ProductRecommendationSchema {
	if p == nil {
		return ProductRecommendationSchema("")
	}
	return p.Schema
}

func (p *ProductRecommendation) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *ProductRecommendation) GetTitle() *string {
	if p == nil {
		return nil
	}
	return p.Title
}

func (p *ProductRecommendation) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *ProductRecommendation) GetOffers() any {
	if p == nil {
		return nil
	}
	return p.Offers
}

func (p *ProductRecommendation) GetSourcePrice() any {
	if p == nil {
		return nil
	}
	return p.SourcePrice
}

func (p *ProductRecommendation) GetSourceProduct() any {
	if p == nil {
		return nil
	}
	return p.SourceProduct
}

func (p *ProductRecommendation) GetType() ProductRecommendationType {
	if p == nil {
		return ProductRecommendationType("")
	}
	return p.Type
}
