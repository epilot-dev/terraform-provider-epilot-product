// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PortalConfigV3AdvancedMfa struct {
	// Advanced MFA feature flag
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *PortalConfigV3AdvancedMfa) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type PortalConfigV3EntryPoint string

const (
	PortalConfigV3EntryPointPassword PortalConfigV3EntryPoint = "PASSWORD"
	PortalConfigV3EntryPointSso      PortalConfigV3EntryPoint = "SSO"
)

func (e PortalConfigV3EntryPoint) ToPointer() *PortalConfigV3EntryPoint {
	return &e
}
func (e *PortalConfigV3EntryPoint) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PASSWORD":
		fallthrough
	case "SSO":
		*e = PortalConfigV3EntryPoint(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PortalConfigV3EntryPoint: %v", v)
	}
}

type PortalConfigV3PasswordlessLogin struct {
	// Passwordless login feature flag
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *PortalConfigV3PasswordlessLogin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// PortalConfigV3AuthSettings - Authentication settings for the portal
type PortalConfigV3AuthSettings struct {
	// Decide whether to automatically redirect to the provider page during login, which would completely bypass showing the portal authentication page.
	AutoRedirectToSso     *bool                            `json:"auto_redirect_to_sso,omitempty"`
	EntryPoint            *PortalConfigV3EntryPoint        `json:"entry_point,omitempty"`
	PasswordlessLogin     *PortalConfigV3PasswordlessLogin `json:"passwordless_login,omitempty"`
	PreferredSsoProviders []string                         `json:"preferred_sso_providers,omitempty"`
}

func (o *PortalConfigV3AuthSettings) GetAutoRedirectToSso() *bool {
	if o == nil {
		return nil
	}
	return o.AutoRedirectToSso
}

func (o *PortalConfigV3AuthSettings) GetEntryPoint() *PortalConfigV3EntryPoint {
	if o == nil {
		return nil
	}
	return o.EntryPoint
}

func (o *PortalConfigV3AuthSettings) GetPasswordlessLogin() *PortalConfigV3PasswordlessLogin {
	if o == nil {
		return nil
	}
	return o.PasswordlessLogin
}

func (o *PortalConfigV3AuthSettings) GetPreferredSsoProviders() []string {
	if o == nil {
		return nil
	}
	return o.PreferredSsoProviders
}

// PortalConfigV3PasswordPolicy - Password policy for the portal
type PortalConfigV3PasswordPolicy struct {
	// Minimum password length
	MinimumLength *int64 `json:"minimum_length,omitempty"`
	// Require lowercase characters
	RequireLowercase *bool `json:"require_lowercase,omitempty"`
	// Require numbers
	RequireNumbers *bool `json:"require_numbers,omitempty"`
	// Require symbols
	RequireSymbols *bool `json:"require_symbols,omitempty"`
	// Require uppercase characters
	RequireUppercase *bool `json:"require_uppercase,omitempty"`
}

func (o *PortalConfigV3PasswordPolicy) GetMinimumLength() *int64 {
	if o == nil {
		return nil
	}
	return o.MinimumLength
}

func (o *PortalConfigV3PasswordPolicy) GetRequireLowercase() *bool {
	if o == nil {
		return nil
	}
	return o.RequireLowercase
}

func (o *PortalConfigV3PasswordPolicy) GetRequireNumbers() *bool {
	if o == nil {
		return nil
	}
	return o.RequireNumbers
}

func (o *PortalConfigV3PasswordPolicy) GetRequireSymbols() *bool {
	if o == nil {
		return nil
	}
	return o.RequireSymbols
}

func (o *PortalConfigV3PasswordPolicy) GetRequireUppercase() *bool {
	if o == nil {
		return nil
	}
	return o.RequireUppercase
}

// PortalConfigV3CognitoDetails - AWS Cognito Pool details for the portal
type PortalConfigV3CognitoDetails struct {
	// Cognito user pool ARN
	CognitoUserPoolArn *string `json:"cognito_user_pool_arn,omitempty"`
	// Cognito user pool client ID
	CognitoUserPoolClientID *string `json:"cognito_user_pool_client_id,omitempty"`
	// Cognito user pool ID
	CognitoUserPoolID *string `json:"cognito_user_pool_id,omitempty"`
	// Password policy for the portal
	PasswordPolicy *PortalConfigV3PasswordPolicy `json:"password_policy,omitempty"`
}

func (o *PortalConfigV3CognitoDetails) GetCognitoUserPoolArn() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolArn
}

func (o *PortalConfigV3CognitoDetails) GetCognitoUserPoolClientID() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolClientID
}

func (o *PortalConfigV3CognitoDetails) GetCognitoUserPoolID() *string {
	if o == nil {
		return nil
	}
	return o.CognitoUserPoolID
}

func (o *PortalConfigV3CognitoDetails) GetPasswordPolicy() *PortalConfigV3PasswordPolicy {
	if o == nil {
		return nil
	}
	return o.PasswordPolicy
}

// PortalConfigV3ContractSelectorConfig - Configuration for contract selector in the portal
type PortalConfigV3ContractSelectorConfig struct {
	// Whether to show inactive contracts in the selector
	ShowInactive *bool `json:"show_inactive,omitempty"`
	// Path to the property to use as the contract title
	TitlePath *string `json:"title_path,omitempty"`
}

func (o *PortalConfigV3ContractSelectorConfig) GetShowInactive() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInactive
}

func (o *PortalConfigV3ContractSelectorConfig) GetTitlePath() *string {
	if o == nil {
		return nil
	}
	return o.TitlePath
}

// DefaultUserToNotify - Default 360 user to notify upon an internal notification
type DefaultUserToNotify struct {
	// Default admin users for pending user notification to notify
	OnPendingUser []AdminUser `json:"onPendingUser,omitempty"`
}

func (o *DefaultUserToNotify) GetOnPendingUser() []AdminUser {
	if o == nil {
		return nil
	}
	return o.OnPendingUser
}

type PortalConfigV3ActionLabel struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *PortalConfigV3ActionLabel) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *PortalConfigV3ActionLabel) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type EntityActions struct {
	ActionLabel *PortalConfigV3ActionLabel `json:"action_Label,omitempty"`
	// Entity ID
	JourneyID *string `json:"journey_id,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *EntitySlug `json:"slug,omitempty"`
}

func (o *EntityActions) GetActionLabel() *PortalConfigV3ActionLabel {
	if o == nil {
		return nil
	}
	return o.ActionLabel
}

func (o *EntityActions) GetJourneyID() *string {
	if o == nil {
		return nil
	}
	return o.JourneyID
}

func (o *EntityActions) GetSlug() *EntitySlug {
	if o == nil {
		return nil
	}
	return o.Slug
}

type PortalConfigV3CadencePeriodType string

const (
	PortalConfigV3CadencePeriodTypeDays   PortalConfigV3CadencePeriodType = "days"
	PortalConfigV3CadencePeriodTypeWeeks  PortalConfigV3CadencePeriodType = "weeks"
	PortalConfigV3CadencePeriodTypeMonths PortalConfigV3CadencePeriodType = "months"
)

func (e PortalConfigV3CadencePeriodType) ToPointer() *PortalConfigV3CadencePeriodType {
	return &e
}
func (e *PortalConfigV3CadencePeriodType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = PortalConfigV3CadencePeriodType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PortalConfigV3CadencePeriodType: %v", v)
	}
}

type PortalConfigV3RuleType string

const (
	PortalConfigV3RuleTypeCadence                PortalConfigV3RuleType = "cadence"
	PortalConfigV3RuleTypeRelativeToCurrentValue PortalConfigV3RuleType = "relative_to_current_value"
	PortalConfigV3RuleTypeDaysBeforeDate         PortalConfigV3RuleType = "days_before_date"
	PortalConfigV3RuleTypeOverduePayments        PortalConfigV3RuleType = "overdue_payments"
)

func (e PortalConfigV3RuleType) ToPointer() *PortalConfigV3RuleType {
	return &e
}
func (e *PortalConfigV3RuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cadence":
		fallthrough
	case "relative_to_current_value":
		fallthrough
	case "days_before_date":
		fallthrough
	case "overdue_payments":
		*e = PortalConfigV3RuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PortalConfigV3RuleType: %v", v)
	}
}

type PortalConfigV3EntityEditRules struct {
	AllowedDecrement              *string                          `json:"allowed_decrement,omitempty"`
	AllowedIncrement              *string                          `json:"allowed_increment,omitempty"`
	Attribute                     *string                          `json:"attribute,omitempty"`
	CadencePeriod                 *float64                         `json:"cadence_period,omitempty"`
	CadencePeriodType             *PortalConfigV3CadencePeriodType `json:"cadence_period_type,omitempty"`
	ChangesAllowed                *int64                           `json:"changes_allowed,omitempty"`
	GracePeriod                   *int64                           `json:"grace_period,omitempty"`
	NumberOfDaysBeforeRestriction *int64                           `json:"number_of_days_before_restriction,omitempty"`
	RuleType                      *PortalConfigV3RuleType          `json:"rule_type,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *EntitySlug `json:"slug,omitempty"`
}

func (o *PortalConfigV3EntityEditRules) GetAllowedDecrement() *string {
	if o == nil {
		return nil
	}
	return o.AllowedDecrement
}

func (o *PortalConfigV3EntityEditRules) GetAllowedIncrement() *string {
	if o == nil {
		return nil
	}
	return o.AllowedIncrement
}

func (o *PortalConfigV3EntityEditRules) GetAttribute() *string {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *PortalConfigV3EntityEditRules) GetCadencePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.CadencePeriod
}

func (o *PortalConfigV3EntityEditRules) GetCadencePeriodType() *PortalConfigV3CadencePeriodType {
	if o == nil {
		return nil
	}
	return o.CadencePeriodType
}

func (o *PortalConfigV3EntityEditRules) GetChangesAllowed() *int64 {
	if o == nil {
		return nil
	}
	return o.ChangesAllowed
}

func (o *PortalConfigV3EntityEditRules) GetGracePeriod() *int64 {
	if o == nil {
		return nil
	}
	return o.GracePeriod
}

func (o *PortalConfigV3EntityEditRules) GetNumberOfDaysBeforeRestriction() *int64 {
	if o == nil {
		return nil
	}
	return o.NumberOfDaysBeforeRestriction
}

func (o *PortalConfigV3EntityEditRules) GetRuleType() *PortalConfigV3RuleType {
	if o == nil {
		return nil
	}
	return o.RuleType
}

func (o *PortalConfigV3EntityEditRules) GetSlug() *EntitySlug {
	if o == nil {
		return nil
	}
	return o.Slug
}

type PortalConfigV3Type struct {
	// Attributes used to identify an entity
	Attributes []string `json:"attributes,omitempty"`
	// Enable/Disable the entity identifier
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

func (o *PortalConfigV3Type) GetAttributes() []string {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *PortalConfigV3Type) GetIsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

// PortalConfigV3EntityIdentifiers - Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type PortalConfigV3EntityIdentifiers struct {
	Type *PortalConfigV3Type `json:"type,omitempty"`
}

func (o *PortalConfigV3EntityIdentifiers) GetType() *PortalConfigV3Type {
	if o == nil {
		return nil
	}
	return o.Type
}

// PortalConfigV3FeatureSettings - Feature settings for the portal
type PortalConfigV3FeatureSettings struct {
	// Billing feature flag
	Billing *bool `json:"billing,omitempty"`
	// Change due date feature flag
	ChangeDueDate *bool `json:"change_due_date,omitempty"`
	// Enable or disable the new design for the portal
	NewDesign *bool `json:"new_design,omitempty"`
	// Start page feature flag
	StartPage *bool `json:"start_page,omitempty"`
}

func (o *PortalConfigV3FeatureSettings) GetBilling() *bool {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *PortalConfigV3FeatureSettings) GetChangeDueDate() *bool {
	if o == nil {
		return nil
	}
	return o.ChangeDueDate
}

func (o *PortalConfigV3FeatureSettings) GetNewDesign() *bool {
	if o == nil {
		return nil
	}
	return o.NewDesign
}

func (o *PortalConfigV3FeatureSettings) GetStartPage() *bool {
	if o == nil {
		return nil
	}
	return o.StartPage
}

// PortalConfigV3Images - Teaser & Banner Image web links
type PortalConfigV3Images struct {
	// URL of the order left teaser image
	OrderLeftTeaser *string `json:"orderLeftTeaser,omitempty"`
	// URL of the order right teaser image
	OrderRightTeaser *string `json:"orderRightTeaser,omitempty"`
	// URL of the welcome banner image
	WelcomeBanner *string `json:"welcomeBanner,omitempty"`
}

func (o *PortalConfigV3Images) GetOrderLeftTeaser() *string {
	if o == nil {
		return nil
	}
	return o.OrderLeftTeaser
}

func (o *PortalConfigV3Images) GetOrderRightTeaser() *string {
	if o == nil {
		return nil
	}
	return o.OrderRightTeaser
}

func (o *PortalConfigV3Images) GetWelcomeBanner() *string {
	if o == nil {
		return nil
	}
	return o.WelcomeBanner
}

// PortalConfigV3Canary - Canary feature flag
type PortalConfigV3Canary struct {
	// Enable/Disable the canary feature
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *PortalConfigV3Canary) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// PortalConfigV3Notracking - Disable Advanced Usage Metrics
type PortalConfigV3Notracking struct {
	// Disable browser-side scripts that track advanced usage metrics
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *PortalConfigV3Notracking) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// PortalConfigV3OrgSettings - Organization settings
type PortalConfigV3OrgSettings struct {
	// Canary feature flag
	Canary *PortalConfigV3Canary `json:"canary,omitempty"`
	// Disable Advanced Usage Metrics
	Notracking *PortalConfigV3Notracking `json:"notracking,omitempty"`
}

func (o *PortalConfigV3OrgSettings) GetCanary() *PortalConfigV3Canary {
	if o == nil {
		return nil
	}
	return o.Canary
}

func (o *PortalConfigV3OrgSettings) GetNotracking() *PortalConfigV3Notracking {
	if o == nil {
		return nil
	}
	return o.Notracking
}

type PortalConfigV3SelfRegistrationSetting string

const (
	PortalConfigV3SelfRegistrationSettingAllowWithContactCreation    PortalConfigV3SelfRegistrationSetting = "ALLOW_WITH_CONTACT_CREATION"
	PortalConfigV3SelfRegistrationSettingAllowWithoutContactCreation PortalConfigV3SelfRegistrationSetting = "ALLOW_WITHOUT_CONTACT_CREATION"
	PortalConfigV3SelfRegistrationSettingDeny                        PortalConfigV3SelfRegistrationSetting = "DENY"
)

func (e PortalConfigV3SelfRegistrationSetting) ToPointer() *PortalConfigV3SelfRegistrationSetting {
	return &e
}
func (e *PortalConfigV3SelfRegistrationSetting) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW_WITH_CONTACT_CREATION":
		fallthrough
	case "ALLOW_WITHOUT_CONTACT_CREATION":
		fallthrough
	case "DENY":
		*e = PortalConfigV3SelfRegistrationSetting(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PortalConfigV3SelfRegistrationSetting: %v", v)
	}
}

type PortalConfigV3TriggerName string

const (
	PortalConfigV3TriggerNameFirstLogin   PortalConfigV3TriggerName = "FIRST_LOGIN"
	PortalConfigV3TriggerNameAcceptOrder  PortalConfigV3TriggerName = "ACCEPT_ORDER"
	PortalConfigV3TriggerNameDeclineOrder PortalConfigV3TriggerName = "DECLINE_ORDER"
)

func (e PortalConfigV3TriggerName) ToPointer() *PortalConfigV3TriggerName {
	return &e
}
func (e *PortalConfigV3TriggerName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIRST_LOGIN":
		fallthrough
	case "ACCEPT_ORDER":
		fallthrough
	case "DECLINE_ORDER":
		*e = PortalConfigV3TriggerName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PortalConfigV3TriggerName: %v", v)
	}
}

type PortalConfigV3TriggeredJourneys struct {
	// Entity ID
	JourneyID   *string                    `json:"journey_id,omitempty"`
	TriggerName *PortalConfigV3TriggerName `json:"trigger_name,omitempty"`
}

func (o *PortalConfigV3TriggeredJourneys) GetJourneyID() *string {
	if o == nil {
		return nil
	}
	return o.JourneyID
}

func (o *PortalConfigV3TriggeredJourneys) GetTriggerName() *PortalConfigV3TriggerName {
	if o == nil {
		return nil
	}
	return o.TriggerName
}

type PortalConfigV3 struct {
	// Access token for the portal
	AccessToken *string                    `json:"accessToken,omitempty"`
	AdvancedMfa *PortalConfigV3AdvancedMfa `json:"advanced_mfa,omitempty"`
	// Allowed file extensions for upload
	AllowedFileExtensions   *AllowedFileExtensions `json:"allowed_file_extensions,omitempty"`
	ApprovalStateAttributes map[string][]string    `json:"approval_state_attributes,omitempty"`
	// Authentication settings for the portal
	AuthSettings *PortalConfigV3AuthSettings `json:"auth_settings,omitempty"`
	// AWS Cognito Pool details for the portal
	CognitoDetails *PortalConfigV3CognitoDetails `json:"cognito_details,omitempty"`
	// Stringified object with configuration details
	Config *string `json:"config,omitempty"`
	// Deprecated. Use registration_identifiers instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ContactIdentifiers []string `json:"contact_identifiers,omitempty"`
	// Identifiers to identify a contract by a portal user.
	ContractIdentifiers []ContractIdentifier `json:"contract_identifiers,omitempty"`
	// Configuration for contract selector in the portal
	ContractSelectorConfig *PortalConfigV3ContractSelectorConfig `json:"contract_selector_config,omitempty"`
	// Default 360 user to notify upon an internal notification
	DefaultUserToNotify *DefaultUserToNotify `json:"default_user_to_notify,omitempty"`
	// Entity ID
	DesignID *string `json:"design_id,omitempty"`
	// The URL on which the portal is accessible
	Domain *string `json:"domain,omitempty"`
	// Email templates used for authentication and internal processes
	EmailTemplates *EmailTemplates `json:"email_templates,omitempty"`
	// Enable/Disable the portal access
	Enabled *bool `json:"enabled,omitempty"`
	// Journey actions allowed on an entity by a portal user
	EntityActions []EntityActions `json:"entity_actions,omitempty"`
	// Rules for editing an entity by a portal user
	EntityEditRules []PortalConfigV3EntityEditRules `json:"entity_edit_rules,omitempty"`
	// Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	EntityIdentifiers *PortalConfigV3EntityIdentifiers `json:"entity_identifiers,omitempty"`
	// Configured Portal extensions hooks
	ExtensionHooks map[string]*ExtensionHookConfig `json:"extension_hooks,omitempty"`
	// Configured Portal extensions
	Extensions []ExtensionConfig `json:"extensions,omitempty"`
	// Feature flags for the portal
	FeatureFlags map[string]bool `json:"feature_flags,omitempty"`
	// Feature settings for the portal
	FeatureSettings *PortalConfigV3FeatureSettings `json:"feature_settings,omitempty"`
	// Permissions granted to a portal user while accessing entities
	Grants            []Grant                `json:"grants,omitempty"`
	IdentityProviders []ProviderPublicConfig `json:"identity_providers,omitempty"`
	// Teaser & Banner Image web links
	Images *PortalConfigV3Images `json:"images,omitempty"`
	// Number of years to look back for showing inactive contracts in the portal
	InactiveContractCutoffYears *float64 `json:"inactive_contract_cutoff_years,omitempty"`
	// Whether this is a dummy/test portal configuration
	IsDummy *bool `json:"is_dummy,omitempty"`
	// Mark true if the domain is an Epilot domain
	IsEpilotDomain *bool `json:"is_epilot_domain,omitempty"`
	// Whether this is a v3 portal configuration
	IsV3Item *bool `json:"is_v3_item,omitempty"`
	// Grace period in days for meter readings
	MeterReadingGracePeriod *float64 `json:"meter_reading_grace_period,omitempty"`
	// A short name to identify your portal
	Name *string `json:"name,omitempty"`
	// Organization settings
	OrgSettings *PortalConfigV3OrgSettings `json:"org_settings,omitempty"`
	// ID of the organization
	OrganizationID *string `json:"organization_id,omitempty"`
	// Origin of the portal
	Origin *string `json:"origin,omitempty"`
	Pages  []Page  `json:"pages,omitempty"`
	// ID of the portal
	PortalID *string `json:"portal_id,omitempty"`
	// Key of the portal config
	PortalSkV3 *string `json:"portal_sk_v3,omitempty"`
	// Prevent indexing by search engines
	PreventSearchEngineIndexing *bool `json:"prevent_search_engine_indexing,omitempty"`
	// Identifiers to identify a contact of a portal user during the registration.
	RegistrationIdentifiers []ContractIdentifier                   `json:"registration_identifiers,omitempty"`
	SelfRegistrationSetting *PortalConfigV3SelfRegistrationSetting `json:"self_registration_setting,omitempty"`
	// Journeys automatically opened on a portal user action
	TriggeredJourneys []PortalConfigV3TriggeredJourneys `json:"triggered_journeys,omitempty"`
}

func (o *PortalConfigV3) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *PortalConfigV3) GetAdvancedMfa() *PortalConfigV3AdvancedMfa {
	if o == nil {
		return nil
	}
	return o.AdvancedMfa
}

func (o *PortalConfigV3) GetAllowedFileExtensions() *AllowedFileExtensions {
	if o == nil {
		return nil
	}
	return o.AllowedFileExtensions
}

func (o *PortalConfigV3) GetApprovalStateAttributes() map[string][]string {
	if o == nil {
		return nil
	}
	return o.ApprovalStateAttributes
}

func (o *PortalConfigV3) GetAuthSettings() *PortalConfigV3AuthSettings {
	if o == nil {
		return nil
	}
	return o.AuthSettings
}

func (o *PortalConfigV3) GetCognitoDetails() *PortalConfigV3CognitoDetails {
	if o == nil {
		return nil
	}
	return o.CognitoDetails
}

func (o *PortalConfigV3) GetConfig() *string {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *PortalConfigV3) GetContactIdentifiers() []string {
	if o == nil {
		return nil
	}
	return o.ContactIdentifiers
}

func (o *PortalConfigV3) GetContractIdentifiers() []ContractIdentifier {
	if o == nil {
		return nil
	}
	return o.ContractIdentifiers
}

func (o *PortalConfigV3) GetContractSelectorConfig() *PortalConfigV3ContractSelectorConfig {
	if o == nil {
		return nil
	}
	return o.ContractSelectorConfig
}

func (o *PortalConfigV3) GetDefaultUserToNotify() *DefaultUserToNotify {
	if o == nil {
		return nil
	}
	return o.DefaultUserToNotify
}

func (o *PortalConfigV3) GetDesignID() *string {
	if o == nil {
		return nil
	}
	return o.DesignID
}

func (o *PortalConfigV3) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *PortalConfigV3) GetEmailTemplates() *EmailTemplates {
	if o == nil {
		return nil
	}
	return o.EmailTemplates
}

func (o *PortalConfigV3) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *PortalConfigV3) GetEntityActions() []EntityActions {
	if o == nil {
		return nil
	}
	return o.EntityActions
}

func (o *PortalConfigV3) GetEntityEditRules() []PortalConfigV3EntityEditRules {
	if o == nil {
		return nil
	}
	return o.EntityEditRules
}

func (o *PortalConfigV3) GetEntityIdentifiers() *PortalConfigV3EntityIdentifiers {
	if o == nil {
		return nil
	}
	return o.EntityIdentifiers
}

func (o *PortalConfigV3) GetExtensionHooks() map[string]*ExtensionHookConfig {
	if o == nil {
		return nil
	}
	return o.ExtensionHooks
}

func (o *PortalConfigV3) GetExtensions() []ExtensionConfig {
	if o == nil {
		return nil
	}
	return o.Extensions
}

func (o *PortalConfigV3) GetFeatureFlags() map[string]bool {
	if o == nil {
		return nil
	}
	return o.FeatureFlags
}

func (o *PortalConfigV3) GetFeatureSettings() *PortalConfigV3FeatureSettings {
	if o == nil {
		return nil
	}
	return o.FeatureSettings
}

func (o *PortalConfigV3) GetGrants() []Grant {
	if o == nil {
		return nil
	}
	return o.Grants
}

func (o *PortalConfigV3) GetIdentityProviders() []ProviderPublicConfig {
	if o == nil {
		return nil
	}
	return o.IdentityProviders
}

func (o *PortalConfigV3) GetImages() *PortalConfigV3Images {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *PortalConfigV3) GetInactiveContractCutoffYears() *float64 {
	if o == nil {
		return nil
	}
	return o.InactiveContractCutoffYears
}

func (o *PortalConfigV3) GetIsDummy() *bool {
	if o == nil {
		return nil
	}
	return o.IsDummy
}

func (o *PortalConfigV3) GetIsEpilotDomain() *bool {
	if o == nil {
		return nil
	}
	return o.IsEpilotDomain
}

func (o *PortalConfigV3) GetIsV3Item() *bool {
	if o == nil {
		return nil
	}
	return o.IsV3Item
}

func (o *PortalConfigV3) GetMeterReadingGracePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.MeterReadingGracePeriod
}

func (o *PortalConfigV3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PortalConfigV3) GetOrgSettings() *PortalConfigV3OrgSettings {
	if o == nil {
		return nil
	}
	return o.OrgSettings
}

func (o *PortalConfigV3) GetOrganizationID() *string {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *PortalConfigV3) GetOrigin() *string {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *PortalConfigV3) GetPages() []Page {
	if o == nil {
		return nil
	}
	return o.Pages
}

func (o *PortalConfigV3) GetPortalID() *string {
	if o == nil {
		return nil
	}
	return o.PortalID
}

func (o *PortalConfigV3) GetPortalSkV3() *string {
	if o == nil {
		return nil
	}
	return o.PortalSkV3
}

func (o *PortalConfigV3) GetPreventSearchEngineIndexing() *bool {
	if o == nil {
		return nil
	}
	return o.PreventSearchEngineIndexing
}

func (o *PortalConfigV3) GetRegistrationIdentifiers() []ContractIdentifier {
	if o == nil {
		return nil
	}
	return o.RegistrationIdentifiers
}

func (o *PortalConfigV3) GetSelfRegistrationSetting() *PortalConfigV3SelfRegistrationSetting {
	if o == nil {
		return nil
	}
	return o.SelfRegistrationSetting
}

func (o *PortalConfigV3) GetTriggeredJourneys() []PortalConfigV3TriggeredJourneys {
	if o == nil {
		return nil
	}
	return o.TriggeredJourneys
}
